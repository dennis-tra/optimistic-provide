/* tslint:disable */
/* eslint-disable */
/**
 * OptProv API
 * This is the REST API to interact and control with libp2p hosts. All responses not in the HTTP status code range [200,300) return the error object below. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    RoutingTable,
    RoutingTableFromJSON,
    RoutingTableFromJSONTyped,
    RoutingTableToJSON,
} from './RoutingTable';
import {
    RoutingTableDetailsAllOf,
    RoutingTableDetailsAllOfFromJSON,
    RoutingTableDetailsAllOfFromJSONTyped,
    RoutingTableDetailsAllOfToJSON,
} from './RoutingTableDetailsAllOf';
import {
    RoutingTableEntry,
    RoutingTableEntryFromJSON,
    RoutingTableEntryFromJSONTyped,
    RoutingTableEntryToJSON,
} from './RoutingTableEntry';

/**
 * 
 * @export
 * @interface RoutingTableDetails
 */
export interface RoutingTableDetails {
    /**
     * 
     * @type {number}
     * @memberof RoutingTableDetails
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof RoutingTableDetails
     */
    hostId: string;
    /**
     * 
     * @type {number}
     * @memberof RoutingTableDetails
     */
    bucketSize: number;
    /**
     * 
     * @type {number}
     * @memberof RoutingTableDetails
     */
    entryCount: number;
    /**
     * 
     * @type {string}
     * @memberof RoutingTableDetails
     */
    createdAt: string;
    /**
     * 
     * @type {Array<RoutingTableEntry>}
     * @memberof RoutingTableDetails
     */
    entries: Array<RoutingTableEntry>;
}

export function RoutingTableDetailsFromJSON(json: any): RoutingTableDetails {
    return RoutingTableDetailsFromJSONTyped(json, false);
}

export function RoutingTableDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoutingTableDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'hostId': json['hostId'],
        'bucketSize': json['bucketSize'],
        'entryCount': json['entryCount'],
        'createdAt': json['createdAt'],
        'entries': ((json['entries'] as Array<any>).map(RoutingTableEntryFromJSON)),
    };
}

export function RoutingTableDetailsToJSON(value?: RoutingTableDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'hostId': value.hostId,
        'bucketSize': value.bucketSize,
        'entryCount': value.entryCount,
        'createdAt': value.createdAt,
        'entries': ((value.entries as Array<any>).map(RoutingTableEntryToJSON)),
    };
}

