/* tslint:disable */
/* eslint-disable */
/**
 * OptProv API
 * This is the REST API to interact and control with libp2p hosts. All responses not in the HTTP status code range [200,300) return the error object below. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ProvideType,
    ProvideTypeFromJSON,
    ProvideTypeFromJSONTyped,
    ProvideTypeToJSON,
} from './ProvideType';

/**
 * 
 * @export
 * @interface CreateProvideMeasurementRequest
 */
export interface CreateProvideMeasurementRequest {
    /**
     * The host to use for this measurement
     * @type {string}
     * @memberof CreateProvideMeasurementRequest
     */
    hostId: string;
    /**
     * 
     * @type {number}
     * @memberof CreateProvideMeasurementRequest
     */
    iterations: number;
    /**
     * 
     * @type {number}
     * @memberof CreateProvideMeasurementRequest
     */
    concurrency: number;
    /**
     * 
     * @type {ProvideType}
     * @memberof CreateProvideMeasurementRequest
     */
    provideType: ProvideType;
}

export function CreateProvideMeasurementRequestFromJSON(json: any): CreateProvideMeasurementRequest {
    return CreateProvideMeasurementRequestFromJSONTyped(json, false);
}

export function CreateProvideMeasurementRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateProvideMeasurementRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hostId': json['hostId'],
        'iterations': json['iterations'],
        'concurrency': json['concurrency'],
        'provideType': ProvideTypeFromJSON(json['provideType']),
    };
}

export function CreateProvideMeasurementRequestToJSON(value?: CreateProvideMeasurementRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hostId': value.hostId,
        'iterations': value.iterations,
        'concurrency': value.concurrency,
        'provideType': ProvideTypeToJSON(value.provideType),
    };
}

