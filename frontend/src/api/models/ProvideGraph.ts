/* tslint:disable */
/* eslint-disable */
/**
 * OptProv API
 * This is the REST API to interact and control with libp2p hosts. All responses not in the HTTP status code range [200,300) return the error object below. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AddProvider,
    AddProviderFromJSON,
    AddProviderFromJSONTyped,
    AddProviderToJSON,
} from './AddProvider';
import {
    Connection,
    ConnectionFromJSON,
    ConnectionFromJSONTyped,
    ConnectionToJSON,
} from './Connection';
import {
    Dial,
    DialFromJSON,
    DialFromJSONTyped,
    DialToJSON,
} from './Dial';
import {
    FindNode,
    FindNodeFromJSON,
    FindNodeFromJSONTyped,
    FindNodeToJSON,
} from './FindNode';
import {
    Provide,
    ProvideFromJSON,
    ProvideFromJSONTyped,
    ProvideToJSON,
} from './Provide';
import {
    ProvideGraphAllOf,
    ProvideGraphAllOfFromJSON,
    ProvideGraphAllOfFromJSONTyped,
    ProvideGraphAllOfToJSON,
} from './ProvideGraphAllOf';
import {
    ProvidePeerInfo,
    ProvidePeerInfoFromJSON,
    ProvidePeerInfoFromJSONTyped,
    ProvidePeerInfoToJSON,
} from './ProvidePeerInfo';

/**
 * 
 * @export
 * @interface ProvideGraph
 */
export interface ProvideGraph {
    /**
     * 
     * @type {number}
     * @memberof ProvideGraph
     */
    provideId: number;
    /**
     * 
     * @type {string}
     * @memberof ProvideGraph
     */
    hostId: string;
    /**
     * 
     * @type {string}
     * @memberof ProvideGraph
     */
    contentId: string;
    /**
     * 
     * @type {number}
     * @memberof ProvideGraph
     */
    initialRoutingTableId: number;
    /**
     * 
     * @type {number}
     * @memberof ProvideGraph
     */
    finalRoutingTableId: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProvideGraph
     */
    startedAt: string;
    /**
     * 
     * @type {string}
     * @memberof ProvideGraph
     */
    endedAt: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProvideGraph
     */
    error: string | null;
    /**
     * All peers + information in the order they should be plotted.
     * @type {Array<ProvidePeerInfo>}
     * @memberof ProvideGraph
     */
    peers: Array<ProvidePeerInfo>;
    /**
     * 
     * @type {Array<Dial>}
     * @memberof ProvideGraph
     */
    dials: Array<Dial>;
    /**
     * 
     * @type {Array<Connection>}
     * @memberof ProvideGraph
     */
    connections: Array<Connection>;
    /**
     * 
     * @type {Array<FindNode>}
     * @memberof ProvideGraph
     */
    findNodes: Array<FindNode>;
    /**
     * 
     * @type {Array<AddProvider>}
     * @memberof ProvideGraph
     */
    addProviders: Array<AddProvider>;
}

export function ProvideGraphFromJSON(json: any): ProvideGraph {
    return ProvideGraphFromJSONTyped(json, false);
}

export function ProvideGraphFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProvideGraph {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'provideId': json['provideId'],
        'hostId': json['hostId'],
        'contentId': json['contentId'],
        'initialRoutingTableId': json['initialRoutingTableId'],
        'finalRoutingTableId': json['finalRoutingTableId'],
        'startedAt': json['startedAt'],
        'endedAt': json['endedAt'],
        'error': json['error'],
        'peers': ((json['peers'] as Array<any>).map(ProvidePeerInfoFromJSON)),
        'dials': ((json['dials'] as Array<any>).map(DialFromJSON)),
        'connections': ((json['connections'] as Array<any>).map(ConnectionFromJSON)),
        'findNodes': ((json['findNodes'] as Array<any>).map(FindNodeFromJSON)),
        'addProviders': ((json['addProviders'] as Array<any>).map(AddProviderFromJSON)),
    };
}

export function ProvideGraphToJSON(value?: ProvideGraph | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'provideId': value.provideId,
        'hostId': value.hostId,
        'contentId': value.contentId,
        'initialRoutingTableId': value.initialRoutingTableId,
        'finalRoutingTableId': value.finalRoutingTableId,
        'startedAt': value.startedAt,
        'endedAt': value.endedAt,
        'error': value.error,
        'peers': ((value.peers as Array<any>).map(ProvidePeerInfoToJSON)),
        'dials': ((value.dials as Array<any>).map(DialToJSON)),
        'connections': ((value.connections as Array<any>).map(ConnectionToJSON)),
        'findNodes': ((value.findNodes as Array<any>).map(FindNodeToJSON)),
        'addProviders': ((value.addProviders as Array<any>).map(AddProviderToJSON)),
    };
}

