/* tslint:disable */
/* eslint-disable */
/**
 * OptProv API
 * This is the REST API to interact and control with libp2p hosts. All responses not in the HTTP status code range [200,300) return the error object below. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AddProvider,
    AddProviderFromJSON,
    AddProviderFromJSONTyped,
    AddProviderToJSON,
} from './AddProvider';
import {
    Connection,
    ConnectionFromJSON,
    ConnectionFromJSONTyped,
    ConnectionToJSON,
} from './Connection';
import {
    Dial,
    DialFromJSON,
    DialFromJSONTyped,
    DialToJSON,
} from './Dial';
import {
    FindNode,
    FindNodeFromJSON,
    FindNodeFromJSONTyped,
    FindNodeToJSON,
} from './FindNode';
import {
    GraphAllOfPeers,
    GraphAllOfPeersFromJSON,
    GraphAllOfPeersFromJSONTyped,
    GraphAllOfPeersToJSON,
} from './GraphAllOfPeers';

/**
 * 
 * @export
 * @interface GraphAllOf
 */
export interface GraphAllOf {
    /**
     * All peers + information in the order they should be plotted.
     * @type {Array<GraphAllOfPeers>}
     * @memberof GraphAllOf
     */
    peers: Array<GraphAllOfPeers>;
    /**
     * 
     * @type {Array<Dial>}
     * @memberof GraphAllOf
     */
    dials: Array<Dial>;
    /**
     * 
     * @type {Array<Connection>}
     * @memberof GraphAllOf
     */
    connections: Array<Connection>;
    /**
     * 
     * @type {Array<FindNode>}
     * @memberof GraphAllOf
     */
    findNodes: Array<FindNode>;
    /**
     * 
     * @type {Array<AddProvider>}
     * @memberof GraphAllOf
     */
    addProviders: Array<AddProvider>;
}

export function GraphAllOfFromJSON(json: any): GraphAllOf {
    return GraphAllOfFromJSONTyped(json, false);
}

export function GraphAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): GraphAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'peers': ((json['peers'] as Array<any>).map(GraphAllOfPeersFromJSON)),
        'dials': ((json['dials'] as Array<any>).map(DialFromJSON)),
        'connections': ((json['connections'] as Array<any>).map(ConnectionFromJSON)),
        'findNodes': ((json['findNodes'] as Array<any>).map(FindNodeFromJSON)),
        'addProviders': ((json['addProviders'] as Array<any>).map(AddProviderFromJSON)),
    };
}

export function GraphAllOfToJSON(value?: GraphAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'peers': ((value.peers as Array<any>).map(GraphAllOfPeersToJSON)),
        'dials': ((value.dials as Array<any>).map(DialToJSON)),
        'connections': ((value.connections as Array<any>).map(ConnectionToJSON)),
        'findNodes': ((value.findNodes as Array<any>).map(FindNodeToJSON)),
        'addProviders': ((value.addProviders as Array<any>).map(AddProviderToJSON)),
    };
}

