// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testNetworkSizeEstimates(t *testing.T) {
	t.Parallel()

	query := NetworkSizeEstimates()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testNetworkSizeEstimatesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkSizeEstimate{}
	if err = randomize.Struct(seed, o, networkSizeEstimateDBTypes, true, networkSizeEstimateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkSizeEstimate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NetworkSizeEstimates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNetworkSizeEstimatesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkSizeEstimate{}
	if err = randomize.Struct(seed, o, networkSizeEstimateDBTypes, true, networkSizeEstimateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkSizeEstimate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := NetworkSizeEstimates().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NetworkSizeEstimates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNetworkSizeEstimatesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkSizeEstimate{}
	if err = randomize.Struct(seed, o, networkSizeEstimateDBTypes, true, networkSizeEstimateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkSizeEstimate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NetworkSizeEstimateSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NetworkSizeEstimates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNetworkSizeEstimatesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkSizeEstimate{}
	if err = randomize.Struct(seed, o, networkSizeEstimateDBTypes, true, networkSizeEstimateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkSizeEstimate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := NetworkSizeEstimateExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if NetworkSizeEstimate exists: %s", err)
	}
	if !e {
		t.Errorf("Expected NetworkSizeEstimateExists to return true, but got false.")
	}
}

func testNetworkSizeEstimatesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkSizeEstimate{}
	if err = randomize.Struct(seed, o, networkSizeEstimateDBTypes, true, networkSizeEstimateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkSizeEstimate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	networkSizeEstimateFound, err := FindNetworkSizeEstimate(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if networkSizeEstimateFound == nil {
		t.Error("want a record, got nil")
	}
}

func testNetworkSizeEstimatesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkSizeEstimate{}
	if err = randomize.Struct(seed, o, networkSizeEstimateDBTypes, true, networkSizeEstimateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkSizeEstimate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = NetworkSizeEstimates().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testNetworkSizeEstimatesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkSizeEstimate{}
	if err = randomize.Struct(seed, o, networkSizeEstimateDBTypes, true, networkSizeEstimateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkSizeEstimate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := NetworkSizeEstimates().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testNetworkSizeEstimatesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	networkSizeEstimateOne := &NetworkSizeEstimate{}
	networkSizeEstimateTwo := &NetworkSizeEstimate{}
	if err = randomize.Struct(seed, networkSizeEstimateOne, networkSizeEstimateDBTypes, false, networkSizeEstimateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkSizeEstimate struct: %s", err)
	}
	if err = randomize.Struct(seed, networkSizeEstimateTwo, networkSizeEstimateDBTypes, false, networkSizeEstimateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkSizeEstimate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = networkSizeEstimateOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = networkSizeEstimateTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NetworkSizeEstimates().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testNetworkSizeEstimatesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	networkSizeEstimateOne := &NetworkSizeEstimate{}
	networkSizeEstimateTwo := &NetworkSizeEstimate{}
	if err = randomize.Struct(seed, networkSizeEstimateOne, networkSizeEstimateDBTypes, false, networkSizeEstimateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkSizeEstimate struct: %s", err)
	}
	if err = randomize.Struct(seed, networkSizeEstimateTwo, networkSizeEstimateDBTypes, false, networkSizeEstimateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkSizeEstimate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = networkSizeEstimateOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = networkSizeEstimateTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NetworkSizeEstimates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func networkSizeEstimateBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *NetworkSizeEstimate) error {
	*o = NetworkSizeEstimate{}
	return nil
}

func networkSizeEstimateAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *NetworkSizeEstimate) error {
	*o = NetworkSizeEstimate{}
	return nil
}

func networkSizeEstimateAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *NetworkSizeEstimate) error {
	*o = NetworkSizeEstimate{}
	return nil
}

func networkSizeEstimateBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NetworkSizeEstimate) error {
	*o = NetworkSizeEstimate{}
	return nil
}

func networkSizeEstimateAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NetworkSizeEstimate) error {
	*o = NetworkSizeEstimate{}
	return nil
}

func networkSizeEstimateBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NetworkSizeEstimate) error {
	*o = NetworkSizeEstimate{}
	return nil
}

func networkSizeEstimateAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NetworkSizeEstimate) error {
	*o = NetworkSizeEstimate{}
	return nil
}

func networkSizeEstimateBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NetworkSizeEstimate) error {
	*o = NetworkSizeEstimate{}
	return nil
}

func networkSizeEstimateAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NetworkSizeEstimate) error {
	*o = NetworkSizeEstimate{}
	return nil
}

func testNetworkSizeEstimatesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &NetworkSizeEstimate{}
	o := &NetworkSizeEstimate{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, networkSizeEstimateDBTypes, false); err != nil {
		t.Errorf("Unable to randomize NetworkSizeEstimate object: %s", err)
	}

	AddNetworkSizeEstimateHook(boil.BeforeInsertHook, networkSizeEstimateBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	networkSizeEstimateBeforeInsertHooks = []NetworkSizeEstimateHook{}

	AddNetworkSizeEstimateHook(boil.AfterInsertHook, networkSizeEstimateAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	networkSizeEstimateAfterInsertHooks = []NetworkSizeEstimateHook{}

	AddNetworkSizeEstimateHook(boil.AfterSelectHook, networkSizeEstimateAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	networkSizeEstimateAfterSelectHooks = []NetworkSizeEstimateHook{}

	AddNetworkSizeEstimateHook(boil.BeforeUpdateHook, networkSizeEstimateBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	networkSizeEstimateBeforeUpdateHooks = []NetworkSizeEstimateHook{}

	AddNetworkSizeEstimateHook(boil.AfterUpdateHook, networkSizeEstimateAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	networkSizeEstimateAfterUpdateHooks = []NetworkSizeEstimateHook{}

	AddNetworkSizeEstimateHook(boil.BeforeDeleteHook, networkSizeEstimateBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	networkSizeEstimateBeforeDeleteHooks = []NetworkSizeEstimateHook{}

	AddNetworkSizeEstimateHook(boil.AfterDeleteHook, networkSizeEstimateAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	networkSizeEstimateAfterDeleteHooks = []NetworkSizeEstimateHook{}

	AddNetworkSizeEstimateHook(boil.BeforeUpsertHook, networkSizeEstimateBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	networkSizeEstimateBeforeUpsertHooks = []NetworkSizeEstimateHook{}

	AddNetworkSizeEstimateHook(boil.AfterUpsertHook, networkSizeEstimateAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	networkSizeEstimateAfterUpsertHooks = []NetworkSizeEstimateHook{}
}

func testNetworkSizeEstimatesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkSizeEstimate{}
	if err = randomize.Struct(seed, o, networkSizeEstimateDBTypes, true, networkSizeEstimateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkSizeEstimate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NetworkSizeEstimates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNetworkSizeEstimatesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkSizeEstimate{}
	if err = randomize.Struct(seed, o, networkSizeEstimateDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NetworkSizeEstimate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(networkSizeEstimateColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := NetworkSizeEstimates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNetworkSizeEstimateToOneHostUsingHost(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local NetworkSizeEstimate
	var foreign Host

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, networkSizeEstimateDBTypes, false, networkSizeEstimateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkSizeEstimate struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, hostDBTypes, false, hostColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Host struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.HostID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Host().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NetworkSizeEstimateSlice{&local}
	if err = local.L.LoadHost(ctx, tx, false, (*[]*NetworkSizeEstimate)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Host == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Host = nil
	if err = local.L.LoadHost(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Host == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNetworkSizeEstimateToOneSetOpHostUsingHost(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a NetworkSizeEstimate
	var b, c Host

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, networkSizeEstimateDBTypes, false, strmangle.SetComplement(networkSizeEstimatePrimaryKeyColumns, networkSizeEstimateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, hostDBTypes, false, strmangle.SetComplement(hostPrimaryKeyColumns, hostColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, hostDBTypes, false, strmangle.SetComplement(hostPrimaryKeyColumns, hostColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Host{&b, &c} {
		err = a.SetHost(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Host != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.NetworkSizeEstimates[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.HostID != x.ID {
			t.Error("foreign key was wrong value", a.HostID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.HostID))
		reflect.Indirect(reflect.ValueOf(&a.HostID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.HostID != x.ID {
			t.Error("foreign key was wrong value", a.HostID, x.ID)
		}
	}
}

func testNetworkSizeEstimatesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkSizeEstimate{}
	if err = randomize.Struct(seed, o, networkSizeEstimateDBTypes, true, networkSizeEstimateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkSizeEstimate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNetworkSizeEstimatesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkSizeEstimate{}
	if err = randomize.Struct(seed, o, networkSizeEstimateDBTypes, true, networkSizeEstimateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkSizeEstimate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NetworkSizeEstimateSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNetworkSizeEstimatesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NetworkSizeEstimate{}
	if err = randomize.Struct(seed, o, networkSizeEstimateDBTypes, true, networkSizeEstimateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkSizeEstimate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NetworkSizeEstimates().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	networkSizeEstimateDBTypes = map[string]string{`ID`: `integer`, `HostID`: `integer`, `NetworkSize`: `double precision`, `NetworkSizeErr`: `double precision`, `RSquared`: `double precision`, `SampleSize`: `integer`, `CreatedAt`: `timestamp with time zone`, `CPL`: `integer`, `Distances`: `ARRAYdouble precision`, `Key`: `text`}
	_                          = bytes.MinRead
)

func testNetworkSizeEstimatesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(networkSizeEstimatePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(networkSizeEstimateAllColumns) == len(networkSizeEstimatePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NetworkSizeEstimate{}
	if err = randomize.Struct(seed, o, networkSizeEstimateDBTypes, true, networkSizeEstimateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkSizeEstimate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NetworkSizeEstimates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, networkSizeEstimateDBTypes, true, networkSizeEstimatePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NetworkSizeEstimate struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testNetworkSizeEstimatesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(networkSizeEstimateAllColumns) == len(networkSizeEstimatePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NetworkSizeEstimate{}
	if err = randomize.Struct(seed, o, networkSizeEstimateDBTypes, true, networkSizeEstimateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NetworkSizeEstimate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NetworkSizeEstimates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, networkSizeEstimateDBTypes, true, networkSizeEstimatePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NetworkSizeEstimate struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(networkSizeEstimateAllColumns, networkSizeEstimatePrimaryKeyColumns) {
		fields = networkSizeEstimateAllColumns
	} else {
		fields = strmangle.SetComplement(
			networkSizeEstimateAllColumns,
			networkSizeEstimatePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := NetworkSizeEstimateSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testNetworkSizeEstimatesUpsert(t *testing.T) {
	t.Parallel()

	if len(networkSizeEstimateAllColumns) == len(networkSizeEstimatePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := NetworkSizeEstimate{}
	if err = randomize.Struct(seed, &o, networkSizeEstimateDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NetworkSizeEstimate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert NetworkSizeEstimate: %s", err)
	}

	count, err := NetworkSizeEstimates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, networkSizeEstimateDBTypes, false, networkSizeEstimatePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NetworkSizeEstimate struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert NetworkSizeEstimate: %s", err)
	}

	count, err = NetworkSizeEstimates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
