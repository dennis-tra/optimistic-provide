// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FindNode is an object representing the database table.
type FindNode struct {
	ID               int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProvideID        int         `boil:"provide_id" json:"provide_id" toml:"provide_id" yaml:"provide_id"`
	LocalID          int         `boil:"local_id" json:"local_id" toml:"local_id" yaml:"local_id"`
	RemoteID         int         `boil:"remote_id" json:"remote_id" toml:"remote_id" yaml:"remote_id"`
	StartedAt        time.Time   `boil:"started_at" json:"started_at" toml:"started_at" yaml:"started_at"`
	EndedAt          time.Time   `boil:"ended_at" json:"ended_at" toml:"ended_at" yaml:"ended_at"`
	CloserPeersCount null.Int    `boil:"closer_peers_count" json:"closer_peers_count,omitempty" toml:"closer_peers_count" yaml:"closer_peers_count,omitempty"`
	Error            null.String `boil:"error" json:"error,omitempty" toml:"error" yaml:"error,omitempty"`

	R *findNodeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L findNodeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FindNodeColumns = struct {
	ID               string
	ProvideID        string
	LocalID          string
	RemoteID         string
	StartedAt        string
	EndedAt          string
	CloserPeersCount string
	Error            string
}{
	ID:               "id",
	ProvideID:        "provide_id",
	LocalID:          "local_id",
	RemoteID:         "remote_id",
	StartedAt:        "started_at",
	EndedAt:          "ended_at",
	CloserPeersCount: "closer_peers_count",
	Error:            "error",
}

var FindNodeTableColumns = struct {
	ID               string
	ProvideID        string
	LocalID          string
	RemoteID         string
	StartedAt        string
	EndedAt          string
	CloserPeersCount string
	Error            string
}{
	ID:               "find_nodes.id",
	ProvideID:        "find_nodes.provide_id",
	LocalID:          "find_nodes.local_id",
	RemoteID:         "find_nodes.remote_id",
	StartedAt:        "find_nodes.started_at",
	EndedAt:          "find_nodes.ended_at",
	CloserPeersCount: "find_nodes.closer_peers_count",
	Error:            "find_nodes.error",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var FindNodeWhere = struct {
	ID               whereHelperint
	ProvideID        whereHelperint
	LocalID          whereHelperint
	RemoteID         whereHelperint
	StartedAt        whereHelpertime_Time
	EndedAt          whereHelpertime_Time
	CloserPeersCount whereHelpernull_Int
	Error            whereHelpernull_String
}{
	ID:               whereHelperint{field: "\"find_nodes\".\"id\""},
	ProvideID:        whereHelperint{field: "\"find_nodes\".\"provide_id\""},
	LocalID:          whereHelperint{field: "\"find_nodes\".\"local_id\""},
	RemoteID:         whereHelperint{field: "\"find_nodes\".\"remote_id\""},
	StartedAt:        whereHelpertime_Time{field: "\"find_nodes\".\"started_at\""},
	EndedAt:          whereHelpertime_Time{field: "\"find_nodes\".\"ended_at\""},
	CloserPeersCount: whereHelpernull_Int{field: "\"find_nodes\".\"closer_peers_count\""},
	Error:            whereHelpernull_String{field: "\"find_nodes\".\"error\""},
}

// FindNodeRels is where relationship names are stored.
var FindNodeRels = struct {
	Local       string
	Provide     string
	Remote      string
	CloserPeers string
}{
	Local:       "Local",
	Provide:     "Provide",
	Remote:      "Remote",
	CloserPeers: "CloserPeers",
}

// findNodeR is where relationships are stored.
type findNodeR struct {
	Local       *Peer           `boil:"Local" json:"Local" toml:"Local" yaml:"Local"`
	Provide     *Provide        `boil:"Provide" json:"Provide" toml:"Provide" yaml:"Provide"`
	Remote      *Peer           `boil:"Remote" json:"Remote" toml:"Remote" yaml:"Remote"`
	CloserPeers CloserPeerSlice `boil:"CloserPeers" json:"CloserPeers" toml:"CloserPeers" yaml:"CloserPeers"`
}

// NewStruct creates a new relationship struct
func (*findNodeR) NewStruct() *findNodeR {
	return &findNodeR{}
}

// findNodeL is where Load methods for each relationship are stored.
type findNodeL struct{}

var (
	findNodeAllColumns            = []string{"id", "provide_id", "local_id", "remote_id", "started_at", "ended_at", "closer_peers_count", "error"}
	findNodeColumnsWithoutDefault = []string{"provide_id", "local_id", "remote_id", "started_at", "ended_at", "closer_peers_count", "error"}
	findNodeColumnsWithDefault    = []string{"id"}
	findNodePrimaryKeyColumns     = []string{"id"}
)

type (
	// FindNodeSlice is an alias for a slice of pointers to FindNode.
	// This should almost always be used instead of []FindNode.
	FindNodeSlice []*FindNode
	// FindNodeHook is the signature for custom FindNode hook methods
	FindNodeHook func(context.Context, boil.ContextExecutor, *FindNode) error

	findNodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	findNodeType                 = reflect.TypeOf(&FindNode{})
	findNodeMapping              = queries.MakeStructMapping(findNodeType)
	findNodePrimaryKeyMapping, _ = queries.BindMapping(findNodeType, findNodeMapping, findNodePrimaryKeyColumns)
	findNodeInsertCacheMut       sync.RWMutex
	findNodeInsertCache          = make(map[string]insertCache)
	findNodeUpdateCacheMut       sync.RWMutex
	findNodeUpdateCache          = make(map[string]updateCache)
	findNodeUpsertCacheMut       sync.RWMutex
	findNodeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var findNodeBeforeInsertHooks []FindNodeHook
var findNodeBeforeUpdateHooks []FindNodeHook
var findNodeBeforeDeleteHooks []FindNodeHook
var findNodeBeforeUpsertHooks []FindNodeHook

var findNodeAfterInsertHooks []FindNodeHook
var findNodeAfterSelectHooks []FindNodeHook
var findNodeAfterUpdateHooks []FindNodeHook
var findNodeAfterDeleteHooks []FindNodeHook
var findNodeAfterUpsertHooks []FindNodeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FindNode) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range findNodeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FindNode) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range findNodeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FindNode) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range findNodeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FindNode) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range findNodeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FindNode) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range findNodeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FindNode) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range findNodeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FindNode) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range findNodeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FindNode) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range findNodeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FindNode) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range findNodeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFindNodeHook registers your hook function for all future operations.
func AddFindNodeHook(hookPoint boil.HookPoint, findNodeHook FindNodeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		findNodeBeforeInsertHooks = append(findNodeBeforeInsertHooks, findNodeHook)
	case boil.BeforeUpdateHook:
		findNodeBeforeUpdateHooks = append(findNodeBeforeUpdateHooks, findNodeHook)
	case boil.BeforeDeleteHook:
		findNodeBeforeDeleteHooks = append(findNodeBeforeDeleteHooks, findNodeHook)
	case boil.BeforeUpsertHook:
		findNodeBeforeUpsertHooks = append(findNodeBeforeUpsertHooks, findNodeHook)
	case boil.AfterInsertHook:
		findNodeAfterInsertHooks = append(findNodeAfterInsertHooks, findNodeHook)
	case boil.AfterSelectHook:
		findNodeAfterSelectHooks = append(findNodeAfterSelectHooks, findNodeHook)
	case boil.AfterUpdateHook:
		findNodeAfterUpdateHooks = append(findNodeAfterUpdateHooks, findNodeHook)
	case boil.AfterDeleteHook:
		findNodeAfterDeleteHooks = append(findNodeAfterDeleteHooks, findNodeHook)
	case boil.AfterUpsertHook:
		findNodeAfterUpsertHooks = append(findNodeAfterUpsertHooks, findNodeHook)
	}
}

// One returns a single findNode record from the query.
func (q findNodeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FindNode, error) {
	o := &FindNode{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for find_nodes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FindNode records from the query.
func (q findNodeQuery) All(ctx context.Context, exec boil.ContextExecutor) (FindNodeSlice, error) {
	var o []*FindNode

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FindNode slice")
	}

	if len(findNodeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FindNode records in the query.
func (q findNodeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count find_nodes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q findNodeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if find_nodes exists")
	}

	return count > 0, nil
}

// Local pointed to by the foreign key.
func (o *FindNode) Local(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LocalID),
	}

	queryMods = append(queryMods, mods...)

	query := Peers(queryMods...)
	queries.SetFrom(query.Query, "\"peers\"")

	return query
}

// Provide pointed to by the foreign key.
func (o *FindNode) Provide(mods ...qm.QueryMod) provideQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProvideID),
	}

	queryMods = append(queryMods, mods...)

	query := Provides(queryMods...)
	queries.SetFrom(query.Query, "\"provides\"")

	return query
}

// Remote pointed to by the foreign key.
func (o *FindNode) Remote(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RemoteID),
	}

	queryMods = append(queryMods, mods...)

	query := Peers(queryMods...)
	queries.SetFrom(query.Query, "\"peers\"")

	return query
}

// CloserPeers retrieves all the closer_peer's CloserPeers with an executor.
func (o *FindNode) CloserPeers(mods ...qm.QueryMod) closerPeerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"closer_peers\".\"find_node_id\"=?", o.ID),
	)

	query := CloserPeers(queryMods...)
	queries.SetFrom(query.Query, "\"closer_peers\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"closer_peers\".*"})
	}

	return query
}

// LoadLocal allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (findNodeL) LoadLocal(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFindNode interface{}, mods queries.Applicator) error {
	var slice []*FindNode
	var object *FindNode

	if singular {
		object = maybeFindNode.(*FindNode)
	} else {
		slice = *maybeFindNode.(*[]*FindNode)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &findNodeR{}
		}
		args = append(args, object.LocalID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &findNodeR{}
			}

			for _, a := range args {
				if a == obj.LocalID {
					continue Outer
				}
			}

			args = append(args, obj.LocalID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(findNodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Local = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.LocalFindNodes = append(foreign.R.LocalFindNodes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LocalID == foreign.ID {
				local.R.Local = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.LocalFindNodes = append(foreign.R.LocalFindNodes, local)
				break
			}
		}
	}

	return nil
}

// LoadProvide allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (findNodeL) LoadProvide(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFindNode interface{}, mods queries.Applicator) error {
	var slice []*FindNode
	var object *FindNode

	if singular {
		object = maybeFindNode.(*FindNode)
	} else {
		slice = *maybeFindNode.(*[]*FindNode)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &findNodeR{}
		}
		args = append(args, object.ProvideID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &findNodeR{}
			}

			for _, a := range args {
				if a == obj.ProvideID {
					continue Outer
				}
			}

			args = append(args, obj.ProvideID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`provides`),
		qm.WhereIn(`provides.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Provide")
	}

	var resultSlice []*Provide
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Provide")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for provides")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for provides")
	}

	if len(findNodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Provide = foreign
		if foreign.R == nil {
			foreign.R = &provideR{}
		}
		foreign.R.FindNodes = append(foreign.R.FindNodes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProvideID == foreign.ID {
				local.R.Provide = foreign
				if foreign.R == nil {
					foreign.R = &provideR{}
				}
				foreign.R.FindNodes = append(foreign.R.FindNodes, local)
				break
			}
		}
	}

	return nil
}

// LoadRemote allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (findNodeL) LoadRemote(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFindNode interface{}, mods queries.Applicator) error {
	var slice []*FindNode
	var object *FindNode

	if singular {
		object = maybeFindNode.(*FindNode)
	} else {
		slice = *maybeFindNode.(*[]*FindNode)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &findNodeR{}
		}
		args = append(args, object.RemoteID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &findNodeR{}
			}

			for _, a := range args {
				if a == obj.RemoteID {
					continue Outer
				}
			}

			args = append(args, obj.RemoteID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(findNodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Remote = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.RemoteFindNodes = append(foreign.R.RemoteFindNodes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RemoteID == foreign.ID {
				local.R.Remote = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.RemoteFindNodes = append(foreign.R.RemoteFindNodes, local)
				break
			}
		}
	}

	return nil
}

// LoadCloserPeers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (findNodeL) LoadCloserPeers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFindNode interface{}, mods queries.Applicator) error {
	var slice []*FindNode
	var object *FindNode

	if singular {
		object = maybeFindNode.(*FindNode)
	} else {
		slice = *maybeFindNode.(*[]*FindNode)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &findNodeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &findNodeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`closer_peers`),
		qm.WhereIn(`closer_peers.find_node_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load closer_peers")
	}

	var resultSlice []*CloserPeer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice closer_peers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on closer_peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for closer_peers")
	}

	if len(closerPeerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CloserPeers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &closerPeerR{}
			}
			foreign.R.FindNode = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.FindNodeID {
				local.R.CloserPeers = append(local.R.CloserPeers, foreign)
				if foreign.R == nil {
					foreign.R = &closerPeerR{}
				}
				foreign.R.FindNode = local
				break
			}
		}
	}

	return nil
}

// SetLocal of the findNode to the related item.
// Sets o.R.Local to related.
// Adds o to related.R.LocalFindNodes.
func (o *FindNode) SetLocal(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"find_nodes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"local_id"}),
		strmangle.WhereClause("\"", "\"", 2, findNodePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LocalID = related.ID
	if o.R == nil {
		o.R = &findNodeR{
			Local: related,
		}
	} else {
		o.R.Local = related
	}

	if related.R == nil {
		related.R = &peerR{
			LocalFindNodes: FindNodeSlice{o},
		}
	} else {
		related.R.LocalFindNodes = append(related.R.LocalFindNodes, o)
	}

	return nil
}

// SetProvide of the findNode to the related item.
// Sets o.R.Provide to related.
// Adds o to related.R.FindNodes.
func (o *FindNode) SetProvide(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Provide) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"find_nodes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"provide_id"}),
		strmangle.WhereClause("\"", "\"", 2, findNodePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProvideID = related.ID
	if o.R == nil {
		o.R = &findNodeR{
			Provide: related,
		}
	} else {
		o.R.Provide = related
	}

	if related.R == nil {
		related.R = &provideR{
			FindNodes: FindNodeSlice{o},
		}
	} else {
		related.R.FindNodes = append(related.R.FindNodes, o)
	}

	return nil
}

// SetRemote of the findNode to the related item.
// Sets o.R.Remote to related.
// Adds o to related.R.RemoteFindNodes.
func (o *FindNode) SetRemote(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"find_nodes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"remote_id"}),
		strmangle.WhereClause("\"", "\"", 2, findNodePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RemoteID = related.ID
	if o.R == nil {
		o.R = &findNodeR{
			Remote: related,
		}
	} else {
		o.R.Remote = related
	}

	if related.R == nil {
		related.R = &peerR{
			RemoteFindNodes: FindNodeSlice{o},
		}
	} else {
		related.R.RemoteFindNodes = append(related.R.RemoteFindNodes, o)
	}

	return nil
}

// AddCloserPeers adds the given related objects to the existing relationships
// of the find_node, optionally inserting them as new records.
// Appends related to o.R.CloserPeers.
// Sets related.R.FindNode appropriately.
func (o *FindNode) AddCloserPeers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CloserPeer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FindNodeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"closer_peers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"find_node_id"}),
				strmangle.WhereClause("\"", "\"", 2, closerPeerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ProvideID, rel.FindNodeID, rel.PeerID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FindNodeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &findNodeR{
			CloserPeers: related,
		}
	} else {
		o.R.CloserPeers = append(o.R.CloserPeers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &closerPeerR{
				FindNode: o,
			}
		} else {
			rel.R.FindNode = o
		}
	}
	return nil
}

// FindNodes retrieves all the records using an executor.
func FindNodes(mods ...qm.QueryMod) findNodeQuery {
	mods = append(mods, qm.From("\"find_nodes\""))
	return findNodeQuery{NewQuery(mods...)}
}

// FindFindNode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFindNode(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*FindNode, error) {
	findNodeObj := &FindNode{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"find_nodes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, findNodeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from find_nodes")
	}

	if err = findNodeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return findNodeObj, err
	}

	return findNodeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FindNode) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no find_nodes provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(findNodeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	findNodeInsertCacheMut.RLock()
	cache, cached := findNodeInsertCache[key]
	findNodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			findNodeAllColumns,
			findNodeColumnsWithDefault,
			findNodeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(findNodeType, findNodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(findNodeType, findNodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"find_nodes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"find_nodes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into find_nodes")
	}

	if !cached {
		findNodeInsertCacheMut.Lock()
		findNodeInsertCache[key] = cache
		findNodeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FindNode.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FindNode) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	findNodeUpdateCacheMut.RLock()
	cache, cached := findNodeUpdateCache[key]
	findNodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			findNodeAllColumns,
			findNodePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update find_nodes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"find_nodes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, findNodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(findNodeType, findNodeMapping, append(wl, findNodePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update find_nodes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for find_nodes")
	}

	if !cached {
		findNodeUpdateCacheMut.Lock()
		findNodeUpdateCache[key] = cache
		findNodeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q findNodeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for find_nodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for find_nodes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FindNodeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), findNodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"find_nodes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, findNodePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in findNode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all findNode")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FindNode) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no find_nodes provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(findNodeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	findNodeUpsertCacheMut.RLock()
	cache, cached := findNodeUpsertCache[key]
	findNodeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			findNodeAllColumns,
			findNodeColumnsWithDefault,
			findNodeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			findNodeAllColumns,
			findNodePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert find_nodes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(findNodePrimaryKeyColumns))
			copy(conflict, findNodePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"find_nodes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(findNodeType, findNodeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(findNodeType, findNodeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert find_nodes")
	}

	if !cached {
		findNodeUpsertCacheMut.Lock()
		findNodeUpsertCache[key] = cache
		findNodeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FindNode record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FindNode) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FindNode provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), findNodePrimaryKeyMapping)
	sql := "DELETE FROM \"find_nodes\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from find_nodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for find_nodes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q findNodeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no findNodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from find_nodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for find_nodes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FindNodeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(findNodeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), findNodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"find_nodes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, findNodePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from findNode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for find_nodes")
	}

	if len(findNodeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FindNode) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFindNode(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FindNodeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FindNodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), findNodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"find_nodes\".* FROM \"find_nodes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, findNodePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FindNodeSlice")
	}

	*o = slice

	return nil
}

// FindNodeExists checks if the FindNode row exists.
func FindNodeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"find_nodes\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if find_nodes exists")
	}

	return exists, nil
}
