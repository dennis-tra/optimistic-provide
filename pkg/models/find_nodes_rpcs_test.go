// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFindNodesRPCS(t *testing.T) {
	t.Parallel()

	query := FindNodesRPCS()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFindNodesRPCSDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FindNodesRPC{}
	if err = randomize.Struct(seed, o, findNodesRPCDBTypes, true, findNodesRPCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FindNodesRPC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FindNodesRPCS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFindNodesRPCSQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FindNodesRPC{}
	if err = randomize.Struct(seed, o, findNodesRPCDBTypes, true, findNodesRPCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FindNodesRPC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := FindNodesRPCS().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FindNodesRPCS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFindNodesRPCSSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FindNodesRPC{}
	if err = randomize.Struct(seed, o, findNodesRPCDBTypes, true, findNodesRPCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FindNodesRPC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FindNodesRPCSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FindNodesRPCS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFindNodesRPCSExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FindNodesRPC{}
	if err = randomize.Struct(seed, o, findNodesRPCDBTypes, true, findNodesRPCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FindNodesRPC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FindNodesRPCExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if FindNodesRPC exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FindNodesRPCExists to return true, but got false.")
	}
}

func testFindNodesRPCSFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FindNodesRPC{}
	if err = randomize.Struct(seed, o, findNodesRPCDBTypes, true, findNodesRPCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FindNodesRPC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	findNodesRPCFound, err := FindFindNodesRPC(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if findNodesRPCFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFindNodesRPCSBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FindNodesRPC{}
	if err = randomize.Struct(seed, o, findNodesRPCDBTypes, true, findNodesRPCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FindNodesRPC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = FindNodesRPCS().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFindNodesRPCSOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FindNodesRPC{}
	if err = randomize.Struct(seed, o, findNodesRPCDBTypes, true, findNodesRPCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FindNodesRPC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := FindNodesRPCS().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFindNodesRPCSAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	findNodesRPCOne := &FindNodesRPC{}
	findNodesRPCTwo := &FindNodesRPC{}
	if err = randomize.Struct(seed, findNodesRPCOne, findNodesRPCDBTypes, false, findNodesRPCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FindNodesRPC struct: %s", err)
	}
	if err = randomize.Struct(seed, findNodesRPCTwo, findNodesRPCDBTypes, false, findNodesRPCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FindNodesRPC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = findNodesRPCOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = findNodesRPCTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FindNodesRPCS().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFindNodesRPCSCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	findNodesRPCOne := &FindNodesRPC{}
	findNodesRPCTwo := &FindNodesRPC{}
	if err = randomize.Struct(seed, findNodesRPCOne, findNodesRPCDBTypes, false, findNodesRPCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FindNodesRPC struct: %s", err)
	}
	if err = randomize.Struct(seed, findNodesRPCTwo, findNodesRPCDBTypes, false, findNodesRPCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FindNodesRPC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = findNodesRPCOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = findNodesRPCTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FindNodesRPCS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func findNodesRPCBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *FindNodesRPC) error {
	*o = FindNodesRPC{}
	return nil
}

func findNodesRPCAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *FindNodesRPC) error {
	*o = FindNodesRPC{}
	return nil
}

func findNodesRPCAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *FindNodesRPC) error {
	*o = FindNodesRPC{}
	return nil
}

func findNodesRPCBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FindNodesRPC) error {
	*o = FindNodesRPC{}
	return nil
}

func findNodesRPCAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FindNodesRPC) error {
	*o = FindNodesRPC{}
	return nil
}

func findNodesRPCBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FindNodesRPC) error {
	*o = FindNodesRPC{}
	return nil
}

func findNodesRPCAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FindNodesRPC) error {
	*o = FindNodesRPC{}
	return nil
}

func findNodesRPCBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FindNodesRPC) error {
	*o = FindNodesRPC{}
	return nil
}

func findNodesRPCAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FindNodesRPC) error {
	*o = FindNodesRPC{}
	return nil
}

func testFindNodesRPCSHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &FindNodesRPC{}
	o := &FindNodesRPC{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, findNodesRPCDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FindNodesRPC object: %s", err)
	}

	AddFindNodesRPCHook(boil.BeforeInsertHook, findNodesRPCBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	findNodesRPCBeforeInsertHooks = []FindNodesRPCHook{}

	AddFindNodesRPCHook(boil.AfterInsertHook, findNodesRPCAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	findNodesRPCAfterInsertHooks = []FindNodesRPCHook{}

	AddFindNodesRPCHook(boil.AfterSelectHook, findNodesRPCAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	findNodesRPCAfterSelectHooks = []FindNodesRPCHook{}

	AddFindNodesRPCHook(boil.BeforeUpdateHook, findNodesRPCBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	findNodesRPCBeforeUpdateHooks = []FindNodesRPCHook{}

	AddFindNodesRPCHook(boil.AfterUpdateHook, findNodesRPCAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	findNodesRPCAfterUpdateHooks = []FindNodesRPCHook{}

	AddFindNodesRPCHook(boil.BeforeDeleteHook, findNodesRPCBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	findNodesRPCBeforeDeleteHooks = []FindNodesRPCHook{}

	AddFindNodesRPCHook(boil.AfterDeleteHook, findNodesRPCAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	findNodesRPCAfterDeleteHooks = []FindNodesRPCHook{}

	AddFindNodesRPCHook(boil.BeforeUpsertHook, findNodesRPCBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	findNodesRPCBeforeUpsertHooks = []FindNodesRPCHook{}

	AddFindNodesRPCHook(boil.AfterUpsertHook, findNodesRPCAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	findNodesRPCAfterUpsertHooks = []FindNodesRPCHook{}
}

func testFindNodesRPCSInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FindNodesRPC{}
	if err = randomize.Struct(seed, o, findNodesRPCDBTypes, true, findNodesRPCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FindNodesRPC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FindNodesRPCS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFindNodesRPCSInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FindNodesRPC{}
	if err = randomize.Struct(seed, o, findNodesRPCDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FindNodesRPC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(findNodesRPCColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := FindNodesRPCS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFindNodesRPCToManyFindNodeRPCCloserPeers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FindNodesRPC
	var b, c CloserPeer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, findNodesRPCDBTypes, true, findNodesRPCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FindNodesRPC struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, closerPeerDBTypes, false, closerPeerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, closerPeerDBTypes, false, closerPeerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.FindNodeRPCID = a.ID
	c.FindNodeRPCID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.FindNodeRPCCloserPeers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.FindNodeRPCID == b.FindNodeRPCID {
			bFound = true
		}
		if v.FindNodeRPCID == c.FindNodeRPCID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := FindNodesRPCSlice{&a}
	if err = a.L.LoadFindNodeRPCCloserPeers(ctx, tx, false, (*[]*FindNodesRPC)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FindNodeRPCCloserPeers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FindNodeRPCCloserPeers = nil
	if err = a.L.LoadFindNodeRPCCloserPeers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FindNodeRPCCloserPeers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testFindNodesRPCToManyProvides(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FindNodesRPC
	var b, c Provide

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, findNodesRPCDBTypes, true, findNodesRPCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FindNodesRPC struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, provideDBTypes, false, provideColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, provideDBTypes, false, provideColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"provides_x_find_nodes_rpcs\" (\"find_nodes_rpc_id\", \"provide_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"provides_x_find_nodes_rpcs\" (\"find_nodes_rpc_id\", \"provide_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.Provides().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := FindNodesRPCSlice{&a}
	if err = a.L.LoadProvides(ctx, tx, false, (*[]*FindNodesRPC)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Provides); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Provides = nil
	if err = a.L.LoadProvides(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Provides); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testFindNodesRPCToManyAddOpFindNodeRPCCloserPeers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FindNodesRPC
	var b, c, d, e CloserPeer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, findNodesRPCDBTypes, false, strmangle.SetComplement(findNodesRPCPrimaryKeyColumns, findNodesRPCColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CloserPeer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, closerPeerDBTypes, false, strmangle.SetComplement(closerPeerPrimaryKeyColumns, closerPeerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CloserPeer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFindNodeRPCCloserPeers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.FindNodeRPCID {
			t.Error("foreign key was wrong value", a.ID, first.FindNodeRPCID)
		}
		if a.ID != second.FindNodeRPCID {
			t.Error("foreign key was wrong value", a.ID, second.FindNodeRPCID)
		}

		if first.R.FindNodeRPC != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.FindNodeRPC != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FindNodeRPCCloserPeers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FindNodeRPCCloserPeers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FindNodeRPCCloserPeers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testFindNodesRPCToManyAddOpProvides(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FindNodesRPC
	var b, c, d, e Provide

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, findNodesRPCDBTypes, false, strmangle.SetComplement(findNodesRPCPrimaryKeyColumns, findNodesRPCColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Provide{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, provideDBTypes, false, strmangle.SetComplement(providePrimaryKeyColumns, provideColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Provide{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProvides(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.FindNodesRPCS[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.FindNodesRPCS[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Provides[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Provides[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Provides().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testFindNodesRPCToManySetOpProvides(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FindNodesRPC
	var b, c, d, e Provide

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, findNodesRPCDBTypes, false, strmangle.SetComplement(findNodesRPCPrimaryKeyColumns, findNodesRPCColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Provide{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, provideDBTypes, false, strmangle.SetComplement(providePrimaryKeyColumns, provideColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetProvides(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Provides().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetProvides(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Provides().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.FindNodesRPCS) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.FindNodesRPCS) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.FindNodesRPCS[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.FindNodesRPCS[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Provides[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Provides[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testFindNodesRPCToManyRemoveOpProvides(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FindNodesRPC
	var b, c, d, e Provide

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, findNodesRPCDBTypes, false, strmangle.SetComplement(findNodesRPCPrimaryKeyColumns, findNodesRPCColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Provide{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, provideDBTypes, false, strmangle.SetComplement(providePrimaryKeyColumns, provideColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddProvides(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Provides().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveProvides(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Provides().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.FindNodesRPCS) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.FindNodesRPCS) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.FindNodesRPCS[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.FindNodesRPCS[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Provides) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Provides[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Provides[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testFindNodesRPCToOnePeerUsingLocal(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local FindNodesRPC
	var foreign Peer

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, findNodesRPCDBTypes, false, findNodesRPCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FindNodesRPC struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, peerDBTypes, false, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LocalID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Local().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := FindNodesRPCSlice{&local}
	if err = local.L.LoadLocal(ctx, tx, false, (*[]*FindNodesRPC)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Local == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Local = nil
	if err = local.L.LoadLocal(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Local == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testFindNodesRPCToOnePeerUsingRemote(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local FindNodesRPC
	var foreign Peer

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, findNodesRPCDBTypes, false, findNodesRPCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FindNodesRPC struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, peerDBTypes, false, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RemoteID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Remote().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := FindNodesRPCSlice{&local}
	if err = local.L.LoadRemote(ctx, tx, false, (*[]*FindNodesRPC)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Remote == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Remote = nil
	if err = local.L.LoadRemote(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Remote == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testFindNodesRPCToOneSetOpPeerUsingLocal(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FindNodesRPC
	var b, c Peer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, findNodesRPCDBTypes, false, strmangle.SetComplement(findNodesRPCPrimaryKeyColumns, findNodesRPCColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, peerDBTypes, false, strmangle.SetComplement(peerPrimaryKeyColumns, peerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, peerDBTypes, false, strmangle.SetComplement(peerPrimaryKeyColumns, peerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Peer{&b, &c} {
		err = a.SetLocal(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Local != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LocalFindNodesRPCS[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LocalID != x.ID {
			t.Error("foreign key was wrong value", a.LocalID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LocalID))
		reflect.Indirect(reflect.ValueOf(&a.LocalID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.LocalID != x.ID {
			t.Error("foreign key was wrong value", a.LocalID, x.ID)
		}
	}
}
func testFindNodesRPCToOneSetOpPeerUsingRemote(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FindNodesRPC
	var b, c Peer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, findNodesRPCDBTypes, false, strmangle.SetComplement(findNodesRPCPrimaryKeyColumns, findNodesRPCColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, peerDBTypes, false, strmangle.SetComplement(peerPrimaryKeyColumns, peerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, peerDBTypes, false, strmangle.SetComplement(peerPrimaryKeyColumns, peerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Peer{&b, &c} {
		err = a.SetRemote(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Remote != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RemoteFindNodesRPCS[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RemoteID != x.ID {
			t.Error("foreign key was wrong value", a.RemoteID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RemoteID))
		reflect.Indirect(reflect.ValueOf(&a.RemoteID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RemoteID != x.ID {
			t.Error("foreign key was wrong value", a.RemoteID, x.ID)
		}
	}
}

func testFindNodesRPCSReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FindNodesRPC{}
	if err = randomize.Struct(seed, o, findNodesRPCDBTypes, true, findNodesRPCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FindNodesRPC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFindNodesRPCSReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FindNodesRPC{}
	if err = randomize.Struct(seed, o, findNodesRPCDBTypes, true, findNodesRPCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FindNodesRPC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FindNodesRPCSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFindNodesRPCSSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FindNodesRPC{}
	if err = randomize.Struct(seed, o, findNodesRPCDBTypes, true, findNodesRPCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FindNodesRPC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FindNodesRPCS().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	findNodesRPCDBTypes = map[string]string{`ID`: `integer`, `LocalID`: `integer`, `RemoteID`: `integer`, `StartedAt`: `timestamp with time zone`, `EndedAt`: `timestamp with time zone`, `CloserPeersCount`: `integer`, `Error`: `text`}
	_                   = bytes.MinRead
)

func testFindNodesRPCSUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(findNodesRPCPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(findNodesRPCAllColumns) == len(findNodesRPCPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FindNodesRPC{}
	if err = randomize.Struct(seed, o, findNodesRPCDBTypes, true, findNodesRPCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FindNodesRPC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FindNodesRPCS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, findNodesRPCDBTypes, true, findNodesRPCPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FindNodesRPC struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFindNodesRPCSSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(findNodesRPCAllColumns) == len(findNodesRPCPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FindNodesRPC{}
	if err = randomize.Struct(seed, o, findNodesRPCDBTypes, true, findNodesRPCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FindNodesRPC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FindNodesRPCS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, findNodesRPCDBTypes, true, findNodesRPCPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FindNodesRPC struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(findNodesRPCAllColumns, findNodesRPCPrimaryKeyColumns) {
		fields = findNodesRPCAllColumns
	} else {
		fields = strmangle.SetComplement(
			findNodesRPCAllColumns,
			findNodesRPCPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FindNodesRPCSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testFindNodesRPCSUpsert(t *testing.T) {
	t.Parallel()

	if len(findNodesRPCAllColumns) == len(findNodesRPCPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := FindNodesRPC{}
	if err = randomize.Struct(seed, &o, findNodesRPCDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FindNodesRPC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FindNodesRPC: %s", err)
	}

	count, err := FindNodesRPCS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, findNodesRPCDBTypes, false, findNodesRPCPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FindNodesRPC struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FindNodesRPC: %s", err)
	}

	count, err = FindNodesRPCS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
