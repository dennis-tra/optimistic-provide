// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RoutingTableSnapshot is an object representing the database table.
type RoutingTableSnapshot struct {
	ID         int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	PeerID     int       `boil:"peer_id" json:"peer_id" toml:"peer_id" yaml:"peer_id"`
	BucketSize int       `boil:"bucket_size" json:"bucket_size" toml:"bucket_size" yaml:"bucket_size"`
	EntryCount int       `boil:"entry_count" json:"entry_count" toml:"entry_count" yaml:"entry_count"`
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *routingTableSnapshotR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L routingTableSnapshotL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RoutingTableSnapshotColumns = struct {
	ID         string
	PeerID     string
	BucketSize string
	EntryCount string
	CreatedAt  string
}{
	ID:         "id",
	PeerID:     "peer_id",
	BucketSize: "bucket_size",
	EntryCount: "entry_count",
	CreatedAt:  "created_at",
}

var RoutingTableSnapshotTableColumns = struct {
	ID         string
	PeerID     string
	BucketSize string
	EntryCount string
	CreatedAt  string
}{
	ID:         "routing_table_snapshots.id",
	PeerID:     "routing_table_snapshots.peer_id",
	BucketSize: "routing_table_snapshots.bucket_size",
	EntryCount: "routing_table_snapshots.entry_count",
	CreatedAt:  "routing_table_snapshots.created_at",
}

// Generated where

var RoutingTableSnapshotWhere = struct {
	ID         whereHelperint
	PeerID     whereHelperint
	BucketSize whereHelperint
	EntryCount whereHelperint
	CreatedAt  whereHelpertime_Time
}{
	ID:         whereHelperint{field: "\"routing_table_snapshots\".\"id\""},
	PeerID:     whereHelperint{field: "\"routing_table_snapshots\".\"peer_id\""},
	BucketSize: whereHelperint{field: "\"routing_table_snapshots\".\"bucket_size\""},
	EntryCount: whereHelperint{field: "\"routing_table_snapshots\".\"entry_count\""},
	CreatedAt:  whereHelpertime_Time{field: "\"routing_table_snapshots\".\"created_at\""},
}

// RoutingTableSnapshotRels is where relationship names are stored.
var RoutingTableSnapshotRels = struct {
	Peer                          string
	FinalRoutingTableProvides     string
	InitialRoutingTableProvides   string
	FinalRoutingTableRetrievals   string
	InitialRoutingTableRetrievals string
	RoutingTableEntries           string
}{
	Peer:                          "Peer",
	FinalRoutingTableProvides:     "FinalRoutingTableProvides",
	InitialRoutingTableProvides:   "InitialRoutingTableProvides",
	FinalRoutingTableRetrievals:   "FinalRoutingTableRetrievals",
	InitialRoutingTableRetrievals: "InitialRoutingTableRetrievals",
	RoutingTableEntries:           "RoutingTableEntries",
}

// routingTableSnapshotR is where relationships are stored.
type routingTableSnapshotR struct {
	Peer                          *Peer                  `boil:"Peer" json:"Peer" toml:"Peer" yaml:"Peer"`
	FinalRoutingTableProvides     ProvideSlice           `boil:"FinalRoutingTableProvides" json:"FinalRoutingTableProvides" toml:"FinalRoutingTableProvides" yaml:"FinalRoutingTableProvides"`
	InitialRoutingTableProvides   ProvideSlice           `boil:"InitialRoutingTableProvides" json:"InitialRoutingTableProvides" toml:"InitialRoutingTableProvides" yaml:"InitialRoutingTableProvides"`
	FinalRoutingTableRetrievals   RetrievalSlice         `boil:"FinalRoutingTableRetrievals" json:"FinalRoutingTableRetrievals" toml:"FinalRoutingTableRetrievals" yaml:"FinalRoutingTableRetrievals"`
	InitialRoutingTableRetrievals RetrievalSlice         `boil:"InitialRoutingTableRetrievals" json:"InitialRoutingTableRetrievals" toml:"InitialRoutingTableRetrievals" yaml:"InitialRoutingTableRetrievals"`
	RoutingTableEntries           RoutingTableEntrySlice `boil:"RoutingTableEntries" json:"RoutingTableEntries" toml:"RoutingTableEntries" yaml:"RoutingTableEntries"`
}

// NewStruct creates a new relationship struct
func (*routingTableSnapshotR) NewStruct() *routingTableSnapshotR {
	return &routingTableSnapshotR{}
}

// routingTableSnapshotL is where Load methods for each relationship are stored.
type routingTableSnapshotL struct{}

var (
	routingTableSnapshotAllColumns            = []string{"id", "peer_id", "bucket_size", "entry_count", "created_at"}
	routingTableSnapshotColumnsWithoutDefault = []string{"peer_id", "bucket_size", "entry_count", "created_at"}
	routingTableSnapshotColumnsWithDefault    = []string{"id"}
	routingTableSnapshotPrimaryKeyColumns     = []string{"id"}
)

type (
	// RoutingTableSnapshotSlice is an alias for a slice of pointers to RoutingTableSnapshot.
	// This should almost always be used instead of []RoutingTableSnapshot.
	RoutingTableSnapshotSlice []*RoutingTableSnapshot
	// RoutingTableSnapshotHook is the signature for custom RoutingTableSnapshot hook methods
	RoutingTableSnapshotHook func(context.Context, boil.ContextExecutor, *RoutingTableSnapshot) error

	routingTableSnapshotQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	routingTableSnapshotType                 = reflect.TypeOf(&RoutingTableSnapshot{})
	routingTableSnapshotMapping              = queries.MakeStructMapping(routingTableSnapshotType)
	routingTableSnapshotPrimaryKeyMapping, _ = queries.BindMapping(routingTableSnapshotType, routingTableSnapshotMapping, routingTableSnapshotPrimaryKeyColumns)
	routingTableSnapshotInsertCacheMut       sync.RWMutex
	routingTableSnapshotInsertCache          = make(map[string]insertCache)
	routingTableSnapshotUpdateCacheMut       sync.RWMutex
	routingTableSnapshotUpdateCache          = make(map[string]updateCache)
	routingTableSnapshotUpsertCacheMut       sync.RWMutex
	routingTableSnapshotUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var routingTableSnapshotBeforeInsertHooks []RoutingTableSnapshotHook
var routingTableSnapshotBeforeUpdateHooks []RoutingTableSnapshotHook
var routingTableSnapshotBeforeDeleteHooks []RoutingTableSnapshotHook
var routingTableSnapshotBeforeUpsertHooks []RoutingTableSnapshotHook

var routingTableSnapshotAfterInsertHooks []RoutingTableSnapshotHook
var routingTableSnapshotAfterSelectHooks []RoutingTableSnapshotHook
var routingTableSnapshotAfterUpdateHooks []RoutingTableSnapshotHook
var routingTableSnapshotAfterDeleteHooks []RoutingTableSnapshotHook
var routingTableSnapshotAfterUpsertHooks []RoutingTableSnapshotHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RoutingTableSnapshot) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routingTableSnapshotBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RoutingTableSnapshot) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routingTableSnapshotBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RoutingTableSnapshot) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routingTableSnapshotBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RoutingTableSnapshot) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routingTableSnapshotBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RoutingTableSnapshot) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routingTableSnapshotAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RoutingTableSnapshot) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routingTableSnapshotAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RoutingTableSnapshot) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routingTableSnapshotAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RoutingTableSnapshot) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routingTableSnapshotAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RoutingTableSnapshot) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routingTableSnapshotAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRoutingTableSnapshotHook registers your hook function for all future operations.
func AddRoutingTableSnapshotHook(hookPoint boil.HookPoint, routingTableSnapshotHook RoutingTableSnapshotHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		routingTableSnapshotBeforeInsertHooks = append(routingTableSnapshotBeforeInsertHooks, routingTableSnapshotHook)
	case boil.BeforeUpdateHook:
		routingTableSnapshotBeforeUpdateHooks = append(routingTableSnapshotBeforeUpdateHooks, routingTableSnapshotHook)
	case boil.BeforeDeleteHook:
		routingTableSnapshotBeforeDeleteHooks = append(routingTableSnapshotBeforeDeleteHooks, routingTableSnapshotHook)
	case boil.BeforeUpsertHook:
		routingTableSnapshotBeforeUpsertHooks = append(routingTableSnapshotBeforeUpsertHooks, routingTableSnapshotHook)
	case boil.AfterInsertHook:
		routingTableSnapshotAfterInsertHooks = append(routingTableSnapshotAfterInsertHooks, routingTableSnapshotHook)
	case boil.AfterSelectHook:
		routingTableSnapshotAfterSelectHooks = append(routingTableSnapshotAfterSelectHooks, routingTableSnapshotHook)
	case boil.AfterUpdateHook:
		routingTableSnapshotAfterUpdateHooks = append(routingTableSnapshotAfterUpdateHooks, routingTableSnapshotHook)
	case boil.AfterDeleteHook:
		routingTableSnapshotAfterDeleteHooks = append(routingTableSnapshotAfterDeleteHooks, routingTableSnapshotHook)
	case boil.AfterUpsertHook:
		routingTableSnapshotAfterUpsertHooks = append(routingTableSnapshotAfterUpsertHooks, routingTableSnapshotHook)
	}
}

// One returns a single routingTableSnapshot record from the query.
func (q routingTableSnapshotQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RoutingTableSnapshot, error) {
	o := &RoutingTableSnapshot{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for routing_table_snapshots")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RoutingTableSnapshot records from the query.
func (q routingTableSnapshotQuery) All(ctx context.Context, exec boil.ContextExecutor) (RoutingTableSnapshotSlice, error) {
	var o []*RoutingTableSnapshot

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RoutingTableSnapshot slice")
	}

	if len(routingTableSnapshotAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RoutingTableSnapshot records in the query.
func (q routingTableSnapshotQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count routing_table_snapshots rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q routingTableSnapshotQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if routing_table_snapshots exists")
	}

	return count > 0, nil
}

// Peer pointed to by the foreign key.
func (o *RoutingTableSnapshot) Peer(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PeerID),
	}

	queryMods = append(queryMods, mods...)

	query := Peers(queryMods...)
	queries.SetFrom(query.Query, "\"peers\"")

	return query
}

// FinalRoutingTableProvides retrieves all the provide's Provides with an executor via final_routing_table_id column.
func (o *RoutingTableSnapshot) FinalRoutingTableProvides(mods ...qm.QueryMod) provideQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"provides\".\"final_routing_table_id\"=?", o.ID),
	)

	query := Provides(queryMods...)
	queries.SetFrom(query.Query, "\"provides\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"provides\".*"})
	}

	return query
}

// InitialRoutingTableProvides retrieves all the provide's Provides with an executor via initial_routing_table_id column.
func (o *RoutingTableSnapshot) InitialRoutingTableProvides(mods ...qm.QueryMod) provideQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"provides\".\"initial_routing_table_id\"=?", o.ID),
	)

	query := Provides(queryMods...)
	queries.SetFrom(query.Query, "\"provides\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"provides\".*"})
	}

	return query
}

// FinalRoutingTableRetrievals retrieves all the retrieval's Retrievals with an executor via final_routing_table_id column.
func (o *RoutingTableSnapshot) FinalRoutingTableRetrievals(mods ...qm.QueryMod) retrievalQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"retrievals\".\"final_routing_table_id\"=?", o.ID),
	)

	query := Retrievals(queryMods...)
	queries.SetFrom(query.Query, "\"retrievals\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"retrievals\".*"})
	}

	return query
}

// InitialRoutingTableRetrievals retrieves all the retrieval's Retrievals with an executor via initial_routing_table_id column.
func (o *RoutingTableSnapshot) InitialRoutingTableRetrievals(mods ...qm.QueryMod) retrievalQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"retrievals\".\"initial_routing_table_id\"=?", o.ID),
	)

	query := Retrievals(queryMods...)
	queries.SetFrom(query.Query, "\"retrievals\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"retrievals\".*"})
	}

	return query
}

// RoutingTableEntries retrieves all the routing_table_entry's RoutingTableEntries with an executor.
func (o *RoutingTableSnapshot) RoutingTableEntries(mods ...qm.QueryMod) routingTableEntryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"routing_table_entries\".\"routing_table_snapshot_id\"=?", o.ID),
	)

	query := RoutingTableEntries(queryMods...)
	queries.SetFrom(query.Query, "\"routing_table_entries\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"routing_table_entries\".*"})
	}

	return query
}

// LoadPeer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (routingTableSnapshotL) LoadPeer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoutingTableSnapshot interface{}, mods queries.Applicator) error {
	var slice []*RoutingTableSnapshot
	var object *RoutingTableSnapshot

	if singular {
		object = maybeRoutingTableSnapshot.(*RoutingTableSnapshot)
	} else {
		slice = *maybeRoutingTableSnapshot.(*[]*RoutingTableSnapshot)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &routingTableSnapshotR{}
		}
		args = append(args, object.PeerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &routingTableSnapshotR{}
			}

			for _, a := range args {
				if a == obj.PeerID {
					continue Outer
				}
			}

			args = append(args, obj.PeerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(routingTableSnapshotAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Peer = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.RoutingTableSnapshots = append(foreign.R.RoutingTableSnapshots, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PeerID == foreign.ID {
				local.R.Peer = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.RoutingTableSnapshots = append(foreign.R.RoutingTableSnapshots, local)
				break
			}
		}
	}

	return nil
}

// LoadFinalRoutingTableProvides allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (routingTableSnapshotL) LoadFinalRoutingTableProvides(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoutingTableSnapshot interface{}, mods queries.Applicator) error {
	var slice []*RoutingTableSnapshot
	var object *RoutingTableSnapshot

	if singular {
		object = maybeRoutingTableSnapshot.(*RoutingTableSnapshot)
	} else {
		slice = *maybeRoutingTableSnapshot.(*[]*RoutingTableSnapshot)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &routingTableSnapshotR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &routingTableSnapshotR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`provides`),
		qm.WhereIn(`provides.final_routing_table_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load provides")
	}

	var resultSlice []*Provide
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice provides")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on provides")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for provides")
	}

	if len(provideAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FinalRoutingTableProvides = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &provideR{}
			}
			foreign.R.FinalRoutingTable = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.FinalRoutingTableID) {
				local.R.FinalRoutingTableProvides = append(local.R.FinalRoutingTableProvides, foreign)
				if foreign.R == nil {
					foreign.R = &provideR{}
				}
				foreign.R.FinalRoutingTable = local
				break
			}
		}
	}

	return nil
}

// LoadInitialRoutingTableProvides allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (routingTableSnapshotL) LoadInitialRoutingTableProvides(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoutingTableSnapshot interface{}, mods queries.Applicator) error {
	var slice []*RoutingTableSnapshot
	var object *RoutingTableSnapshot

	if singular {
		object = maybeRoutingTableSnapshot.(*RoutingTableSnapshot)
	} else {
		slice = *maybeRoutingTableSnapshot.(*[]*RoutingTableSnapshot)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &routingTableSnapshotR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &routingTableSnapshotR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`provides`),
		qm.WhereIn(`provides.initial_routing_table_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load provides")
	}

	var resultSlice []*Provide
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice provides")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on provides")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for provides")
	}

	if len(provideAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.InitialRoutingTableProvides = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &provideR{}
			}
			foreign.R.InitialRoutingTable = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.InitialRoutingTableID {
				local.R.InitialRoutingTableProvides = append(local.R.InitialRoutingTableProvides, foreign)
				if foreign.R == nil {
					foreign.R = &provideR{}
				}
				foreign.R.InitialRoutingTable = local
				break
			}
		}
	}

	return nil
}

// LoadFinalRoutingTableRetrievals allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (routingTableSnapshotL) LoadFinalRoutingTableRetrievals(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoutingTableSnapshot interface{}, mods queries.Applicator) error {
	var slice []*RoutingTableSnapshot
	var object *RoutingTableSnapshot

	if singular {
		object = maybeRoutingTableSnapshot.(*RoutingTableSnapshot)
	} else {
		slice = *maybeRoutingTableSnapshot.(*[]*RoutingTableSnapshot)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &routingTableSnapshotR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &routingTableSnapshotR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`retrievals`),
		qm.WhereIn(`retrievals.final_routing_table_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load retrievals")
	}

	var resultSlice []*Retrieval
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice retrievals")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on retrievals")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for retrievals")
	}

	if len(retrievalAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FinalRoutingTableRetrievals = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &retrievalR{}
			}
			foreign.R.FinalRoutingTable = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.FinalRoutingTableID) {
				local.R.FinalRoutingTableRetrievals = append(local.R.FinalRoutingTableRetrievals, foreign)
				if foreign.R == nil {
					foreign.R = &retrievalR{}
				}
				foreign.R.FinalRoutingTable = local
				break
			}
		}
	}

	return nil
}

// LoadInitialRoutingTableRetrievals allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (routingTableSnapshotL) LoadInitialRoutingTableRetrievals(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoutingTableSnapshot interface{}, mods queries.Applicator) error {
	var slice []*RoutingTableSnapshot
	var object *RoutingTableSnapshot

	if singular {
		object = maybeRoutingTableSnapshot.(*RoutingTableSnapshot)
	} else {
		slice = *maybeRoutingTableSnapshot.(*[]*RoutingTableSnapshot)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &routingTableSnapshotR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &routingTableSnapshotR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`retrievals`),
		qm.WhereIn(`retrievals.initial_routing_table_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load retrievals")
	}

	var resultSlice []*Retrieval
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice retrievals")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on retrievals")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for retrievals")
	}

	if len(retrievalAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.InitialRoutingTableRetrievals = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &retrievalR{}
			}
			foreign.R.InitialRoutingTable = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.InitialRoutingTableID {
				local.R.InitialRoutingTableRetrievals = append(local.R.InitialRoutingTableRetrievals, foreign)
				if foreign.R == nil {
					foreign.R = &retrievalR{}
				}
				foreign.R.InitialRoutingTable = local
				break
			}
		}
	}

	return nil
}

// LoadRoutingTableEntries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (routingTableSnapshotL) LoadRoutingTableEntries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoutingTableSnapshot interface{}, mods queries.Applicator) error {
	var slice []*RoutingTableSnapshot
	var object *RoutingTableSnapshot

	if singular {
		object = maybeRoutingTableSnapshot.(*RoutingTableSnapshot)
	} else {
		slice = *maybeRoutingTableSnapshot.(*[]*RoutingTableSnapshot)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &routingTableSnapshotR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &routingTableSnapshotR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`routing_table_entries`),
		qm.WhereIn(`routing_table_entries.routing_table_snapshot_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load routing_table_entries")
	}

	var resultSlice []*RoutingTableEntry
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice routing_table_entries")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on routing_table_entries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for routing_table_entries")
	}

	if len(routingTableEntryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RoutingTableEntries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &routingTableEntryR{}
			}
			foreign.R.RoutingTableSnapshot = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RoutingTableSnapshotID {
				local.R.RoutingTableEntries = append(local.R.RoutingTableEntries, foreign)
				if foreign.R == nil {
					foreign.R = &routingTableEntryR{}
				}
				foreign.R.RoutingTableSnapshot = local
				break
			}
		}
	}

	return nil
}

// SetPeer of the routingTableSnapshot to the related item.
// Sets o.R.Peer to related.
// Adds o to related.R.RoutingTableSnapshots.
func (o *RoutingTableSnapshot) SetPeer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"routing_table_snapshots\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"peer_id"}),
		strmangle.WhereClause("\"", "\"", 2, routingTableSnapshotPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PeerID = related.ID
	if o.R == nil {
		o.R = &routingTableSnapshotR{
			Peer: related,
		}
	} else {
		o.R.Peer = related
	}

	if related.R == nil {
		related.R = &peerR{
			RoutingTableSnapshots: RoutingTableSnapshotSlice{o},
		}
	} else {
		related.R.RoutingTableSnapshots = append(related.R.RoutingTableSnapshots, o)
	}

	return nil
}

// AddFinalRoutingTableProvides adds the given related objects to the existing relationships
// of the routing_table_snapshot, optionally inserting them as new records.
// Appends related to o.R.FinalRoutingTableProvides.
// Sets related.R.FinalRoutingTable appropriately.
func (o *RoutingTableSnapshot) AddFinalRoutingTableProvides(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Provide) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.FinalRoutingTableID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"provides\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"final_routing_table_id"}),
				strmangle.WhereClause("\"", "\"", 2, providePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.FinalRoutingTableID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &routingTableSnapshotR{
			FinalRoutingTableProvides: related,
		}
	} else {
		o.R.FinalRoutingTableProvides = append(o.R.FinalRoutingTableProvides, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &provideR{
				FinalRoutingTable: o,
			}
		} else {
			rel.R.FinalRoutingTable = o
		}
	}
	return nil
}

// SetFinalRoutingTableProvides removes all previously related items of the
// routing_table_snapshot replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.FinalRoutingTable's FinalRoutingTableProvides accordingly.
// Replaces o.R.FinalRoutingTableProvides with related.
// Sets related.R.FinalRoutingTable's FinalRoutingTableProvides accordingly.
func (o *RoutingTableSnapshot) SetFinalRoutingTableProvides(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Provide) error {
	query := "update \"provides\" set \"final_routing_table_id\" = null where \"final_routing_table_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.FinalRoutingTableProvides {
			queries.SetScanner(&rel.FinalRoutingTableID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.FinalRoutingTable = nil
		}

		o.R.FinalRoutingTableProvides = nil
	}
	return o.AddFinalRoutingTableProvides(ctx, exec, insert, related...)
}

// RemoveFinalRoutingTableProvides relationships from objects passed in.
// Removes related items from R.FinalRoutingTableProvides (uses pointer comparison, removal does not keep order)
// Sets related.R.FinalRoutingTable.
func (o *RoutingTableSnapshot) RemoveFinalRoutingTableProvides(ctx context.Context, exec boil.ContextExecutor, related ...*Provide) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.FinalRoutingTableID, nil)
		if rel.R != nil {
			rel.R.FinalRoutingTable = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("final_routing_table_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.FinalRoutingTableProvides {
			if rel != ri {
				continue
			}

			ln := len(o.R.FinalRoutingTableProvides)
			if ln > 1 && i < ln-1 {
				o.R.FinalRoutingTableProvides[i] = o.R.FinalRoutingTableProvides[ln-1]
			}
			o.R.FinalRoutingTableProvides = o.R.FinalRoutingTableProvides[:ln-1]
			break
		}
	}

	return nil
}

// AddInitialRoutingTableProvides adds the given related objects to the existing relationships
// of the routing_table_snapshot, optionally inserting them as new records.
// Appends related to o.R.InitialRoutingTableProvides.
// Sets related.R.InitialRoutingTable appropriately.
func (o *RoutingTableSnapshot) AddInitialRoutingTableProvides(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Provide) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InitialRoutingTableID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"provides\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"initial_routing_table_id"}),
				strmangle.WhereClause("\"", "\"", 2, providePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InitialRoutingTableID = o.ID
		}
	}

	if o.R == nil {
		o.R = &routingTableSnapshotR{
			InitialRoutingTableProvides: related,
		}
	} else {
		o.R.InitialRoutingTableProvides = append(o.R.InitialRoutingTableProvides, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &provideR{
				InitialRoutingTable: o,
			}
		} else {
			rel.R.InitialRoutingTable = o
		}
	}
	return nil
}

// AddFinalRoutingTableRetrievals adds the given related objects to the existing relationships
// of the routing_table_snapshot, optionally inserting them as new records.
// Appends related to o.R.FinalRoutingTableRetrievals.
// Sets related.R.FinalRoutingTable appropriately.
func (o *RoutingTableSnapshot) AddFinalRoutingTableRetrievals(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Retrieval) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.FinalRoutingTableID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"retrievals\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"final_routing_table_id"}),
				strmangle.WhereClause("\"", "\"", 2, retrievalPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.FinalRoutingTableID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &routingTableSnapshotR{
			FinalRoutingTableRetrievals: related,
		}
	} else {
		o.R.FinalRoutingTableRetrievals = append(o.R.FinalRoutingTableRetrievals, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &retrievalR{
				FinalRoutingTable: o,
			}
		} else {
			rel.R.FinalRoutingTable = o
		}
	}
	return nil
}

// SetFinalRoutingTableRetrievals removes all previously related items of the
// routing_table_snapshot replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.FinalRoutingTable's FinalRoutingTableRetrievals accordingly.
// Replaces o.R.FinalRoutingTableRetrievals with related.
// Sets related.R.FinalRoutingTable's FinalRoutingTableRetrievals accordingly.
func (o *RoutingTableSnapshot) SetFinalRoutingTableRetrievals(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Retrieval) error {
	query := "update \"retrievals\" set \"final_routing_table_id\" = null where \"final_routing_table_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.FinalRoutingTableRetrievals {
			queries.SetScanner(&rel.FinalRoutingTableID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.FinalRoutingTable = nil
		}

		o.R.FinalRoutingTableRetrievals = nil
	}
	return o.AddFinalRoutingTableRetrievals(ctx, exec, insert, related...)
}

// RemoveFinalRoutingTableRetrievals relationships from objects passed in.
// Removes related items from R.FinalRoutingTableRetrievals (uses pointer comparison, removal does not keep order)
// Sets related.R.FinalRoutingTable.
func (o *RoutingTableSnapshot) RemoveFinalRoutingTableRetrievals(ctx context.Context, exec boil.ContextExecutor, related ...*Retrieval) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.FinalRoutingTableID, nil)
		if rel.R != nil {
			rel.R.FinalRoutingTable = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("final_routing_table_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.FinalRoutingTableRetrievals {
			if rel != ri {
				continue
			}

			ln := len(o.R.FinalRoutingTableRetrievals)
			if ln > 1 && i < ln-1 {
				o.R.FinalRoutingTableRetrievals[i] = o.R.FinalRoutingTableRetrievals[ln-1]
			}
			o.R.FinalRoutingTableRetrievals = o.R.FinalRoutingTableRetrievals[:ln-1]
			break
		}
	}

	return nil
}

// AddInitialRoutingTableRetrievals adds the given related objects to the existing relationships
// of the routing_table_snapshot, optionally inserting them as new records.
// Appends related to o.R.InitialRoutingTableRetrievals.
// Sets related.R.InitialRoutingTable appropriately.
func (o *RoutingTableSnapshot) AddInitialRoutingTableRetrievals(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Retrieval) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InitialRoutingTableID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"retrievals\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"initial_routing_table_id"}),
				strmangle.WhereClause("\"", "\"", 2, retrievalPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InitialRoutingTableID = o.ID
		}
	}

	if o.R == nil {
		o.R = &routingTableSnapshotR{
			InitialRoutingTableRetrievals: related,
		}
	} else {
		o.R.InitialRoutingTableRetrievals = append(o.R.InitialRoutingTableRetrievals, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &retrievalR{
				InitialRoutingTable: o,
			}
		} else {
			rel.R.InitialRoutingTable = o
		}
	}
	return nil
}

// AddRoutingTableEntries adds the given related objects to the existing relationships
// of the routing_table_snapshot, optionally inserting them as new records.
// Appends related to o.R.RoutingTableEntries.
// Sets related.R.RoutingTableSnapshot appropriately.
func (o *RoutingTableSnapshot) AddRoutingTableEntries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RoutingTableEntry) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RoutingTableSnapshotID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"routing_table_entries\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"routing_table_snapshot_id"}),
				strmangle.WhereClause("\"", "\"", 2, routingTableEntryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.RoutingTableSnapshotID, rel.PeerID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RoutingTableSnapshotID = o.ID
		}
	}

	if o.R == nil {
		o.R = &routingTableSnapshotR{
			RoutingTableEntries: related,
		}
	} else {
		o.R.RoutingTableEntries = append(o.R.RoutingTableEntries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &routingTableEntryR{
				RoutingTableSnapshot: o,
			}
		} else {
			rel.R.RoutingTableSnapshot = o
		}
	}
	return nil
}

// RoutingTableSnapshots retrieves all the records using an executor.
func RoutingTableSnapshots(mods ...qm.QueryMod) routingTableSnapshotQuery {
	mods = append(mods, qm.From("\"routing_table_snapshots\""))
	return routingTableSnapshotQuery{NewQuery(mods...)}
}

// FindRoutingTableSnapshot retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRoutingTableSnapshot(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RoutingTableSnapshot, error) {
	routingTableSnapshotObj := &RoutingTableSnapshot{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"routing_table_snapshots\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, routingTableSnapshotObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from routing_table_snapshots")
	}

	if err = routingTableSnapshotObj.doAfterSelectHooks(ctx, exec); err != nil {
		return routingTableSnapshotObj, err
	}

	return routingTableSnapshotObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RoutingTableSnapshot) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no routing_table_snapshots provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(routingTableSnapshotColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	routingTableSnapshotInsertCacheMut.RLock()
	cache, cached := routingTableSnapshotInsertCache[key]
	routingTableSnapshotInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			routingTableSnapshotAllColumns,
			routingTableSnapshotColumnsWithDefault,
			routingTableSnapshotColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(routingTableSnapshotType, routingTableSnapshotMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(routingTableSnapshotType, routingTableSnapshotMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"routing_table_snapshots\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"routing_table_snapshots\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into routing_table_snapshots")
	}

	if !cached {
		routingTableSnapshotInsertCacheMut.Lock()
		routingTableSnapshotInsertCache[key] = cache
		routingTableSnapshotInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RoutingTableSnapshot.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RoutingTableSnapshot) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	routingTableSnapshotUpdateCacheMut.RLock()
	cache, cached := routingTableSnapshotUpdateCache[key]
	routingTableSnapshotUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			routingTableSnapshotAllColumns,
			routingTableSnapshotPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update routing_table_snapshots, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"routing_table_snapshots\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, routingTableSnapshotPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(routingTableSnapshotType, routingTableSnapshotMapping, append(wl, routingTableSnapshotPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update routing_table_snapshots row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for routing_table_snapshots")
	}

	if !cached {
		routingTableSnapshotUpdateCacheMut.Lock()
		routingTableSnapshotUpdateCache[key] = cache
		routingTableSnapshotUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q routingTableSnapshotQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for routing_table_snapshots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for routing_table_snapshots")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RoutingTableSnapshotSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), routingTableSnapshotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"routing_table_snapshots\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, routingTableSnapshotPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in routingTableSnapshot slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all routingTableSnapshot")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RoutingTableSnapshot) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no routing_table_snapshots provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(routingTableSnapshotColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	routingTableSnapshotUpsertCacheMut.RLock()
	cache, cached := routingTableSnapshotUpsertCache[key]
	routingTableSnapshotUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			routingTableSnapshotAllColumns,
			routingTableSnapshotColumnsWithDefault,
			routingTableSnapshotColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			routingTableSnapshotAllColumns,
			routingTableSnapshotPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert routing_table_snapshots, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(routingTableSnapshotPrimaryKeyColumns))
			copy(conflict, routingTableSnapshotPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"routing_table_snapshots\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(routingTableSnapshotType, routingTableSnapshotMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(routingTableSnapshotType, routingTableSnapshotMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert routing_table_snapshots")
	}

	if !cached {
		routingTableSnapshotUpsertCacheMut.Lock()
		routingTableSnapshotUpsertCache[key] = cache
		routingTableSnapshotUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RoutingTableSnapshot record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RoutingTableSnapshot) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RoutingTableSnapshot provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), routingTableSnapshotPrimaryKeyMapping)
	sql := "DELETE FROM \"routing_table_snapshots\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from routing_table_snapshots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for routing_table_snapshots")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q routingTableSnapshotQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no routingTableSnapshotQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from routing_table_snapshots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for routing_table_snapshots")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RoutingTableSnapshotSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(routingTableSnapshotBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), routingTableSnapshotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"routing_table_snapshots\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, routingTableSnapshotPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from routingTableSnapshot slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for routing_table_snapshots")
	}

	if len(routingTableSnapshotAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RoutingTableSnapshot) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRoutingTableSnapshot(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoutingTableSnapshotSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RoutingTableSnapshotSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), routingTableSnapshotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"routing_table_snapshots\".* FROM \"routing_table_snapshots\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, routingTableSnapshotPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RoutingTableSnapshotSlice")
	}

	*o = slice

	return nil
}

// RoutingTableSnapshotExists checks if the RoutingTableSnapshot row exists.
func RoutingTableSnapshotExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"routing_table_snapshots\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if routing_table_snapshots exists")
	}

	return exists, nil
}
