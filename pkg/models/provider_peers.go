// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// ProviderPeer is an object representing the database table.
type ProviderPeer struct {
	ID              int              `boil:"id" json:"id" toml:"id" yaml:"id"`
	GetProvidersID  int              `boil:"get_providers_id" json:"get_providers_id" toml:"get_providers_id" yaml:"get_providers_id"`
	ProviderID      int              `boil:"provider_id" json:"provider_id" toml:"provider_id" yaml:"provider_id"`
	MultiAddressIds types.Int64Array `boil:"multi_address_ids" json:"multi_address_ids" toml:"multi_address_ids" yaml:"multi_address_ids"`

	R *providerPeerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L providerPeerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProviderPeerColumns = struct {
	ID              string
	GetProvidersID  string
	ProviderID      string
	MultiAddressIds string
}{
	ID:              "id",
	GetProvidersID:  "get_providers_id",
	ProviderID:      "provider_id",
	MultiAddressIds: "multi_address_ids",
}

var ProviderPeerTableColumns = struct {
	ID              string
	GetProvidersID  string
	ProviderID      string
	MultiAddressIds string
}{
	ID:              "provider_peers.id",
	GetProvidersID:  "provider_peers.get_providers_id",
	ProviderID:      "provider_peers.provider_id",
	MultiAddressIds: "provider_peers.multi_address_ids",
}

// Generated where

var ProviderPeerWhere = struct {
	ID              whereHelperint
	GetProvidersID  whereHelperint
	ProviderID      whereHelperint
	MultiAddressIds whereHelpertypes_Int64Array
}{
	ID:              whereHelperint{field: "\"provider_peers\".\"id\""},
	GetProvidersID:  whereHelperint{field: "\"provider_peers\".\"get_providers_id\""},
	ProviderID:      whereHelperint{field: "\"provider_peers\".\"provider_id\""},
	MultiAddressIds: whereHelpertypes_Int64Array{field: "\"provider_peers\".\"multi_address_ids\""},
}

// ProviderPeerRels is where relationship names are stored.
var ProviderPeerRels = struct {
	GetProvider string
	Provider    string
}{
	GetProvider: "GetProvider",
	Provider:    "Provider",
}

// providerPeerR is where relationships are stored.
type providerPeerR struct {
	GetProvider *GetProvider `boil:"GetProvider" json:"GetProvider" toml:"GetProvider" yaml:"GetProvider"`
	Provider    *Peer        `boil:"Provider" json:"Provider" toml:"Provider" yaml:"Provider"`
}

// NewStruct creates a new relationship struct
func (*providerPeerR) NewStruct() *providerPeerR {
	return &providerPeerR{}
}

// providerPeerL is where Load methods for each relationship are stored.
type providerPeerL struct{}

var (
	providerPeerAllColumns            = []string{"id", "get_providers_id", "provider_id", "multi_address_ids"}
	providerPeerColumnsWithoutDefault = []string{"get_providers_id", "provider_id", "multi_address_ids"}
	providerPeerColumnsWithDefault    = []string{"id"}
	providerPeerPrimaryKeyColumns     = []string{"id"}
)

type (
	// ProviderPeerSlice is an alias for a slice of pointers to ProviderPeer.
	// This should almost always be used instead of []ProviderPeer.
	ProviderPeerSlice []*ProviderPeer
	// ProviderPeerHook is the signature for custom ProviderPeer hook methods
	ProviderPeerHook func(context.Context, boil.ContextExecutor, *ProviderPeer) error

	providerPeerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	providerPeerType                 = reflect.TypeOf(&ProviderPeer{})
	providerPeerMapping              = queries.MakeStructMapping(providerPeerType)
	providerPeerPrimaryKeyMapping, _ = queries.BindMapping(providerPeerType, providerPeerMapping, providerPeerPrimaryKeyColumns)
	providerPeerInsertCacheMut       sync.RWMutex
	providerPeerInsertCache          = make(map[string]insertCache)
	providerPeerUpdateCacheMut       sync.RWMutex
	providerPeerUpdateCache          = make(map[string]updateCache)
	providerPeerUpsertCacheMut       sync.RWMutex
	providerPeerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var providerPeerBeforeInsertHooks []ProviderPeerHook
var providerPeerBeforeUpdateHooks []ProviderPeerHook
var providerPeerBeforeDeleteHooks []ProviderPeerHook
var providerPeerBeforeUpsertHooks []ProviderPeerHook

var providerPeerAfterInsertHooks []ProviderPeerHook
var providerPeerAfterSelectHooks []ProviderPeerHook
var providerPeerAfterUpdateHooks []ProviderPeerHook
var providerPeerAfterDeleteHooks []ProviderPeerHook
var providerPeerAfterUpsertHooks []ProviderPeerHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProviderPeer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range providerPeerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProviderPeer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range providerPeerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProviderPeer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range providerPeerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProviderPeer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range providerPeerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProviderPeer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range providerPeerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProviderPeer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range providerPeerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProviderPeer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range providerPeerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProviderPeer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range providerPeerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProviderPeer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range providerPeerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProviderPeerHook registers your hook function for all future operations.
func AddProviderPeerHook(hookPoint boil.HookPoint, providerPeerHook ProviderPeerHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		providerPeerBeforeInsertHooks = append(providerPeerBeforeInsertHooks, providerPeerHook)
	case boil.BeforeUpdateHook:
		providerPeerBeforeUpdateHooks = append(providerPeerBeforeUpdateHooks, providerPeerHook)
	case boil.BeforeDeleteHook:
		providerPeerBeforeDeleteHooks = append(providerPeerBeforeDeleteHooks, providerPeerHook)
	case boil.BeforeUpsertHook:
		providerPeerBeforeUpsertHooks = append(providerPeerBeforeUpsertHooks, providerPeerHook)
	case boil.AfterInsertHook:
		providerPeerAfterInsertHooks = append(providerPeerAfterInsertHooks, providerPeerHook)
	case boil.AfterSelectHook:
		providerPeerAfterSelectHooks = append(providerPeerAfterSelectHooks, providerPeerHook)
	case boil.AfterUpdateHook:
		providerPeerAfterUpdateHooks = append(providerPeerAfterUpdateHooks, providerPeerHook)
	case boil.AfterDeleteHook:
		providerPeerAfterDeleteHooks = append(providerPeerAfterDeleteHooks, providerPeerHook)
	case boil.AfterUpsertHook:
		providerPeerAfterUpsertHooks = append(providerPeerAfterUpsertHooks, providerPeerHook)
	}
}

// One returns a single providerPeer record from the query.
func (q providerPeerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProviderPeer, error) {
	o := &ProviderPeer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for provider_peers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProviderPeer records from the query.
func (q providerPeerQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProviderPeerSlice, error) {
	var o []*ProviderPeer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProviderPeer slice")
	}

	if len(providerPeerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProviderPeer records in the query.
func (q providerPeerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count provider_peers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q providerPeerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if provider_peers exists")
	}

	return count > 0, nil
}

// GetProvider pointed to by the foreign key.
func (o *ProviderPeer) GetProvider(mods ...qm.QueryMod) getProviderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GetProvidersID),
	}

	queryMods = append(queryMods, mods...)

	query := GetProviders(queryMods...)
	queries.SetFrom(query.Query, "\"get_providers\"")

	return query
}

// Provider pointed to by the foreign key.
func (o *ProviderPeer) Provider(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProviderID),
	}

	queryMods = append(queryMods, mods...)

	query := Peers(queryMods...)
	queries.SetFrom(query.Query, "\"peers\"")

	return query
}

// LoadGetProvider allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (providerPeerL) LoadGetProvider(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProviderPeer interface{}, mods queries.Applicator) error {
	var slice []*ProviderPeer
	var object *ProviderPeer

	if singular {
		object = maybeProviderPeer.(*ProviderPeer)
	} else {
		slice = *maybeProviderPeer.(*[]*ProviderPeer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &providerPeerR{}
		}
		args = append(args, object.GetProvidersID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &providerPeerR{}
			}

			for _, a := range args {
				if a == obj.GetProvidersID {
					continue Outer
				}
			}

			args = append(args, obj.GetProvidersID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`get_providers`),
		qm.WhereIn(`get_providers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GetProvider")
	}

	var resultSlice []*GetProvider
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GetProvider")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for get_providers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for get_providers")
	}

	if len(providerPeerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GetProvider = foreign
		if foreign.R == nil {
			foreign.R = &getProviderR{}
		}
		foreign.R.ProviderPeers = append(foreign.R.ProviderPeers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GetProvidersID == foreign.ID {
				local.R.GetProvider = foreign
				if foreign.R == nil {
					foreign.R = &getProviderR{}
				}
				foreign.R.ProviderPeers = append(foreign.R.ProviderPeers, local)
				break
			}
		}
	}

	return nil
}

// LoadProvider allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (providerPeerL) LoadProvider(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProviderPeer interface{}, mods queries.Applicator) error {
	var slice []*ProviderPeer
	var object *ProviderPeer

	if singular {
		object = maybeProviderPeer.(*ProviderPeer)
	} else {
		slice = *maybeProviderPeer.(*[]*ProviderPeer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &providerPeerR{}
		}
		args = append(args, object.ProviderID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &providerPeerR{}
			}

			for _, a := range args {
				if a == obj.ProviderID {
					continue Outer
				}
			}

			args = append(args, obj.ProviderID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(providerPeerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Provider = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.ProviderProviderPeers = append(foreign.R.ProviderProviderPeers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProviderID == foreign.ID {
				local.R.Provider = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.ProviderProviderPeers = append(foreign.R.ProviderProviderPeers, local)
				break
			}
		}
	}

	return nil
}

// SetGetProvider of the providerPeer to the related item.
// Sets o.R.GetProvider to related.
// Adds o to related.R.ProviderPeers.
func (o *ProviderPeer) SetGetProvider(ctx context.Context, exec boil.ContextExecutor, insert bool, related *GetProvider) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"provider_peers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"get_providers_id"}),
		strmangle.WhereClause("\"", "\"", 2, providerPeerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GetProvidersID = related.ID
	if o.R == nil {
		o.R = &providerPeerR{
			GetProvider: related,
		}
	} else {
		o.R.GetProvider = related
	}

	if related.R == nil {
		related.R = &getProviderR{
			ProviderPeers: ProviderPeerSlice{o},
		}
	} else {
		related.R.ProviderPeers = append(related.R.ProviderPeers, o)
	}

	return nil
}

// SetProvider of the providerPeer to the related item.
// Sets o.R.Provider to related.
// Adds o to related.R.ProviderProviderPeers.
func (o *ProviderPeer) SetProvider(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"provider_peers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"provider_id"}),
		strmangle.WhereClause("\"", "\"", 2, providerPeerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProviderID = related.ID
	if o.R == nil {
		o.R = &providerPeerR{
			Provider: related,
		}
	} else {
		o.R.Provider = related
	}

	if related.R == nil {
		related.R = &peerR{
			ProviderProviderPeers: ProviderPeerSlice{o},
		}
	} else {
		related.R.ProviderProviderPeers = append(related.R.ProviderProviderPeers, o)
	}

	return nil
}

// ProviderPeers retrieves all the records using an executor.
func ProviderPeers(mods ...qm.QueryMod) providerPeerQuery {
	mods = append(mods, qm.From("\"provider_peers\""))
	return providerPeerQuery{NewQuery(mods...)}
}

// FindProviderPeer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProviderPeer(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ProviderPeer, error) {
	providerPeerObj := &ProviderPeer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"provider_peers\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, providerPeerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from provider_peers")
	}

	if err = providerPeerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return providerPeerObj, err
	}

	return providerPeerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProviderPeer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no provider_peers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(providerPeerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	providerPeerInsertCacheMut.RLock()
	cache, cached := providerPeerInsertCache[key]
	providerPeerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			providerPeerAllColumns,
			providerPeerColumnsWithDefault,
			providerPeerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(providerPeerType, providerPeerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(providerPeerType, providerPeerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"provider_peers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"provider_peers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into provider_peers")
	}

	if !cached {
		providerPeerInsertCacheMut.Lock()
		providerPeerInsertCache[key] = cache
		providerPeerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProviderPeer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProviderPeer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	providerPeerUpdateCacheMut.RLock()
	cache, cached := providerPeerUpdateCache[key]
	providerPeerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			providerPeerAllColumns,
			providerPeerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update provider_peers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"provider_peers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, providerPeerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(providerPeerType, providerPeerMapping, append(wl, providerPeerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update provider_peers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for provider_peers")
	}

	if !cached {
		providerPeerUpdateCacheMut.Lock()
		providerPeerUpdateCache[key] = cache
		providerPeerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q providerPeerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for provider_peers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for provider_peers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProviderPeerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), providerPeerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"provider_peers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, providerPeerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in providerPeer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all providerPeer")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProviderPeer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no provider_peers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(providerPeerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	providerPeerUpsertCacheMut.RLock()
	cache, cached := providerPeerUpsertCache[key]
	providerPeerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			providerPeerAllColumns,
			providerPeerColumnsWithDefault,
			providerPeerColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			providerPeerAllColumns,
			providerPeerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert provider_peers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(providerPeerPrimaryKeyColumns))
			copy(conflict, providerPeerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"provider_peers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(providerPeerType, providerPeerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(providerPeerType, providerPeerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert provider_peers")
	}

	if !cached {
		providerPeerUpsertCacheMut.Lock()
		providerPeerUpsertCache[key] = cache
		providerPeerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProviderPeer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProviderPeer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProviderPeer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), providerPeerPrimaryKeyMapping)
	sql := "DELETE FROM \"provider_peers\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from provider_peers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for provider_peers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q providerPeerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no providerPeerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from provider_peers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for provider_peers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProviderPeerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(providerPeerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), providerPeerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"provider_peers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, providerPeerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from providerPeer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for provider_peers")
	}

	if len(providerPeerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProviderPeer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProviderPeer(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProviderPeerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProviderPeerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), providerPeerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"provider_peers\".* FROM \"provider_peers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, providerPeerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProviderPeerSlice")
	}

	*o = slice

	return nil
}

// ProviderPeerExists checks if the ProviderPeer row exists.
func ProviderPeerExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"provider_peers\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if provider_peers exists")
	}

	return exists, nil
}
