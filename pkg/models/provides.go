// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Provide is an object representing the database table.
type Provide struct {
	ID                    int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProviderID            int         `boil:"provider_id" json:"provider_id" toml:"provider_id" yaml:"provider_id"`
	ContentID             string      `boil:"content_id" json:"content_id" toml:"content_id" yaml:"content_id"`
	Distance              []byte      `boil:"distance" json:"distance" toml:"distance" yaml:"distance"`
	InitialRoutingTableID int         `boil:"initial_routing_table_id" json:"initial_routing_table_id" toml:"initial_routing_table_id" yaml:"initial_routing_table_id"`
	FinalRoutingTableID   null.Int    `boil:"final_routing_table_id" json:"final_routing_table_id,omitempty" toml:"final_routing_table_id" yaml:"final_routing_table_id,omitempty"`
	StartedAt             time.Time   `boil:"started_at" json:"started_at" toml:"started_at" yaml:"started_at"`
	EndedAt               null.Time   `boil:"ended_at" json:"ended_at,omitempty" toml:"ended_at" yaml:"ended_at,omitempty"`
	Error                 null.String `boil:"error" json:"error,omitempty" toml:"error" yaml:"error,omitempty"`
	DoneAt                null.Time   `boil:"done_at" json:"done_at,omitempty" toml:"done_at" yaml:"done_at,omitempty"`
	UpdatedAt             time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt             time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *provideR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L provideL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProvideColumns = struct {
	ID                    string
	ProviderID            string
	ContentID             string
	Distance              string
	InitialRoutingTableID string
	FinalRoutingTableID   string
	StartedAt             string
	EndedAt               string
	Error                 string
	DoneAt                string
	UpdatedAt             string
	CreatedAt             string
}{
	ID:                    "id",
	ProviderID:            "provider_id",
	ContentID:             "content_id",
	Distance:              "distance",
	InitialRoutingTableID: "initial_routing_table_id",
	FinalRoutingTableID:   "final_routing_table_id",
	StartedAt:             "started_at",
	EndedAt:               "ended_at",
	Error:                 "error",
	DoneAt:                "done_at",
	UpdatedAt:             "updated_at",
	CreatedAt:             "created_at",
}

var ProvideTableColumns = struct {
	ID                    string
	ProviderID            string
	ContentID             string
	Distance              string
	InitialRoutingTableID string
	FinalRoutingTableID   string
	StartedAt             string
	EndedAt               string
	Error                 string
	DoneAt                string
	UpdatedAt             string
	CreatedAt             string
}{
	ID:                    "provides.id",
	ProviderID:            "provides.provider_id",
	ContentID:             "provides.content_id",
	Distance:              "provides.distance",
	InitialRoutingTableID: "provides.initial_routing_table_id",
	FinalRoutingTableID:   "provides.final_routing_table_id",
	StartedAt:             "provides.started_at",
	EndedAt:               "provides.ended_at",
	Error:                 "provides.error",
	DoneAt:                "provides.done_at",
	UpdatedAt:             "provides.updated_at",
	CreatedAt:             "provides.created_at",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ProvideWhere = struct {
	ID                    whereHelperint
	ProviderID            whereHelperint
	ContentID             whereHelperstring
	Distance              whereHelper__byte
	InitialRoutingTableID whereHelperint
	FinalRoutingTableID   whereHelpernull_Int
	StartedAt             whereHelpertime_Time
	EndedAt               whereHelpernull_Time
	Error                 whereHelpernull_String
	DoneAt                whereHelpernull_Time
	UpdatedAt             whereHelpertime_Time
	CreatedAt             whereHelpertime_Time
}{
	ID:                    whereHelperint{field: "\"provides\".\"id\""},
	ProviderID:            whereHelperint{field: "\"provides\".\"provider_id\""},
	ContentID:             whereHelperstring{field: "\"provides\".\"content_id\""},
	Distance:              whereHelper__byte{field: "\"provides\".\"distance\""},
	InitialRoutingTableID: whereHelperint{field: "\"provides\".\"initial_routing_table_id\""},
	FinalRoutingTableID:   whereHelpernull_Int{field: "\"provides\".\"final_routing_table_id\""},
	StartedAt:             whereHelpertime_Time{field: "\"provides\".\"started_at\""},
	EndedAt:               whereHelpernull_Time{field: "\"provides\".\"ended_at\""},
	Error:                 whereHelpernull_String{field: "\"provides\".\"error\""},
	DoneAt:                whereHelpernull_Time{field: "\"provides\".\"done_at\""},
	UpdatedAt:             whereHelpertime_Time{field: "\"provides\".\"updated_at\""},
	CreatedAt:             whereHelpertime_Time{field: "\"provides\".\"created_at\""},
}

// ProvideRels is where relationship names are stored.
var ProvideRels = struct {
	Provider     string
	AddProviders string
	CloserPeers  string
	Connections  string
	Dials        string
	FindNodes    string
	PeerStates   string
}{
	Provider:     "Provider",
	AddProviders: "AddProviders",
	CloserPeers:  "CloserPeers",
	Connections:  "Connections",
	Dials:        "Dials",
	FindNodes:    "FindNodes",
	PeerStates:   "PeerStates",
}

// provideR is where relationships are stored.
type provideR struct {
	Provider     *Peer            `boil:"Provider" json:"Provider" toml:"Provider" yaml:"Provider"`
	AddProviders AddProviderSlice `boil:"AddProviders" json:"AddProviders" toml:"AddProviders" yaml:"AddProviders"`
	CloserPeers  CloserPeerSlice  `boil:"CloserPeers" json:"CloserPeers" toml:"CloserPeers" yaml:"CloserPeers"`
	Connections  ConnectionSlice  `boil:"Connections" json:"Connections" toml:"Connections" yaml:"Connections"`
	Dials        DialSlice        `boil:"Dials" json:"Dials" toml:"Dials" yaml:"Dials"`
	FindNodes    FindNodeSlice    `boil:"FindNodes" json:"FindNodes" toml:"FindNodes" yaml:"FindNodes"`
	PeerStates   PeerStateSlice   `boil:"PeerStates" json:"PeerStates" toml:"PeerStates" yaml:"PeerStates"`
}

// NewStruct creates a new relationship struct
func (*provideR) NewStruct() *provideR {
	return &provideR{}
}

// provideL is where Load methods for each relationship are stored.
type provideL struct{}

var (
	provideAllColumns            = []string{"id", "provider_id", "content_id", "distance", "initial_routing_table_id", "final_routing_table_id", "started_at", "ended_at", "error", "done_at", "updated_at", "created_at"}
	provideColumnsWithoutDefault = []string{"provider_id", "content_id", "distance", "initial_routing_table_id", "final_routing_table_id", "started_at", "ended_at", "error", "done_at", "updated_at", "created_at"}
	provideColumnsWithDefault    = []string{"id"}
	providePrimaryKeyColumns     = []string{"id"}
)

type (
	// ProvideSlice is an alias for a slice of pointers to Provide.
	// This should almost always be used instead of []Provide.
	ProvideSlice []*Provide
	// ProvideHook is the signature for custom Provide hook methods
	ProvideHook func(context.Context, boil.ContextExecutor, *Provide) error

	provideQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	provideType                 = reflect.TypeOf(&Provide{})
	provideMapping              = queries.MakeStructMapping(provideType)
	providePrimaryKeyMapping, _ = queries.BindMapping(provideType, provideMapping, providePrimaryKeyColumns)
	provideInsertCacheMut       sync.RWMutex
	provideInsertCache          = make(map[string]insertCache)
	provideUpdateCacheMut       sync.RWMutex
	provideUpdateCache          = make(map[string]updateCache)
	provideUpsertCacheMut       sync.RWMutex
	provideUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var provideBeforeInsertHooks []ProvideHook
var provideBeforeUpdateHooks []ProvideHook
var provideBeforeDeleteHooks []ProvideHook
var provideBeforeUpsertHooks []ProvideHook

var provideAfterInsertHooks []ProvideHook
var provideAfterSelectHooks []ProvideHook
var provideAfterUpdateHooks []ProvideHook
var provideAfterDeleteHooks []ProvideHook
var provideAfterUpsertHooks []ProvideHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Provide) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provideBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Provide) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provideBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Provide) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provideBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Provide) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provideBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Provide) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provideAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Provide) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provideAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Provide) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provideAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Provide) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provideAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Provide) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provideAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProvideHook registers your hook function for all future operations.
func AddProvideHook(hookPoint boil.HookPoint, provideHook ProvideHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		provideBeforeInsertHooks = append(provideBeforeInsertHooks, provideHook)
	case boil.BeforeUpdateHook:
		provideBeforeUpdateHooks = append(provideBeforeUpdateHooks, provideHook)
	case boil.BeforeDeleteHook:
		provideBeforeDeleteHooks = append(provideBeforeDeleteHooks, provideHook)
	case boil.BeforeUpsertHook:
		provideBeforeUpsertHooks = append(provideBeforeUpsertHooks, provideHook)
	case boil.AfterInsertHook:
		provideAfterInsertHooks = append(provideAfterInsertHooks, provideHook)
	case boil.AfterSelectHook:
		provideAfterSelectHooks = append(provideAfterSelectHooks, provideHook)
	case boil.AfterUpdateHook:
		provideAfterUpdateHooks = append(provideAfterUpdateHooks, provideHook)
	case boil.AfterDeleteHook:
		provideAfterDeleteHooks = append(provideAfterDeleteHooks, provideHook)
	case boil.AfterUpsertHook:
		provideAfterUpsertHooks = append(provideAfterUpsertHooks, provideHook)
	}
}

// One returns a single provide record from the query.
func (q provideQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Provide, error) {
	o := &Provide{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for provides")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Provide records from the query.
func (q provideQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProvideSlice, error) {
	var o []*Provide

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Provide slice")
	}

	if len(provideAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Provide records in the query.
func (q provideQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count provides rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q provideQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if provides exists")
	}

	return count > 0, nil
}

// Provider pointed to by the foreign key.
func (o *Provide) Provider(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProviderID),
	}

	queryMods = append(queryMods, mods...)

	query := Peers(queryMods...)
	queries.SetFrom(query.Query, "\"peers\"")

	return query
}

// AddProviders retrieves all the add_provider's AddProviders with an executor.
func (o *Provide) AddProviders(mods ...qm.QueryMod) addProviderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"add_providers\".\"provide_id\"=?", o.ID),
	)

	query := AddProviders(queryMods...)
	queries.SetFrom(query.Query, "\"add_providers\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"add_providers\".*"})
	}

	return query
}

// CloserPeers retrieves all the closer_peer's CloserPeers with an executor.
func (o *Provide) CloserPeers(mods ...qm.QueryMod) closerPeerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"closer_peers\".\"provide_id\"=?", o.ID),
	)

	query := CloserPeers(queryMods...)
	queries.SetFrom(query.Query, "\"closer_peers\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"closer_peers\".*"})
	}

	return query
}

// Connections retrieves all the connection's Connections with an executor.
func (o *Provide) Connections(mods ...qm.QueryMod) connectionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"connections\".\"provide_id\"=?", o.ID),
	)

	query := Connections(queryMods...)
	queries.SetFrom(query.Query, "\"connections\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"connections\".*"})
	}

	return query
}

// Dials retrieves all the dial's Dials with an executor.
func (o *Provide) Dials(mods ...qm.QueryMod) dialQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dials\".\"provide_id\"=?", o.ID),
	)

	query := Dials(queryMods...)
	queries.SetFrom(query.Query, "\"dials\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"dials\".*"})
	}

	return query
}

// FindNodes retrieves all the find_node's FindNodes with an executor.
func (o *Provide) FindNodes(mods ...qm.QueryMod) findNodeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"find_nodes\".\"provide_id\"=?", o.ID),
	)

	query := FindNodes(queryMods...)
	queries.SetFrom(query.Query, "\"find_nodes\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"find_nodes\".*"})
	}

	return query
}

// PeerStates retrieves all the peer_state's PeerStates with an executor.
func (o *Provide) PeerStates(mods ...qm.QueryMod) peerStateQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"peer_states\".\"provide_id\"=?", o.ID),
	)

	query := PeerStates(queryMods...)
	queries.SetFrom(query.Query, "\"peer_states\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"peer_states\".*"})
	}

	return query
}

// LoadProvider allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (provideL) LoadProvider(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProvide interface{}, mods queries.Applicator) error {
	var slice []*Provide
	var object *Provide

	if singular {
		object = maybeProvide.(*Provide)
	} else {
		slice = *maybeProvide.(*[]*Provide)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &provideR{}
		}
		args = append(args, object.ProviderID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &provideR{}
			}

			for _, a := range args {
				if a == obj.ProviderID {
					continue Outer
				}
			}

			args = append(args, obj.ProviderID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(provideAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Provider = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.ProviderProvides = append(foreign.R.ProviderProvides, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProviderID == foreign.ID {
				local.R.Provider = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.ProviderProvides = append(foreign.R.ProviderProvides, local)
				break
			}
		}
	}

	return nil
}

// LoadAddProviders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (provideL) LoadAddProviders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProvide interface{}, mods queries.Applicator) error {
	var slice []*Provide
	var object *Provide

	if singular {
		object = maybeProvide.(*Provide)
	} else {
		slice = *maybeProvide.(*[]*Provide)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &provideR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &provideR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`add_providers`),
		qm.WhereIn(`add_providers.provide_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load add_providers")
	}

	var resultSlice []*AddProvider
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice add_providers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on add_providers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for add_providers")
	}

	if len(addProviderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AddProviders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &addProviderR{}
			}
			foreign.R.Provide = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProvideID {
				local.R.AddProviders = append(local.R.AddProviders, foreign)
				if foreign.R == nil {
					foreign.R = &addProviderR{}
				}
				foreign.R.Provide = local
				break
			}
		}
	}

	return nil
}

// LoadCloserPeers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (provideL) LoadCloserPeers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProvide interface{}, mods queries.Applicator) error {
	var slice []*Provide
	var object *Provide

	if singular {
		object = maybeProvide.(*Provide)
	} else {
		slice = *maybeProvide.(*[]*Provide)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &provideR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &provideR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`closer_peers`),
		qm.WhereIn(`closer_peers.provide_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load closer_peers")
	}

	var resultSlice []*CloserPeer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice closer_peers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on closer_peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for closer_peers")
	}

	if len(closerPeerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CloserPeers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &closerPeerR{}
			}
			foreign.R.Provide = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProvideID {
				local.R.CloserPeers = append(local.R.CloserPeers, foreign)
				if foreign.R == nil {
					foreign.R = &closerPeerR{}
				}
				foreign.R.Provide = local
				break
			}
		}
	}

	return nil
}

// LoadConnections allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (provideL) LoadConnections(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProvide interface{}, mods queries.Applicator) error {
	var slice []*Provide
	var object *Provide

	if singular {
		object = maybeProvide.(*Provide)
	} else {
		slice = *maybeProvide.(*[]*Provide)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &provideR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &provideR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`connections`),
		qm.WhereIn(`connections.provide_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load connections")
	}

	var resultSlice []*Connection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice connections")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on connections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for connections")
	}

	if len(connectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Connections = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &connectionR{}
			}
			foreign.R.Provide = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProvideID {
				local.R.Connections = append(local.R.Connections, foreign)
				if foreign.R == nil {
					foreign.R = &connectionR{}
				}
				foreign.R.Provide = local
				break
			}
		}
	}

	return nil
}

// LoadDials allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (provideL) LoadDials(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProvide interface{}, mods queries.Applicator) error {
	var slice []*Provide
	var object *Provide

	if singular {
		object = maybeProvide.(*Provide)
	} else {
		slice = *maybeProvide.(*[]*Provide)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &provideR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &provideR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dials`),
		qm.WhereIn(`dials.provide_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dials")
	}

	var resultSlice []*Dial
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dials")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dials")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dials")
	}

	if len(dialAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Dials = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dialR{}
			}
			foreign.R.Provide = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProvideID {
				local.R.Dials = append(local.R.Dials, foreign)
				if foreign.R == nil {
					foreign.R = &dialR{}
				}
				foreign.R.Provide = local
				break
			}
		}
	}

	return nil
}

// LoadFindNodes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (provideL) LoadFindNodes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProvide interface{}, mods queries.Applicator) error {
	var slice []*Provide
	var object *Provide

	if singular {
		object = maybeProvide.(*Provide)
	} else {
		slice = *maybeProvide.(*[]*Provide)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &provideR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &provideR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`find_nodes`),
		qm.WhereIn(`find_nodes.provide_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load find_nodes")
	}

	var resultSlice []*FindNode
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice find_nodes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on find_nodes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for find_nodes")
	}

	if len(findNodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FindNodes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &findNodeR{}
			}
			foreign.R.Provide = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProvideID {
				local.R.FindNodes = append(local.R.FindNodes, foreign)
				if foreign.R == nil {
					foreign.R = &findNodeR{}
				}
				foreign.R.Provide = local
				break
			}
		}
	}

	return nil
}

// LoadPeerStates allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (provideL) LoadPeerStates(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProvide interface{}, mods queries.Applicator) error {
	var slice []*Provide
	var object *Provide

	if singular {
		object = maybeProvide.(*Provide)
	} else {
		slice = *maybeProvide.(*[]*Provide)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &provideR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &provideR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peer_states`),
		qm.WhereIn(`peer_states.provide_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load peer_states")
	}

	var resultSlice []*PeerState
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice peer_states")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on peer_states")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peer_states")
	}

	if len(peerStateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PeerStates = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &peerStateR{}
			}
			foreign.R.Provide = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProvideID {
				local.R.PeerStates = append(local.R.PeerStates, foreign)
				if foreign.R == nil {
					foreign.R = &peerStateR{}
				}
				foreign.R.Provide = local
				break
			}
		}
	}

	return nil
}

// SetProvider of the provide to the related item.
// Sets o.R.Provider to related.
// Adds o to related.R.ProviderProvides.
func (o *Provide) SetProvider(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"provides\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"provider_id"}),
		strmangle.WhereClause("\"", "\"", 2, providePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProviderID = related.ID
	if o.R == nil {
		o.R = &provideR{
			Provider: related,
		}
	} else {
		o.R.Provider = related
	}

	if related.R == nil {
		related.R = &peerR{
			ProviderProvides: ProvideSlice{o},
		}
	} else {
		related.R.ProviderProvides = append(related.R.ProviderProvides, o)
	}

	return nil
}

// AddAddProviders adds the given related objects to the existing relationships
// of the provide, optionally inserting them as new records.
// Appends related to o.R.AddProviders.
// Sets related.R.Provide appropriately.
func (o *Provide) AddAddProviders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AddProvider) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProvideID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"add_providers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"provide_id"}),
				strmangle.WhereClause("\"", "\"", 2, addProviderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProvideID = o.ID
		}
	}

	if o.R == nil {
		o.R = &provideR{
			AddProviders: related,
		}
	} else {
		o.R.AddProviders = append(o.R.AddProviders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &addProviderR{
				Provide: o,
			}
		} else {
			rel.R.Provide = o
		}
	}
	return nil
}

// AddCloserPeers adds the given related objects to the existing relationships
// of the provide, optionally inserting them as new records.
// Appends related to o.R.CloserPeers.
// Sets related.R.Provide appropriately.
func (o *Provide) AddCloserPeers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CloserPeer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProvideID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"closer_peers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"provide_id"}),
				strmangle.WhereClause("\"", "\"", 2, closerPeerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ProvideID, rel.FindNodeID, rel.PeerID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProvideID = o.ID
		}
	}

	if o.R == nil {
		o.R = &provideR{
			CloserPeers: related,
		}
	} else {
		o.R.CloserPeers = append(o.R.CloserPeers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &closerPeerR{
				Provide: o,
			}
		} else {
			rel.R.Provide = o
		}
	}
	return nil
}

// AddConnections adds the given related objects to the existing relationships
// of the provide, optionally inserting them as new records.
// Appends related to o.R.Connections.
// Sets related.R.Provide appropriately.
func (o *Provide) AddConnections(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Connection) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProvideID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"connections\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"provide_id"}),
				strmangle.WhereClause("\"", "\"", 2, connectionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProvideID = o.ID
		}
	}

	if o.R == nil {
		o.R = &provideR{
			Connections: related,
		}
	} else {
		o.R.Connections = append(o.R.Connections, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &connectionR{
				Provide: o,
			}
		} else {
			rel.R.Provide = o
		}
	}
	return nil
}

// AddDials adds the given related objects to the existing relationships
// of the provide, optionally inserting them as new records.
// Appends related to o.R.Dials.
// Sets related.R.Provide appropriately.
func (o *Provide) AddDials(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Dial) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProvideID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dials\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"provide_id"}),
				strmangle.WhereClause("\"", "\"", 2, dialPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProvideID = o.ID
		}
	}

	if o.R == nil {
		o.R = &provideR{
			Dials: related,
		}
	} else {
		o.R.Dials = append(o.R.Dials, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dialR{
				Provide: o,
			}
		} else {
			rel.R.Provide = o
		}
	}
	return nil
}

// AddFindNodes adds the given related objects to the existing relationships
// of the provide, optionally inserting them as new records.
// Appends related to o.R.FindNodes.
// Sets related.R.Provide appropriately.
func (o *Provide) AddFindNodes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*FindNode) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProvideID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"find_nodes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"provide_id"}),
				strmangle.WhereClause("\"", "\"", 2, findNodePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProvideID = o.ID
		}
	}

	if o.R == nil {
		o.R = &provideR{
			FindNodes: related,
		}
	} else {
		o.R.FindNodes = append(o.R.FindNodes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &findNodeR{
				Provide: o,
			}
		} else {
			rel.R.Provide = o
		}
	}
	return nil
}

// AddPeerStates adds the given related objects to the existing relationships
// of the provide, optionally inserting them as new records.
// Appends related to o.R.PeerStates.
// Sets related.R.Provide appropriately.
func (o *Provide) AddPeerStates(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PeerState) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProvideID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"peer_states\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"provide_id"}),
				strmangle.WhereClause("\"", "\"", 2, peerStatePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ProvideID, rel.PeerID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProvideID = o.ID
		}
	}

	if o.R == nil {
		o.R = &provideR{
			PeerStates: related,
		}
	} else {
		o.R.PeerStates = append(o.R.PeerStates, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &peerStateR{
				Provide: o,
			}
		} else {
			rel.R.Provide = o
		}
	}
	return nil
}

// Provides retrieves all the records using an executor.
func Provides(mods ...qm.QueryMod) provideQuery {
	mods = append(mods, qm.From("\"provides\""))
	return provideQuery{NewQuery(mods...)}
}

// FindProvide retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProvide(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Provide, error) {
	provideObj := &Provide{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"provides\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, provideObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from provides")
	}

	if err = provideObj.doAfterSelectHooks(ctx, exec); err != nil {
		return provideObj, err
	}

	return provideObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Provide) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no provides provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(provideColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	provideInsertCacheMut.RLock()
	cache, cached := provideInsertCache[key]
	provideInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			provideAllColumns,
			provideColumnsWithDefault,
			provideColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(provideType, provideMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(provideType, provideMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"provides\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"provides\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into provides")
	}

	if !cached {
		provideInsertCacheMut.Lock()
		provideInsertCache[key] = cache
		provideInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Provide.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Provide) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	provideUpdateCacheMut.RLock()
	cache, cached := provideUpdateCache[key]
	provideUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			provideAllColumns,
			providePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update provides, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"provides\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, providePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(provideType, provideMapping, append(wl, providePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update provides row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for provides")
	}

	if !cached {
		provideUpdateCacheMut.Lock()
		provideUpdateCache[key] = cache
		provideUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q provideQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for provides")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for provides")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProvideSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), providePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"provides\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, providePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in provide slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all provide")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Provide) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no provides provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(provideColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	provideUpsertCacheMut.RLock()
	cache, cached := provideUpsertCache[key]
	provideUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			provideAllColumns,
			provideColumnsWithDefault,
			provideColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			provideAllColumns,
			providePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert provides, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(providePrimaryKeyColumns))
			copy(conflict, providePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"provides\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(provideType, provideMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(provideType, provideMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert provides")
	}

	if !cached {
		provideUpsertCacheMut.Lock()
		provideUpsertCache[key] = cache
		provideUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Provide record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Provide) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Provide provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), providePrimaryKeyMapping)
	sql := "DELETE FROM \"provides\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from provides")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for provides")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q provideQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no provideQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from provides")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for provides")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProvideSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(provideBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), providePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"provides\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, providePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from provide slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for provides")
	}

	if len(provideAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Provide) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProvide(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProvideSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProvideSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), providePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"provides\".* FROM \"provides\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, providePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProvideSlice")
	}

	*o = slice

	return nil
}

// ProvideExists checks if the Provide row exists.
func ProvideExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"provides\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if provides exists")
	}

	return exists, nil
}
