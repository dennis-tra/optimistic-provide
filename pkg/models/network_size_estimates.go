// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// NetworkSizeEstimate is an object representing the database table.
type NetworkSizeEstimate struct {
	ID             int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	PeerID         int       `boil:"peer_id" json:"peer_id" toml:"peer_id" yaml:"peer_id"`
	NetworkSize    float64   `boil:"network_size" json:"network_size" toml:"network_size" yaml:"network_size"`
	NetworkSizeErr float64   `boil:"network_size_err" json:"network_size_err" toml:"network_size_err" yaml:"network_size_err"`
	RSquared       float64   `boil:"r_squared" json:"r_squared" toml:"r_squared" yaml:"r_squared"`
	SampleSize     int       `boil:"sample_size" json:"sample_size" toml:"sample_size" yaml:"sample_size"`
	CreatedAt      time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *networkSizeEstimateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L networkSizeEstimateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NetworkSizeEstimateColumns = struct {
	ID             string
	PeerID         string
	NetworkSize    string
	NetworkSizeErr string
	RSquared       string
	SampleSize     string
	CreatedAt      string
}{
	ID:             "id",
	PeerID:         "peer_id",
	NetworkSize:    "network_size",
	NetworkSizeErr: "network_size_err",
	RSquared:       "r_squared",
	SampleSize:     "sample_size",
	CreatedAt:      "created_at",
}

var NetworkSizeEstimateTableColumns = struct {
	ID             string
	PeerID         string
	NetworkSize    string
	NetworkSizeErr string
	RSquared       string
	SampleSize     string
	CreatedAt      string
}{
	ID:             "network_size_estimates.id",
	PeerID:         "network_size_estimates.peer_id",
	NetworkSize:    "network_size_estimates.network_size",
	NetworkSizeErr: "network_size_estimates.network_size_err",
	RSquared:       "network_size_estimates.r_squared",
	SampleSize:     "network_size_estimates.sample_size",
	CreatedAt:      "network_size_estimates.created_at",
}

// Generated where

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var NetworkSizeEstimateWhere = struct {
	ID             whereHelperint
	PeerID         whereHelperint
	NetworkSize    whereHelperfloat64
	NetworkSizeErr whereHelperfloat64
	RSquared       whereHelperfloat64
	SampleSize     whereHelperint
	CreatedAt      whereHelpertime_Time
}{
	ID:             whereHelperint{field: "\"network_size_estimates\".\"id\""},
	PeerID:         whereHelperint{field: "\"network_size_estimates\".\"peer_id\""},
	NetworkSize:    whereHelperfloat64{field: "\"network_size_estimates\".\"network_size\""},
	NetworkSizeErr: whereHelperfloat64{field: "\"network_size_estimates\".\"network_size_err\""},
	RSquared:       whereHelperfloat64{field: "\"network_size_estimates\".\"r_squared\""},
	SampleSize:     whereHelperint{field: "\"network_size_estimates\".\"sample_size\""},
	CreatedAt:      whereHelpertime_Time{field: "\"network_size_estimates\".\"created_at\""},
}

// NetworkSizeEstimateRels is where relationship names are stored.
var NetworkSizeEstimateRels = struct {
	Peer string
}{
	Peer: "Peer",
}

// networkSizeEstimateR is where relationships are stored.
type networkSizeEstimateR struct {
	Peer *Peer `boil:"Peer" json:"Peer" toml:"Peer" yaml:"Peer"`
}

// NewStruct creates a new relationship struct
func (*networkSizeEstimateR) NewStruct() *networkSizeEstimateR {
	return &networkSizeEstimateR{}
}

// networkSizeEstimateL is where Load methods for each relationship are stored.
type networkSizeEstimateL struct{}

var (
	networkSizeEstimateAllColumns            = []string{"id", "peer_id", "network_size", "network_size_err", "r_squared", "sample_size", "created_at"}
	networkSizeEstimateColumnsWithoutDefault = []string{"peer_id", "network_size", "network_size_err", "r_squared", "sample_size", "created_at"}
	networkSizeEstimateColumnsWithDefault    = []string{"id"}
	networkSizeEstimatePrimaryKeyColumns     = []string{"id"}
)

type (
	// NetworkSizeEstimateSlice is an alias for a slice of pointers to NetworkSizeEstimate.
	// This should almost always be used instead of []NetworkSizeEstimate.
	NetworkSizeEstimateSlice []*NetworkSizeEstimate
	// NetworkSizeEstimateHook is the signature for custom NetworkSizeEstimate hook methods
	NetworkSizeEstimateHook func(context.Context, boil.ContextExecutor, *NetworkSizeEstimate) error

	networkSizeEstimateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	networkSizeEstimateType                 = reflect.TypeOf(&NetworkSizeEstimate{})
	networkSizeEstimateMapping              = queries.MakeStructMapping(networkSizeEstimateType)
	networkSizeEstimatePrimaryKeyMapping, _ = queries.BindMapping(networkSizeEstimateType, networkSizeEstimateMapping, networkSizeEstimatePrimaryKeyColumns)
	networkSizeEstimateInsertCacheMut       sync.RWMutex
	networkSizeEstimateInsertCache          = make(map[string]insertCache)
	networkSizeEstimateUpdateCacheMut       sync.RWMutex
	networkSizeEstimateUpdateCache          = make(map[string]updateCache)
	networkSizeEstimateUpsertCacheMut       sync.RWMutex
	networkSizeEstimateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var networkSizeEstimateBeforeInsertHooks []NetworkSizeEstimateHook
var networkSizeEstimateBeforeUpdateHooks []NetworkSizeEstimateHook
var networkSizeEstimateBeforeDeleteHooks []NetworkSizeEstimateHook
var networkSizeEstimateBeforeUpsertHooks []NetworkSizeEstimateHook

var networkSizeEstimateAfterInsertHooks []NetworkSizeEstimateHook
var networkSizeEstimateAfterSelectHooks []NetworkSizeEstimateHook
var networkSizeEstimateAfterUpdateHooks []NetworkSizeEstimateHook
var networkSizeEstimateAfterDeleteHooks []NetworkSizeEstimateHook
var networkSizeEstimateAfterUpsertHooks []NetworkSizeEstimateHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *NetworkSizeEstimate) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range networkSizeEstimateBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *NetworkSizeEstimate) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range networkSizeEstimateBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *NetworkSizeEstimate) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range networkSizeEstimateBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *NetworkSizeEstimate) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range networkSizeEstimateBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *NetworkSizeEstimate) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range networkSizeEstimateAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *NetworkSizeEstimate) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range networkSizeEstimateAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *NetworkSizeEstimate) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range networkSizeEstimateAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *NetworkSizeEstimate) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range networkSizeEstimateAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *NetworkSizeEstimate) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range networkSizeEstimateAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNetworkSizeEstimateHook registers your hook function for all future operations.
func AddNetworkSizeEstimateHook(hookPoint boil.HookPoint, networkSizeEstimateHook NetworkSizeEstimateHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		networkSizeEstimateBeforeInsertHooks = append(networkSizeEstimateBeforeInsertHooks, networkSizeEstimateHook)
	case boil.BeforeUpdateHook:
		networkSizeEstimateBeforeUpdateHooks = append(networkSizeEstimateBeforeUpdateHooks, networkSizeEstimateHook)
	case boil.BeforeDeleteHook:
		networkSizeEstimateBeforeDeleteHooks = append(networkSizeEstimateBeforeDeleteHooks, networkSizeEstimateHook)
	case boil.BeforeUpsertHook:
		networkSizeEstimateBeforeUpsertHooks = append(networkSizeEstimateBeforeUpsertHooks, networkSizeEstimateHook)
	case boil.AfterInsertHook:
		networkSizeEstimateAfterInsertHooks = append(networkSizeEstimateAfterInsertHooks, networkSizeEstimateHook)
	case boil.AfterSelectHook:
		networkSizeEstimateAfterSelectHooks = append(networkSizeEstimateAfterSelectHooks, networkSizeEstimateHook)
	case boil.AfterUpdateHook:
		networkSizeEstimateAfterUpdateHooks = append(networkSizeEstimateAfterUpdateHooks, networkSizeEstimateHook)
	case boil.AfterDeleteHook:
		networkSizeEstimateAfterDeleteHooks = append(networkSizeEstimateAfterDeleteHooks, networkSizeEstimateHook)
	case boil.AfterUpsertHook:
		networkSizeEstimateAfterUpsertHooks = append(networkSizeEstimateAfterUpsertHooks, networkSizeEstimateHook)
	}
}

// One returns a single networkSizeEstimate record from the query.
func (q networkSizeEstimateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NetworkSizeEstimate, error) {
	o := &NetworkSizeEstimate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for network_size_estimates")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all NetworkSizeEstimate records from the query.
func (q networkSizeEstimateQuery) All(ctx context.Context, exec boil.ContextExecutor) (NetworkSizeEstimateSlice, error) {
	var o []*NetworkSizeEstimate

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to NetworkSizeEstimate slice")
	}

	if len(networkSizeEstimateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all NetworkSizeEstimate records in the query.
func (q networkSizeEstimateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count network_size_estimates rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q networkSizeEstimateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if network_size_estimates exists")
	}

	return count > 0, nil
}

// Peer pointed to by the foreign key.
func (o *NetworkSizeEstimate) Peer(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PeerID),
	}

	queryMods = append(queryMods, mods...)

	query := Peers(queryMods...)
	queries.SetFrom(query.Query, "\"peers\"")

	return query
}

// LoadPeer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (networkSizeEstimateL) LoadPeer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNetworkSizeEstimate interface{}, mods queries.Applicator) error {
	var slice []*NetworkSizeEstimate
	var object *NetworkSizeEstimate

	if singular {
		object = maybeNetworkSizeEstimate.(*NetworkSizeEstimate)
	} else {
		slice = *maybeNetworkSizeEstimate.(*[]*NetworkSizeEstimate)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &networkSizeEstimateR{}
		}
		args = append(args, object.PeerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &networkSizeEstimateR{}
			}

			for _, a := range args {
				if a == obj.PeerID {
					continue Outer
				}
			}

			args = append(args, obj.PeerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(networkSizeEstimateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Peer = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.NetworkSizeEstimates = append(foreign.R.NetworkSizeEstimates, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PeerID == foreign.ID {
				local.R.Peer = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.NetworkSizeEstimates = append(foreign.R.NetworkSizeEstimates, local)
				break
			}
		}
	}

	return nil
}

// SetPeer of the networkSizeEstimate to the related item.
// Sets o.R.Peer to related.
// Adds o to related.R.NetworkSizeEstimates.
func (o *NetworkSizeEstimate) SetPeer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"network_size_estimates\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"peer_id"}),
		strmangle.WhereClause("\"", "\"", 2, networkSizeEstimatePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PeerID = related.ID
	if o.R == nil {
		o.R = &networkSizeEstimateR{
			Peer: related,
		}
	} else {
		o.R.Peer = related
	}

	if related.R == nil {
		related.R = &peerR{
			NetworkSizeEstimates: NetworkSizeEstimateSlice{o},
		}
	} else {
		related.R.NetworkSizeEstimates = append(related.R.NetworkSizeEstimates, o)
	}

	return nil
}

// NetworkSizeEstimates retrieves all the records using an executor.
func NetworkSizeEstimates(mods ...qm.QueryMod) networkSizeEstimateQuery {
	mods = append(mods, qm.From("\"network_size_estimates\""))
	return networkSizeEstimateQuery{NewQuery(mods...)}
}

// FindNetworkSizeEstimate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNetworkSizeEstimate(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*NetworkSizeEstimate, error) {
	networkSizeEstimateObj := &NetworkSizeEstimate{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"network_size_estimates\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, networkSizeEstimateObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from network_size_estimates")
	}

	if err = networkSizeEstimateObj.doAfterSelectHooks(ctx, exec); err != nil {
		return networkSizeEstimateObj, err
	}

	return networkSizeEstimateObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NetworkSizeEstimate) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no network_size_estimates provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(networkSizeEstimateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	networkSizeEstimateInsertCacheMut.RLock()
	cache, cached := networkSizeEstimateInsertCache[key]
	networkSizeEstimateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			networkSizeEstimateAllColumns,
			networkSizeEstimateColumnsWithDefault,
			networkSizeEstimateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(networkSizeEstimateType, networkSizeEstimateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(networkSizeEstimateType, networkSizeEstimateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"network_size_estimates\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"network_size_estimates\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into network_size_estimates")
	}

	if !cached {
		networkSizeEstimateInsertCacheMut.Lock()
		networkSizeEstimateInsertCache[key] = cache
		networkSizeEstimateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the NetworkSizeEstimate.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NetworkSizeEstimate) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	networkSizeEstimateUpdateCacheMut.RLock()
	cache, cached := networkSizeEstimateUpdateCache[key]
	networkSizeEstimateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			networkSizeEstimateAllColumns,
			networkSizeEstimatePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update network_size_estimates, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"network_size_estimates\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, networkSizeEstimatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(networkSizeEstimateType, networkSizeEstimateMapping, append(wl, networkSizeEstimatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update network_size_estimates row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for network_size_estimates")
	}

	if !cached {
		networkSizeEstimateUpdateCacheMut.Lock()
		networkSizeEstimateUpdateCache[key] = cache
		networkSizeEstimateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q networkSizeEstimateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for network_size_estimates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for network_size_estimates")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NetworkSizeEstimateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), networkSizeEstimatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"network_size_estimates\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, networkSizeEstimatePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in networkSizeEstimate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all networkSizeEstimate")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *NetworkSizeEstimate) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no network_size_estimates provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(networkSizeEstimateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	networkSizeEstimateUpsertCacheMut.RLock()
	cache, cached := networkSizeEstimateUpsertCache[key]
	networkSizeEstimateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			networkSizeEstimateAllColumns,
			networkSizeEstimateColumnsWithDefault,
			networkSizeEstimateColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			networkSizeEstimateAllColumns,
			networkSizeEstimatePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert network_size_estimates, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(networkSizeEstimatePrimaryKeyColumns))
			copy(conflict, networkSizeEstimatePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"network_size_estimates\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(networkSizeEstimateType, networkSizeEstimateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(networkSizeEstimateType, networkSizeEstimateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert network_size_estimates")
	}

	if !cached {
		networkSizeEstimateUpsertCacheMut.Lock()
		networkSizeEstimateUpsertCache[key] = cache
		networkSizeEstimateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single NetworkSizeEstimate record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NetworkSizeEstimate) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no NetworkSizeEstimate provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), networkSizeEstimatePrimaryKeyMapping)
	sql := "DELETE FROM \"network_size_estimates\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from network_size_estimates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for network_size_estimates")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q networkSizeEstimateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no networkSizeEstimateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from network_size_estimates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for network_size_estimates")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NetworkSizeEstimateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(networkSizeEstimateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), networkSizeEstimatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"network_size_estimates\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, networkSizeEstimatePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from networkSizeEstimate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for network_size_estimates")
	}

	if len(networkSizeEstimateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NetworkSizeEstimate) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNetworkSizeEstimate(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NetworkSizeEstimateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NetworkSizeEstimateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), networkSizeEstimatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"network_size_estimates\".* FROM \"network_size_estimates\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, networkSizeEstimatePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NetworkSizeEstimateSlice")
	}

	*o = slice

	return nil
}

// NetworkSizeEstimateExists checks if the NetworkSizeEstimate row exists.
func NetworkSizeEstimateExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"network_size_estimates\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if network_size_estimates exists")
	}

	return exists, nil
}
