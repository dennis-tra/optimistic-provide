// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GetProvidersRPC is an object representing the database table.
type GetProvidersRPC struct {
	ID                 int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	LocalID            int         `boil:"local_id" json:"local_id" toml:"local_id" yaml:"local_id"`
	RemoteID           int         `boil:"remote_id" json:"remote_id" toml:"remote_id" yaml:"remote_id"`
	StartedAt          time.Time   `boil:"started_at" json:"started_at" toml:"started_at" yaml:"started_at"`
	EndedAt            time.Time   `boil:"ended_at" json:"ended_at" toml:"ended_at" yaml:"ended_at"`
	ProviderPeersCount null.Int    `boil:"provider_peers_count" json:"provider_peers_count,omitempty" toml:"provider_peers_count" yaml:"provider_peers_count,omitempty"`
	Error              null.String `boil:"error" json:"error,omitempty" toml:"error" yaml:"error,omitempty"`

	R *getProvidersRPCR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L getProvidersRPCL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GetProvidersRPCColumns = struct {
	ID                 string
	LocalID            string
	RemoteID           string
	StartedAt          string
	EndedAt            string
	ProviderPeersCount string
	Error              string
}{
	ID:                 "id",
	LocalID:            "local_id",
	RemoteID:           "remote_id",
	StartedAt:          "started_at",
	EndedAt:            "ended_at",
	ProviderPeersCount: "provider_peers_count",
	Error:              "error",
}

var GetProvidersRPCTableColumns = struct {
	ID                 string
	LocalID            string
	RemoteID           string
	StartedAt          string
	EndedAt            string
	ProviderPeersCount string
	Error              string
}{
	ID:                 "get_providers_rpcs.id",
	LocalID:            "get_providers_rpcs.local_id",
	RemoteID:           "get_providers_rpcs.remote_id",
	StartedAt:          "get_providers_rpcs.started_at",
	EndedAt:            "get_providers_rpcs.ended_at",
	ProviderPeersCount: "get_providers_rpcs.provider_peers_count",
	Error:              "get_providers_rpcs.error",
}

// Generated where

var GetProvidersRPCWhere = struct {
	ID                 whereHelperint
	LocalID            whereHelperint
	RemoteID           whereHelperint
	StartedAt          whereHelpertime_Time
	EndedAt            whereHelpertime_Time
	ProviderPeersCount whereHelpernull_Int
	Error              whereHelpernull_String
}{
	ID:                 whereHelperint{field: "\"get_providers_rpcs\".\"id\""},
	LocalID:            whereHelperint{field: "\"get_providers_rpcs\".\"local_id\""},
	RemoteID:           whereHelperint{field: "\"get_providers_rpcs\".\"remote_id\""},
	StartedAt:          whereHelpertime_Time{field: "\"get_providers_rpcs\".\"started_at\""},
	EndedAt:            whereHelpertime_Time{field: "\"get_providers_rpcs\".\"ended_at\""},
	ProviderPeersCount: whereHelpernull_Int{field: "\"get_providers_rpcs\".\"provider_peers_count\""},
	Error:              whereHelpernull_String{field: "\"get_providers_rpcs\".\"error\""},
}

// GetProvidersRPCRels is where relationship names are stored.
var GetProvidersRPCRels = struct {
	Local         string
	Remote        string
	ProviderPeers string
	Retrievals    string
}{
	Local:         "Local",
	Remote:        "Remote",
	ProviderPeers: "ProviderPeers",
	Retrievals:    "Retrievals",
}

// getProvidersRPCR is where relationships are stored.
type getProvidersRPCR struct {
	Local         *Peer             `boil:"Local" json:"Local" toml:"Local" yaml:"Local"`
	Remote        *Peer             `boil:"Remote" json:"Remote" toml:"Remote" yaml:"Remote"`
	ProviderPeers ProviderPeerSlice `boil:"ProviderPeers" json:"ProviderPeers" toml:"ProviderPeers" yaml:"ProviderPeers"`
	Retrievals    RetrievalSlice    `boil:"Retrievals" json:"Retrievals" toml:"Retrievals" yaml:"Retrievals"`
}

// NewStruct creates a new relationship struct
func (*getProvidersRPCR) NewStruct() *getProvidersRPCR {
	return &getProvidersRPCR{}
}

// getProvidersRPCL is where Load methods for each relationship are stored.
type getProvidersRPCL struct{}

var (
	getProvidersRPCAllColumns            = []string{"id", "local_id", "remote_id", "started_at", "ended_at", "provider_peers_count", "error"}
	getProvidersRPCColumnsWithoutDefault = []string{"local_id", "remote_id", "started_at", "ended_at", "provider_peers_count", "error"}
	getProvidersRPCColumnsWithDefault    = []string{"id"}
	getProvidersRPCPrimaryKeyColumns     = []string{"id"}
)

type (
	// GetProvidersRPCSlice is an alias for a slice of pointers to GetProvidersRPC.
	// This should almost always be used instead of []GetProvidersRPC.
	GetProvidersRPCSlice []*GetProvidersRPC
	// GetProvidersRPCHook is the signature for custom GetProvidersRPC hook methods
	GetProvidersRPCHook func(context.Context, boil.ContextExecutor, *GetProvidersRPC) error

	getProvidersRPCQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	getProvidersRPCType                 = reflect.TypeOf(&GetProvidersRPC{})
	getProvidersRPCMapping              = queries.MakeStructMapping(getProvidersRPCType)
	getProvidersRPCPrimaryKeyMapping, _ = queries.BindMapping(getProvidersRPCType, getProvidersRPCMapping, getProvidersRPCPrimaryKeyColumns)
	getProvidersRPCInsertCacheMut       sync.RWMutex
	getProvidersRPCInsertCache          = make(map[string]insertCache)
	getProvidersRPCUpdateCacheMut       sync.RWMutex
	getProvidersRPCUpdateCache          = make(map[string]updateCache)
	getProvidersRPCUpsertCacheMut       sync.RWMutex
	getProvidersRPCUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var getProvidersRPCBeforeInsertHooks []GetProvidersRPCHook
var getProvidersRPCBeforeUpdateHooks []GetProvidersRPCHook
var getProvidersRPCBeforeDeleteHooks []GetProvidersRPCHook
var getProvidersRPCBeforeUpsertHooks []GetProvidersRPCHook

var getProvidersRPCAfterInsertHooks []GetProvidersRPCHook
var getProvidersRPCAfterSelectHooks []GetProvidersRPCHook
var getProvidersRPCAfterUpdateHooks []GetProvidersRPCHook
var getProvidersRPCAfterDeleteHooks []GetProvidersRPCHook
var getProvidersRPCAfterUpsertHooks []GetProvidersRPCHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GetProvidersRPC) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range getProvidersRPCBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GetProvidersRPC) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range getProvidersRPCBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GetProvidersRPC) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range getProvidersRPCBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GetProvidersRPC) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range getProvidersRPCBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GetProvidersRPC) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range getProvidersRPCAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GetProvidersRPC) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range getProvidersRPCAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GetProvidersRPC) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range getProvidersRPCAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GetProvidersRPC) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range getProvidersRPCAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GetProvidersRPC) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range getProvidersRPCAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGetProvidersRPCHook registers your hook function for all future operations.
func AddGetProvidersRPCHook(hookPoint boil.HookPoint, getProvidersRPCHook GetProvidersRPCHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		getProvidersRPCBeforeInsertHooks = append(getProvidersRPCBeforeInsertHooks, getProvidersRPCHook)
	case boil.BeforeUpdateHook:
		getProvidersRPCBeforeUpdateHooks = append(getProvidersRPCBeforeUpdateHooks, getProvidersRPCHook)
	case boil.BeforeDeleteHook:
		getProvidersRPCBeforeDeleteHooks = append(getProvidersRPCBeforeDeleteHooks, getProvidersRPCHook)
	case boil.BeforeUpsertHook:
		getProvidersRPCBeforeUpsertHooks = append(getProvidersRPCBeforeUpsertHooks, getProvidersRPCHook)
	case boil.AfterInsertHook:
		getProvidersRPCAfterInsertHooks = append(getProvidersRPCAfterInsertHooks, getProvidersRPCHook)
	case boil.AfterSelectHook:
		getProvidersRPCAfterSelectHooks = append(getProvidersRPCAfterSelectHooks, getProvidersRPCHook)
	case boil.AfterUpdateHook:
		getProvidersRPCAfterUpdateHooks = append(getProvidersRPCAfterUpdateHooks, getProvidersRPCHook)
	case boil.AfterDeleteHook:
		getProvidersRPCAfterDeleteHooks = append(getProvidersRPCAfterDeleteHooks, getProvidersRPCHook)
	case boil.AfterUpsertHook:
		getProvidersRPCAfterUpsertHooks = append(getProvidersRPCAfterUpsertHooks, getProvidersRPCHook)
	}
}

// One returns a single getProvidersRPC record from the query.
func (q getProvidersRPCQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GetProvidersRPC, error) {
	o := &GetProvidersRPC{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for get_providers_rpcs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GetProvidersRPC records from the query.
func (q getProvidersRPCQuery) All(ctx context.Context, exec boil.ContextExecutor) (GetProvidersRPCSlice, error) {
	var o []*GetProvidersRPC

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GetProvidersRPC slice")
	}

	if len(getProvidersRPCAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GetProvidersRPC records in the query.
func (q getProvidersRPCQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count get_providers_rpcs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q getProvidersRPCQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if get_providers_rpcs exists")
	}

	return count > 0, nil
}

// Local pointed to by the foreign key.
func (o *GetProvidersRPC) Local(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LocalID),
	}

	queryMods = append(queryMods, mods...)

	query := Peers(queryMods...)
	queries.SetFrom(query.Query, "\"peers\"")

	return query
}

// Remote pointed to by the foreign key.
func (o *GetProvidersRPC) Remote(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RemoteID),
	}

	queryMods = append(queryMods, mods...)

	query := Peers(queryMods...)
	queries.SetFrom(query.Query, "\"peers\"")

	return query
}

// ProviderPeers retrieves all the provider_peer's ProviderPeers with an executor.
func (o *GetProvidersRPC) ProviderPeers(mods ...qm.QueryMod) providerPeerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"provider_peers\".\"get_providers_rpc_id\"=?", o.ID),
	)

	query := ProviderPeers(queryMods...)
	queries.SetFrom(query.Query, "\"provider_peers\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"provider_peers\".*"})
	}

	return query
}

// Retrievals retrieves all the retrieval's Retrievals with an executor.
func (o *GetProvidersRPC) Retrievals(mods ...qm.QueryMod) retrievalQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"retrievals_x_get_providers_rpcs\" on \"retrievals\".\"id\" = \"retrievals_x_get_providers_rpcs\".\"retrieval_id\""),
		qm.Where("\"retrievals_x_get_providers_rpcs\".\"get_providers_rpc_id\"=?", o.ID),
	)

	query := Retrievals(queryMods...)
	queries.SetFrom(query.Query, "\"retrievals\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"retrievals\".*"})
	}

	return query
}

// LoadLocal allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (getProvidersRPCL) LoadLocal(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGetProvidersRPC interface{}, mods queries.Applicator) error {
	var slice []*GetProvidersRPC
	var object *GetProvidersRPC

	if singular {
		object = maybeGetProvidersRPC.(*GetProvidersRPC)
	} else {
		slice = *maybeGetProvidersRPC.(*[]*GetProvidersRPC)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &getProvidersRPCR{}
		}
		args = append(args, object.LocalID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &getProvidersRPCR{}
			}

			for _, a := range args {
				if a == obj.LocalID {
					continue Outer
				}
			}

			args = append(args, obj.LocalID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(getProvidersRPCAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Local = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.LocalGetProvidersRPCS = append(foreign.R.LocalGetProvidersRPCS, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LocalID == foreign.ID {
				local.R.Local = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.LocalGetProvidersRPCS = append(foreign.R.LocalGetProvidersRPCS, local)
				break
			}
		}
	}

	return nil
}

// LoadRemote allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (getProvidersRPCL) LoadRemote(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGetProvidersRPC interface{}, mods queries.Applicator) error {
	var slice []*GetProvidersRPC
	var object *GetProvidersRPC

	if singular {
		object = maybeGetProvidersRPC.(*GetProvidersRPC)
	} else {
		slice = *maybeGetProvidersRPC.(*[]*GetProvidersRPC)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &getProvidersRPCR{}
		}
		args = append(args, object.RemoteID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &getProvidersRPCR{}
			}

			for _, a := range args {
				if a == obj.RemoteID {
					continue Outer
				}
			}

			args = append(args, obj.RemoteID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(getProvidersRPCAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Remote = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.RemoteGetProvidersRPCS = append(foreign.R.RemoteGetProvidersRPCS, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RemoteID == foreign.ID {
				local.R.Remote = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.RemoteGetProvidersRPCS = append(foreign.R.RemoteGetProvidersRPCS, local)
				break
			}
		}
	}

	return nil
}

// LoadProviderPeers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (getProvidersRPCL) LoadProviderPeers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGetProvidersRPC interface{}, mods queries.Applicator) error {
	var slice []*GetProvidersRPC
	var object *GetProvidersRPC

	if singular {
		object = maybeGetProvidersRPC.(*GetProvidersRPC)
	} else {
		slice = *maybeGetProvidersRPC.(*[]*GetProvidersRPC)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &getProvidersRPCR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &getProvidersRPCR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`provider_peers`),
		qm.WhereIn(`provider_peers.get_providers_rpc_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load provider_peers")
	}

	var resultSlice []*ProviderPeer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice provider_peers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on provider_peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for provider_peers")
	}

	if len(providerPeerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProviderPeers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &providerPeerR{}
			}
			foreign.R.GetProvidersRPC = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GetProvidersRPCID {
				local.R.ProviderPeers = append(local.R.ProviderPeers, foreign)
				if foreign.R == nil {
					foreign.R = &providerPeerR{}
				}
				foreign.R.GetProvidersRPC = local
				break
			}
		}
	}

	return nil
}

// LoadRetrievals allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (getProvidersRPCL) LoadRetrievals(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGetProvidersRPC interface{}, mods queries.Applicator) error {
	var slice []*GetProvidersRPC
	var object *GetProvidersRPC

	if singular {
		object = maybeGetProvidersRPC.(*GetProvidersRPC)
	} else {
		slice = *maybeGetProvidersRPC.(*[]*GetProvidersRPC)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &getProvidersRPCR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &getProvidersRPCR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"retrievals\".id, \"retrievals\".retriever_id, \"retrievals\".content_id, \"retrievals\".distance, \"retrievals\".initial_routing_table_id, \"retrievals\".final_routing_table_id, \"retrievals\".started_at, \"retrievals\".ended_at, \"retrievals\".error, \"retrievals\".done_at, \"retrievals\".updated_at, \"retrievals\".created_at, \"a\".\"get_providers_rpc_id\""),
		qm.From("\"retrievals\""),
		qm.InnerJoin("\"retrievals_x_get_providers_rpcs\" as \"a\" on \"retrievals\".\"id\" = \"a\".\"retrieval_id\""),
		qm.WhereIn("\"a\".\"get_providers_rpc_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load retrievals")
	}

	var resultSlice []*Retrieval

	var localJoinCols []int
	for results.Next() {
		one := new(Retrieval)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.RetrieverID, &one.ContentID, &one.Distance, &one.InitialRoutingTableID, &one.FinalRoutingTableID, &one.StartedAt, &one.EndedAt, &one.Error, &one.DoneAt, &one.UpdatedAt, &one.CreatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for retrievals")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice retrievals")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on retrievals")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for retrievals")
	}

	if len(retrievalAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Retrievals = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &retrievalR{}
			}
			foreign.R.GetProvidersRPCS = append(foreign.R.GetProvidersRPCS, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Retrievals = append(local.R.Retrievals, foreign)
				if foreign.R == nil {
					foreign.R = &retrievalR{}
				}
				foreign.R.GetProvidersRPCS = append(foreign.R.GetProvidersRPCS, local)
				break
			}
		}
	}

	return nil
}

// SetLocal of the getProvidersRPC to the related item.
// Sets o.R.Local to related.
// Adds o to related.R.LocalGetProvidersRPCS.
func (o *GetProvidersRPC) SetLocal(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"get_providers_rpcs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"local_id"}),
		strmangle.WhereClause("\"", "\"", 2, getProvidersRPCPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LocalID = related.ID
	if o.R == nil {
		o.R = &getProvidersRPCR{
			Local: related,
		}
	} else {
		o.R.Local = related
	}

	if related.R == nil {
		related.R = &peerR{
			LocalGetProvidersRPCS: GetProvidersRPCSlice{o},
		}
	} else {
		related.R.LocalGetProvidersRPCS = append(related.R.LocalGetProvidersRPCS, o)
	}

	return nil
}

// SetRemote of the getProvidersRPC to the related item.
// Sets o.R.Remote to related.
// Adds o to related.R.RemoteGetProvidersRPCS.
func (o *GetProvidersRPC) SetRemote(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"get_providers_rpcs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"remote_id"}),
		strmangle.WhereClause("\"", "\"", 2, getProvidersRPCPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RemoteID = related.ID
	if o.R == nil {
		o.R = &getProvidersRPCR{
			Remote: related,
		}
	} else {
		o.R.Remote = related
	}

	if related.R == nil {
		related.R = &peerR{
			RemoteGetProvidersRPCS: GetProvidersRPCSlice{o},
		}
	} else {
		related.R.RemoteGetProvidersRPCS = append(related.R.RemoteGetProvidersRPCS, o)
	}

	return nil
}

// AddProviderPeers adds the given related objects to the existing relationships
// of the get_providers_rpc, optionally inserting them as new records.
// Appends related to o.R.ProviderPeers.
// Sets related.R.GetProvidersRPC appropriately.
func (o *GetProvidersRPC) AddProviderPeers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProviderPeer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GetProvidersRPCID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"provider_peers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"get_providers_rpc_id"}),
				strmangle.WhereClause("\"", "\"", 2, providerPeerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GetProvidersRPCID = o.ID
		}
	}

	if o.R == nil {
		o.R = &getProvidersRPCR{
			ProviderPeers: related,
		}
	} else {
		o.R.ProviderPeers = append(o.R.ProviderPeers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &providerPeerR{
				GetProvidersRPC: o,
			}
		} else {
			rel.R.GetProvidersRPC = o
		}
	}
	return nil
}

// AddRetrievals adds the given related objects to the existing relationships
// of the get_providers_rpc, optionally inserting them as new records.
// Appends related to o.R.Retrievals.
// Sets related.R.GetProvidersRPCS appropriately.
func (o *GetProvidersRPC) AddRetrievals(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Retrieval) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"retrievals_x_get_providers_rpcs\" (\"get_providers_rpc_id\", \"retrieval_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &getProvidersRPCR{
			Retrievals: related,
		}
	} else {
		o.R.Retrievals = append(o.R.Retrievals, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &retrievalR{
				GetProvidersRPCS: GetProvidersRPCSlice{o},
			}
		} else {
			rel.R.GetProvidersRPCS = append(rel.R.GetProvidersRPCS, o)
		}
	}
	return nil
}

// SetRetrievals removes all previously related items of the
// get_providers_rpc replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.GetProvidersRPCS's Retrievals accordingly.
// Replaces o.R.Retrievals with related.
// Sets related.R.GetProvidersRPCS's Retrievals accordingly.
func (o *GetProvidersRPC) SetRetrievals(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Retrieval) error {
	query := "delete from \"retrievals_x_get_providers_rpcs\" where \"get_providers_rpc_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeRetrievalsFromGetProvidersRPCSSlice(o, related)
	if o.R != nil {
		o.R.Retrievals = nil
	}
	return o.AddRetrievals(ctx, exec, insert, related...)
}

// RemoveRetrievals relationships from objects passed in.
// Removes related items from R.Retrievals (uses pointer comparison, removal does not keep order)
// Sets related.R.GetProvidersRPCS.
func (o *GetProvidersRPC) RemoveRetrievals(ctx context.Context, exec boil.ContextExecutor, related ...*Retrieval) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"retrievals_x_get_providers_rpcs\" where \"get_providers_rpc_id\" = $1 and \"retrieval_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeRetrievalsFromGetProvidersRPCSSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Retrievals {
			if rel != ri {
				continue
			}

			ln := len(o.R.Retrievals)
			if ln > 1 && i < ln-1 {
				o.R.Retrievals[i] = o.R.Retrievals[ln-1]
			}
			o.R.Retrievals = o.R.Retrievals[:ln-1]
			break
		}
	}

	return nil
}

func removeRetrievalsFromGetProvidersRPCSSlice(o *GetProvidersRPC, related []*Retrieval) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.GetProvidersRPCS {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.GetProvidersRPCS)
			if ln > 1 && i < ln-1 {
				rel.R.GetProvidersRPCS[i] = rel.R.GetProvidersRPCS[ln-1]
			}
			rel.R.GetProvidersRPCS = rel.R.GetProvidersRPCS[:ln-1]
			break
		}
	}
}

// GetProvidersRPCS retrieves all the records using an executor.
func GetProvidersRPCS(mods ...qm.QueryMod) getProvidersRPCQuery {
	mods = append(mods, qm.From("\"get_providers_rpcs\""))
	return getProvidersRPCQuery{NewQuery(mods...)}
}

// FindGetProvidersRPC retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGetProvidersRPC(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*GetProvidersRPC, error) {
	getProvidersRPCObj := &GetProvidersRPC{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"get_providers_rpcs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, getProvidersRPCObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from get_providers_rpcs")
	}

	if err = getProvidersRPCObj.doAfterSelectHooks(ctx, exec); err != nil {
		return getProvidersRPCObj, err
	}

	return getProvidersRPCObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GetProvidersRPC) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no get_providers_rpcs provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(getProvidersRPCColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	getProvidersRPCInsertCacheMut.RLock()
	cache, cached := getProvidersRPCInsertCache[key]
	getProvidersRPCInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			getProvidersRPCAllColumns,
			getProvidersRPCColumnsWithDefault,
			getProvidersRPCColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(getProvidersRPCType, getProvidersRPCMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(getProvidersRPCType, getProvidersRPCMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"get_providers_rpcs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"get_providers_rpcs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into get_providers_rpcs")
	}

	if !cached {
		getProvidersRPCInsertCacheMut.Lock()
		getProvidersRPCInsertCache[key] = cache
		getProvidersRPCInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GetProvidersRPC.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GetProvidersRPC) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	getProvidersRPCUpdateCacheMut.RLock()
	cache, cached := getProvidersRPCUpdateCache[key]
	getProvidersRPCUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			getProvidersRPCAllColumns,
			getProvidersRPCPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update get_providers_rpcs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"get_providers_rpcs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, getProvidersRPCPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(getProvidersRPCType, getProvidersRPCMapping, append(wl, getProvidersRPCPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update get_providers_rpcs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for get_providers_rpcs")
	}

	if !cached {
		getProvidersRPCUpdateCacheMut.Lock()
		getProvidersRPCUpdateCache[key] = cache
		getProvidersRPCUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q getProvidersRPCQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for get_providers_rpcs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for get_providers_rpcs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GetProvidersRPCSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), getProvidersRPCPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"get_providers_rpcs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, getProvidersRPCPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in getProvidersRPC slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all getProvidersRPC")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GetProvidersRPC) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no get_providers_rpcs provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(getProvidersRPCColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	getProvidersRPCUpsertCacheMut.RLock()
	cache, cached := getProvidersRPCUpsertCache[key]
	getProvidersRPCUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			getProvidersRPCAllColumns,
			getProvidersRPCColumnsWithDefault,
			getProvidersRPCColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			getProvidersRPCAllColumns,
			getProvidersRPCPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert get_providers_rpcs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(getProvidersRPCPrimaryKeyColumns))
			copy(conflict, getProvidersRPCPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"get_providers_rpcs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(getProvidersRPCType, getProvidersRPCMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(getProvidersRPCType, getProvidersRPCMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert get_providers_rpcs")
	}

	if !cached {
		getProvidersRPCUpsertCacheMut.Lock()
		getProvidersRPCUpsertCache[key] = cache
		getProvidersRPCUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GetProvidersRPC record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GetProvidersRPC) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GetProvidersRPC provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), getProvidersRPCPrimaryKeyMapping)
	sql := "DELETE FROM \"get_providers_rpcs\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from get_providers_rpcs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for get_providers_rpcs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q getProvidersRPCQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no getProvidersRPCQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from get_providers_rpcs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for get_providers_rpcs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GetProvidersRPCSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(getProvidersRPCBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), getProvidersRPCPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"get_providers_rpcs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, getProvidersRPCPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from getProvidersRPC slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for get_providers_rpcs")
	}

	if len(getProvidersRPCAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GetProvidersRPC) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGetProvidersRPC(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GetProvidersRPCSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GetProvidersRPCSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), getProvidersRPCPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"get_providers_rpcs\".* FROM \"get_providers_rpcs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, getProvidersRPCPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GetProvidersRPCSlice")
	}

	*o = slice

	return nil
}

// GetProvidersRPCExists checks if the GetProvidersRPC row exists.
func GetProvidersRPCExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"get_providers_rpcs\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if get_providers_rpcs exists")
	}

	return exists, nil
}
