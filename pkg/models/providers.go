// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Provider is an object representing the database table.
type Provider struct {
	ID              int              `boil:"id" json:"id" toml:"id" yaml:"id"`
	RetrievalID     int              `boil:"retrieval_id" json:"retrieval_id" toml:"retrieval_id" yaml:"retrieval_id"`
	RemoteID        int              `boil:"remote_id" json:"remote_id" toml:"remote_id" yaml:"remote_id"`
	MultiAddressIds types.Int64Array `boil:"multi_address_ids" json:"multi_address_ids" toml:"multi_address_ids" yaml:"multi_address_ids"`
	FoundAt         time.Time        `boil:"found_at" json:"found_at" toml:"found_at" yaml:"found_at"`

	R *providerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L providerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProviderColumns = struct {
	ID              string
	RetrievalID     string
	RemoteID        string
	MultiAddressIds string
	FoundAt         string
}{
	ID:              "id",
	RetrievalID:     "retrieval_id",
	RemoteID:        "remote_id",
	MultiAddressIds: "multi_address_ids",
	FoundAt:         "found_at",
}

var ProviderTableColumns = struct {
	ID              string
	RetrievalID     string
	RemoteID        string
	MultiAddressIds string
	FoundAt         string
}{
	ID:              "providers.id",
	RetrievalID:     "providers.retrieval_id",
	RemoteID:        "providers.remote_id",
	MultiAddressIds: "providers.multi_address_ids",
	FoundAt:         "providers.found_at",
}

// Generated where

var ProviderWhere = struct {
	ID              whereHelperint
	RetrievalID     whereHelperint
	RemoteID        whereHelperint
	MultiAddressIds whereHelpertypes_Int64Array
	FoundAt         whereHelpertime_Time
}{
	ID:              whereHelperint{field: "\"providers\".\"id\""},
	RetrievalID:     whereHelperint{field: "\"providers\".\"retrieval_id\""},
	RemoteID:        whereHelperint{field: "\"providers\".\"remote_id\""},
	MultiAddressIds: whereHelpertypes_Int64Array{field: "\"providers\".\"multi_address_ids\""},
	FoundAt:         whereHelpertime_Time{field: "\"providers\".\"found_at\""},
}

// ProviderRels is where relationship names are stored.
var ProviderRels = struct {
	Remote    string
	Retrieval string
}{
	Remote:    "Remote",
	Retrieval: "Retrieval",
}

// providerR is where relationships are stored.
type providerR struct {
	Remote    *Peer      `boil:"Remote" json:"Remote" toml:"Remote" yaml:"Remote"`
	Retrieval *Retrieval `boil:"Retrieval" json:"Retrieval" toml:"Retrieval" yaml:"Retrieval"`
}

// NewStruct creates a new relationship struct
func (*providerR) NewStruct() *providerR {
	return &providerR{}
}

// providerL is where Load methods for each relationship are stored.
type providerL struct{}

var (
	providerAllColumns            = []string{"id", "retrieval_id", "remote_id", "multi_address_ids", "found_at"}
	providerColumnsWithoutDefault = []string{"retrieval_id", "remote_id", "multi_address_ids", "found_at"}
	providerColumnsWithDefault    = []string{"id"}
	providerPrimaryKeyColumns     = []string{"id"}
)

type (
	// ProviderSlice is an alias for a slice of pointers to Provider.
	// This should almost always be used instead of []Provider.
	ProviderSlice []*Provider
	// ProviderHook is the signature for custom Provider hook methods
	ProviderHook func(context.Context, boil.ContextExecutor, *Provider) error

	providerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	providerType                 = reflect.TypeOf(&Provider{})
	providerMapping              = queries.MakeStructMapping(providerType)
	providerPrimaryKeyMapping, _ = queries.BindMapping(providerType, providerMapping, providerPrimaryKeyColumns)
	providerInsertCacheMut       sync.RWMutex
	providerInsertCache          = make(map[string]insertCache)
	providerUpdateCacheMut       sync.RWMutex
	providerUpdateCache          = make(map[string]updateCache)
	providerUpsertCacheMut       sync.RWMutex
	providerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var providerBeforeInsertHooks []ProviderHook
var providerBeforeUpdateHooks []ProviderHook
var providerBeforeDeleteHooks []ProviderHook
var providerBeforeUpsertHooks []ProviderHook

var providerAfterInsertHooks []ProviderHook
var providerAfterSelectHooks []ProviderHook
var providerAfterUpdateHooks []ProviderHook
var providerAfterDeleteHooks []ProviderHook
var providerAfterUpsertHooks []ProviderHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Provider) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range providerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Provider) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range providerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Provider) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range providerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Provider) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range providerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Provider) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range providerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Provider) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range providerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Provider) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range providerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Provider) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range providerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Provider) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range providerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProviderHook registers your hook function for all future operations.
func AddProviderHook(hookPoint boil.HookPoint, providerHook ProviderHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		providerBeforeInsertHooks = append(providerBeforeInsertHooks, providerHook)
	case boil.BeforeUpdateHook:
		providerBeforeUpdateHooks = append(providerBeforeUpdateHooks, providerHook)
	case boil.BeforeDeleteHook:
		providerBeforeDeleteHooks = append(providerBeforeDeleteHooks, providerHook)
	case boil.BeforeUpsertHook:
		providerBeforeUpsertHooks = append(providerBeforeUpsertHooks, providerHook)
	case boil.AfterInsertHook:
		providerAfterInsertHooks = append(providerAfterInsertHooks, providerHook)
	case boil.AfterSelectHook:
		providerAfterSelectHooks = append(providerAfterSelectHooks, providerHook)
	case boil.AfterUpdateHook:
		providerAfterUpdateHooks = append(providerAfterUpdateHooks, providerHook)
	case boil.AfterDeleteHook:
		providerAfterDeleteHooks = append(providerAfterDeleteHooks, providerHook)
	case boil.AfterUpsertHook:
		providerAfterUpsertHooks = append(providerAfterUpsertHooks, providerHook)
	}
}

// One returns a single provider record from the query.
func (q providerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Provider, error) {
	o := &Provider{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for providers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Provider records from the query.
func (q providerQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProviderSlice, error) {
	var o []*Provider

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Provider slice")
	}

	if len(providerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Provider records in the query.
func (q providerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count providers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q providerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if providers exists")
	}

	return count > 0, nil
}

// Remote pointed to by the foreign key.
func (o *Provider) Remote(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RemoteID),
	}

	queryMods = append(queryMods, mods...)

	query := Peers(queryMods...)
	queries.SetFrom(query.Query, "\"peers\"")

	return query
}

// Retrieval pointed to by the foreign key.
func (o *Provider) Retrieval(mods ...qm.QueryMod) retrievalQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RetrievalID),
	}

	queryMods = append(queryMods, mods...)

	query := Retrievals(queryMods...)
	queries.SetFrom(query.Query, "\"retrievals\"")

	return query
}

// LoadRemote allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (providerL) LoadRemote(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProvider interface{}, mods queries.Applicator) error {
	var slice []*Provider
	var object *Provider

	if singular {
		object = maybeProvider.(*Provider)
	} else {
		slice = *maybeProvider.(*[]*Provider)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &providerR{}
		}
		args = append(args, object.RemoteID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &providerR{}
			}

			for _, a := range args {
				if a == obj.RemoteID {
					continue Outer
				}
			}

			args = append(args, obj.RemoteID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(providerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Remote = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.RemoteProviders = append(foreign.R.RemoteProviders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RemoteID == foreign.ID {
				local.R.Remote = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.RemoteProviders = append(foreign.R.RemoteProviders, local)
				break
			}
		}
	}

	return nil
}

// LoadRetrieval allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (providerL) LoadRetrieval(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProvider interface{}, mods queries.Applicator) error {
	var slice []*Provider
	var object *Provider

	if singular {
		object = maybeProvider.(*Provider)
	} else {
		slice = *maybeProvider.(*[]*Provider)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &providerR{}
		}
		args = append(args, object.RetrievalID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &providerR{}
			}

			for _, a := range args {
				if a == obj.RetrievalID {
					continue Outer
				}
			}

			args = append(args, obj.RetrievalID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`retrievals`),
		qm.WhereIn(`retrievals.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Retrieval")
	}

	var resultSlice []*Retrieval
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Retrieval")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for retrievals")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for retrievals")
	}

	if len(providerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Retrieval = foreign
		if foreign.R == nil {
			foreign.R = &retrievalR{}
		}
		foreign.R.Providers = append(foreign.R.Providers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RetrievalID == foreign.ID {
				local.R.Retrieval = foreign
				if foreign.R == nil {
					foreign.R = &retrievalR{}
				}
				foreign.R.Providers = append(foreign.R.Providers, local)
				break
			}
		}
	}

	return nil
}

// SetRemote of the provider to the related item.
// Sets o.R.Remote to related.
// Adds o to related.R.RemoteProviders.
func (o *Provider) SetRemote(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"providers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"remote_id"}),
		strmangle.WhereClause("\"", "\"", 2, providerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RemoteID = related.ID
	if o.R == nil {
		o.R = &providerR{
			Remote: related,
		}
	} else {
		o.R.Remote = related
	}

	if related.R == nil {
		related.R = &peerR{
			RemoteProviders: ProviderSlice{o},
		}
	} else {
		related.R.RemoteProviders = append(related.R.RemoteProviders, o)
	}

	return nil
}

// SetRetrieval of the provider to the related item.
// Sets o.R.Retrieval to related.
// Adds o to related.R.Providers.
func (o *Provider) SetRetrieval(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Retrieval) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"providers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"retrieval_id"}),
		strmangle.WhereClause("\"", "\"", 2, providerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RetrievalID = related.ID
	if o.R == nil {
		o.R = &providerR{
			Retrieval: related,
		}
	} else {
		o.R.Retrieval = related
	}

	if related.R == nil {
		related.R = &retrievalR{
			Providers: ProviderSlice{o},
		}
	} else {
		related.R.Providers = append(related.R.Providers, o)
	}

	return nil
}

// Providers retrieves all the records using an executor.
func Providers(mods ...qm.QueryMod) providerQuery {
	mods = append(mods, qm.From("\"providers\""))
	return providerQuery{NewQuery(mods...)}
}

// FindProvider retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProvider(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Provider, error) {
	providerObj := &Provider{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"providers\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, providerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from providers")
	}

	if err = providerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return providerObj, err
	}

	return providerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Provider) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no providers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(providerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	providerInsertCacheMut.RLock()
	cache, cached := providerInsertCache[key]
	providerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			providerAllColumns,
			providerColumnsWithDefault,
			providerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(providerType, providerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(providerType, providerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"providers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"providers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into providers")
	}

	if !cached {
		providerInsertCacheMut.Lock()
		providerInsertCache[key] = cache
		providerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Provider.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Provider) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	providerUpdateCacheMut.RLock()
	cache, cached := providerUpdateCache[key]
	providerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			providerAllColumns,
			providerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update providers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"providers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, providerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(providerType, providerMapping, append(wl, providerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update providers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for providers")
	}

	if !cached {
		providerUpdateCacheMut.Lock()
		providerUpdateCache[key] = cache
		providerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q providerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for providers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for providers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProviderSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), providerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"providers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, providerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in provider slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all provider")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Provider) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no providers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(providerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	providerUpsertCacheMut.RLock()
	cache, cached := providerUpsertCache[key]
	providerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			providerAllColumns,
			providerColumnsWithDefault,
			providerColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			providerAllColumns,
			providerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert providers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(providerPrimaryKeyColumns))
			copy(conflict, providerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"providers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(providerType, providerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(providerType, providerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert providers")
	}

	if !cached {
		providerUpsertCacheMut.Lock()
		providerUpsertCache[key] = cache
		providerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Provider record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Provider) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Provider provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), providerPrimaryKeyMapping)
	sql := "DELETE FROM \"providers\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from providers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for providers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q providerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no providerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from providers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for providers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProviderSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(providerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), providerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"providers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, providerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from provider slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for providers")
	}

	if len(providerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Provider) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProvider(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProviderSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProviderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), providerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"providers\".* FROM \"providers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, providerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProviderSlice")
	}

	*o = slice

	return nil
}

// ProviderExists checks if the Provider row exists.
func ProviderExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"providers\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if providers exists")
	}

	return exists, nil
}
