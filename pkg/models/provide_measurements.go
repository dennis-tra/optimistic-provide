// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProvideMeasurement is an object representing the database table.
type ProvideMeasurement struct {
	ID          int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	HostID      int       `boil:"host_id" json:"host_id" toml:"host_id" yaml:"host_id"`
	StartedAt   time.Time `boil:"started_at" json:"started_at" toml:"started_at" yaml:"started_at"`
	EndedAt     null.Time `boil:"ended_at" json:"ended_at,omitempty" toml:"ended_at" yaml:"ended_at,omitempty"`
	ProvideType string    `boil:"provide_type" json:"provide_type" toml:"provide_type" yaml:"provide_type"`
	Iterations  int       `boil:"iterations" json:"iterations" toml:"iterations" yaml:"iterations"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *provideMeasurementR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L provideMeasurementL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProvideMeasurementColumns = struct {
	ID          string
	HostID      string
	StartedAt   string
	EndedAt     string
	ProvideType string
	Iterations  string
	UpdatedAt   string
	CreatedAt   string
}{
	ID:          "id",
	HostID:      "host_id",
	StartedAt:   "started_at",
	EndedAt:     "ended_at",
	ProvideType: "provide_type",
	Iterations:  "iterations",
	UpdatedAt:   "updated_at",
	CreatedAt:   "created_at",
}

var ProvideMeasurementTableColumns = struct {
	ID          string
	HostID      string
	StartedAt   string
	EndedAt     string
	ProvideType string
	Iterations  string
	UpdatedAt   string
	CreatedAt   string
}{
	ID:          "provide_measurements.id",
	HostID:      "provide_measurements.host_id",
	StartedAt:   "provide_measurements.started_at",
	EndedAt:     "provide_measurements.ended_at",
	ProvideType: "provide_measurements.provide_type",
	Iterations:  "provide_measurements.iterations",
	UpdatedAt:   "provide_measurements.updated_at",
	CreatedAt:   "provide_measurements.created_at",
}

// Generated where

var ProvideMeasurementWhere = struct {
	ID          whereHelperint
	HostID      whereHelperint
	StartedAt   whereHelpertime_Time
	EndedAt     whereHelpernull_Time
	ProvideType whereHelperstring
	Iterations  whereHelperint
	UpdatedAt   whereHelpertime_Time
	CreatedAt   whereHelpertime_Time
}{
	ID:          whereHelperint{field: "\"provide_measurements\".\"id\""},
	HostID:      whereHelperint{field: "\"provide_measurements\".\"host_id\""},
	StartedAt:   whereHelpertime_Time{field: "\"provide_measurements\".\"started_at\""},
	EndedAt:     whereHelpernull_Time{field: "\"provide_measurements\".\"ended_at\""},
	ProvideType: whereHelperstring{field: "\"provide_measurements\".\"provide_type\""},
	Iterations:  whereHelperint{field: "\"provide_measurements\".\"iterations\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"provide_measurements\".\"updated_at\""},
	CreatedAt:   whereHelpertime_Time{field: "\"provide_measurements\".\"created_at\""},
}

// ProvideMeasurementRels is where relationship names are stored.
var ProvideMeasurementRels = struct {
	Host string
}{
	Host: "Host",
}

// provideMeasurementR is where relationships are stored.
type provideMeasurementR struct {
	Host *Peer `boil:"Host" json:"Host" toml:"Host" yaml:"Host"`
}

// NewStruct creates a new relationship struct
func (*provideMeasurementR) NewStruct() *provideMeasurementR {
	return &provideMeasurementR{}
}

// provideMeasurementL is where Load methods for each relationship are stored.
type provideMeasurementL struct{}

var (
	provideMeasurementAllColumns            = []string{"id", "host_id", "started_at", "ended_at", "provide_type", "iterations", "updated_at", "created_at"}
	provideMeasurementColumnsWithoutDefault = []string{"host_id", "started_at", "ended_at", "provide_type", "iterations", "updated_at", "created_at"}
	provideMeasurementColumnsWithDefault    = []string{"id"}
	provideMeasurementPrimaryKeyColumns     = []string{"id"}
)

type (
	// ProvideMeasurementSlice is an alias for a slice of pointers to ProvideMeasurement.
	// This should almost always be used instead of []ProvideMeasurement.
	ProvideMeasurementSlice []*ProvideMeasurement
	// ProvideMeasurementHook is the signature for custom ProvideMeasurement hook methods
	ProvideMeasurementHook func(context.Context, boil.ContextExecutor, *ProvideMeasurement) error

	provideMeasurementQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	provideMeasurementType                 = reflect.TypeOf(&ProvideMeasurement{})
	provideMeasurementMapping              = queries.MakeStructMapping(provideMeasurementType)
	provideMeasurementPrimaryKeyMapping, _ = queries.BindMapping(provideMeasurementType, provideMeasurementMapping, provideMeasurementPrimaryKeyColumns)
	provideMeasurementInsertCacheMut       sync.RWMutex
	provideMeasurementInsertCache          = make(map[string]insertCache)
	provideMeasurementUpdateCacheMut       sync.RWMutex
	provideMeasurementUpdateCache          = make(map[string]updateCache)
	provideMeasurementUpsertCacheMut       sync.RWMutex
	provideMeasurementUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var provideMeasurementBeforeInsertHooks []ProvideMeasurementHook
var provideMeasurementBeforeUpdateHooks []ProvideMeasurementHook
var provideMeasurementBeforeDeleteHooks []ProvideMeasurementHook
var provideMeasurementBeforeUpsertHooks []ProvideMeasurementHook

var provideMeasurementAfterInsertHooks []ProvideMeasurementHook
var provideMeasurementAfterSelectHooks []ProvideMeasurementHook
var provideMeasurementAfterUpdateHooks []ProvideMeasurementHook
var provideMeasurementAfterDeleteHooks []ProvideMeasurementHook
var provideMeasurementAfterUpsertHooks []ProvideMeasurementHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProvideMeasurement) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provideMeasurementBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProvideMeasurement) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provideMeasurementBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProvideMeasurement) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provideMeasurementBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProvideMeasurement) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provideMeasurementBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProvideMeasurement) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provideMeasurementAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProvideMeasurement) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provideMeasurementAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProvideMeasurement) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provideMeasurementAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProvideMeasurement) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provideMeasurementAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProvideMeasurement) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provideMeasurementAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProvideMeasurementHook registers your hook function for all future operations.
func AddProvideMeasurementHook(hookPoint boil.HookPoint, provideMeasurementHook ProvideMeasurementHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		provideMeasurementBeforeInsertHooks = append(provideMeasurementBeforeInsertHooks, provideMeasurementHook)
	case boil.BeforeUpdateHook:
		provideMeasurementBeforeUpdateHooks = append(provideMeasurementBeforeUpdateHooks, provideMeasurementHook)
	case boil.BeforeDeleteHook:
		provideMeasurementBeforeDeleteHooks = append(provideMeasurementBeforeDeleteHooks, provideMeasurementHook)
	case boil.BeforeUpsertHook:
		provideMeasurementBeforeUpsertHooks = append(provideMeasurementBeforeUpsertHooks, provideMeasurementHook)
	case boil.AfterInsertHook:
		provideMeasurementAfterInsertHooks = append(provideMeasurementAfterInsertHooks, provideMeasurementHook)
	case boil.AfterSelectHook:
		provideMeasurementAfterSelectHooks = append(provideMeasurementAfterSelectHooks, provideMeasurementHook)
	case boil.AfterUpdateHook:
		provideMeasurementAfterUpdateHooks = append(provideMeasurementAfterUpdateHooks, provideMeasurementHook)
	case boil.AfterDeleteHook:
		provideMeasurementAfterDeleteHooks = append(provideMeasurementAfterDeleteHooks, provideMeasurementHook)
	case boil.AfterUpsertHook:
		provideMeasurementAfterUpsertHooks = append(provideMeasurementAfterUpsertHooks, provideMeasurementHook)
	}
}

// One returns a single provideMeasurement record from the query.
func (q provideMeasurementQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProvideMeasurement, error) {
	o := &ProvideMeasurement{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for provide_measurements")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProvideMeasurement records from the query.
func (q provideMeasurementQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProvideMeasurementSlice, error) {
	var o []*ProvideMeasurement

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProvideMeasurement slice")
	}

	if len(provideMeasurementAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProvideMeasurement records in the query.
func (q provideMeasurementQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count provide_measurements rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q provideMeasurementQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if provide_measurements exists")
	}

	return count > 0, nil
}

// Host pointed to by the foreign key.
func (o *ProvideMeasurement) Host(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.HostID),
	}

	queryMods = append(queryMods, mods...)

	query := Peers(queryMods...)
	queries.SetFrom(query.Query, "\"peers\"")

	return query
}

// LoadHost allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (provideMeasurementL) LoadHost(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProvideMeasurement interface{}, mods queries.Applicator) error {
	var slice []*ProvideMeasurement
	var object *ProvideMeasurement

	if singular {
		object = maybeProvideMeasurement.(*ProvideMeasurement)
	} else {
		slice = *maybeProvideMeasurement.(*[]*ProvideMeasurement)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &provideMeasurementR{}
		}
		args = append(args, object.HostID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &provideMeasurementR{}
			}

			for _, a := range args {
				if a == obj.HostID {
					continue Outer
				}
			}

			args = append(args, obj.HostID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(provideMeasurementAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Host = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.HostProvideMeasurements = append(foreign.R.HostProvideMeasurements, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.HostID == foreign.ID {
				local.R.Host = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.HostProvideMeasurements = append(foreign.R.HostProvideMeasurements, local)
				break
			}
		}
	}

	return nil
}

// SetHost of the provideMeasurement to the related item.
// Sets o.R.Host to related.
// Adds o to related.R.HostProvideMeasurements.
func (o *ProvideMeasurement) SetHost(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"provide_measurements\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"host_id"}),
		strmangle.WhereClause("\"", "\"", 2, provideMeasurementPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.HostID = related.ID
	if o.R == nil {
		o.R = &provideMeasurementR{
			Host: related,
		}
	} else {
		o.R.Host = related
	}

	if related.R == nil {
		related.R = &peerR{
			HostProvideMeasurements: ProvideMeasurementSlice{o},
		}
	} else {
		related.R.HostProvideMeasurements = append(related.R.HostProvideMeasurements, o)
	}

	return nil
}

// ProvideMeasurements retrieves all the records using an executor.
func ProvideMeasurements(mods ...qm.QueryMod) provideMeasurementQuery {
	mods = append(mods, qm.From("\"provide_measurements\""))
	return provideMeasurementQuery{NewQuery(mods...)}
}

// FindProvideMeasurement retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProvideMeasurement(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ProvideMeasurement, error) {
	provideMeasurementObj := &ProvideMeasurement{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"provide_measurements\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, provideMeasurementObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from provide_measurements")
	}

	if err = provideMeasurementObj.doAfterSelectHooks(ctx, exec); err != nil {
		return provideMeasurementObj, err
	}

	return provideMeasurementObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProvideMeasurement) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no provide_measurements provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(provideMeasurementColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	provideMeasurementInsertCacheMut.RLock()
	cache, cached := provideMeasurementInsertCache[key]
	provideMeasurementInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			provideMeasurementAllColumns,
			provideMeasurementColumnsWithDefault,
			provideMeasurementColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(provideMeasurementType, provideMeasurementMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(provideMeasurementType, provideMeasurementMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"provide_measurements\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"provide_measurements\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into provide_measurements")
	}

	if !cached {
		provideMeasurementInsertCacheMut.Lock()
		provideMeasurementInsertCache[key] = cache
		provideMeasurementInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProvideMeasurement.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProvideMeasurement) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	provideMeasurementUpdateCacheMut.RLock()
	cache, cached := provideMeasurementUpdateCache[key]
	provideMeasurementUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			provideMeasurementAllColumns,
			provideMeasurementPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update provide_measurements, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"provide_measurements\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, provideMeasurementPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(provideMeasurementType, provideMeasurementMapping, append(wl, provideMeasurementPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update provide_measurements row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for provide_measurements")
	}

	if !cached {
		provideMeasurementUpdateCacheMut.Lock()
		provideMeasurementUpdateCache[key] = cache
		provideMeasurementUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q provideMeasurementQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for provide_measurements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for provide_measurements")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProvideMeasurementSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), provideMeasurementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"provide_measurements\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, provideMeasurementPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in provideMeasurement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all provideMeasurement")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProvideMeasurement) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no provide_measurements provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(provideMeasurementColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	provideMeasurementUpsertCacheMut.RLock()
	cache, cached := provideMeasurementUpsertCache[key]
	provideMeasurementUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			provideMeasurementAllColumns,
			provideMeasurementColumnsWithDefault,
			provideMeasurementColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			provideMeasurementAllColumns,
			provideMeasurementPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert provide_measurements, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(provideMeasurementPrimaryKeyColumns))
			copy(conflict, provideMeasurementPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"provide_measurements\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(provideMeasurementType, provideMeasurementMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(provideMeasurementType, provideMeasurementMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert provide_measurements")
	}

	if !cached {
		provideMeasurementUpsertCacheMut.Lock()
		provideMeasurementUpsertCache[key] = cache
		provideMeasurementUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProvideMeasurement record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProvideMeasurement) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProvideMeasurement provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), provideMeasurementPrimaryKeyMapping)
	sql := "DELETE FROM \"provide_measurements\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from provide_measurements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for provide_measurements")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q provideMeasurementQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no provideMeasurementQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from provide_measurements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for provide_measurements")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProvideMeasurementSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(provideMeasurementBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), provideMeasurementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"provide_measurements\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, provideMeasurementPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from provideMeasurement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for provide_measurements")
	}

	if len(provideMeasurementAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProvideMeasurement) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProvideMeasurement(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProvideMeasurementSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProvideMeasurementSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), provideMeasurementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"provide_measurements\".* FROM \"provide_measurements\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, provideMeasurementPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProvideMeasurementSlice")
	}

	*o = slice

	return nil
}

// ProvideMeasurementExists checks if the ProvideMeasurement row exists.
func ProvideMeasurementExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"provide_measurements\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if provide_measurements exists")
	}

	return exists, nil
}
