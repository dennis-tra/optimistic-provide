// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Dial is an object representing the database table.
type Dial struct {
	ID             int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProvideID      int         `boil:"provide_id" json:"provide_id" toml:"provide_id" yaml:"provide_id"`
	LocalID        int         `boil:"local_id" json:"local_id" toml:"local_id" yaml:"local_id"`
	RemoteID       int         `boil:"remote_id" json:"remote_id" toml:"remote_id" yaml:"remote_id"`
	Transport      string      `boil:"transport" json:"transport" toml:"transport" yaml:"transport"`
	MultiAddressID int         `boil:"multi_address_id" json:"multi_address_id" toml:"multi_address_id" yaml:"multi_address_id"`
	StartedAt      time.Time   `boil:"started_at" json:"started_at" toml:"started_at" yaml:"started_at"`
	EndedAt        time.Time   `boil:"ended_at" json:"ended_at" toml:"ended_at" yaml:"ended_at"`
	Error          null.String `boil:"error" json:"error,omitempty" toml:"error" yaml:"error,omitempty"`

	R *dialR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dialL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DialColumns = struct {
	ID             string
	ProvideID      string
	LocalID        string
	RemoteID       string
	Transport      string
	MultiAddressID string
	StartedAt      string
	EndedAt        string
	Error          string
}{
	ID:             "id",
	ProvideID:      "provide_id",
	LocalID:        "local_id",
	RemoteID:       "remote_id",
	Transport:      "transport",
	MultiAddressID: "multi_address_id",
	StartedAt:      "started_at",
	EndedAt:        "ended_at",
	Error:          "error",
}

var DialTableColumns = struct {
	ID             string
	ProvideID      string
	LocalID        string
	RemoteID       string
	Transport      string
	MultiAddressID string
	StartedAt      string
	EndedAt        string
	Error          string
}{
	ID:             "dials.id",
	ProvideID:      "dials.provide_id",
	LocalID:        "dials.local_id",
	RemoteID:       "dials.remote_id",
	Transport:      "dials.transport",
	MultiAddressID: "dials.multi_address_id",
	StartedAt:      "dials.started_at",
	EndedAt:        "dials.ended_at",
	Error:          "dials.error",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var DialWhere = struct {
	ID             whereHelperint
	ProvideID      whereHelperint
	LocalID        whereHelperint
	RemoteID       whereHelperint
	Transport      whereHelperstring
	MultiAddressID whereHelperint
	StartedAt      whereHelpertime_Time
	EndedAt        whereHelpertime_Time
	Error          whereHelpernull_String
}{
	ID:             whereHelperint{field: "\"dials\".\"id\""},
	ProvideID:      whereHelperint{field: "\"dials\".\"provide_id\""},
	LocalID:        whereHelperint{field: "\"dials\".\"local_id\""},
	RemoteID:       whereHelperint{field: "\"dials\".\"remote_id\""},
	Transport:      whereHelperstring{field: "\"dials\".\"transport\""},
	MultiAddressID: whereHelperint{field: "\"dials\".\"multi_address_id\""},
	StartedAt:      whereHelpertime_Time{field: "\"dials\".\"started_at\""},
	EndedAt:        whereHelpertime_Time{field: "\"dials\".\"ended_at\""},
	Error:          whereHelpernull_String{field: "\"dials\".\"error\""},
}

// DialRels is where relationship names are stored.
var DialRels = struct {
	Local        string
	MultiAddress string
	Provide      string
	Remote       string
}{
	Local:        "Local",
	MultiAddress: "MultiAddress",
	Provide:      "Provide",
	Remote:       "Remote",
}

// dialR is where relationships are stored.
type dialR struct {
	Local        *Peer         `boil:"Local" json:"Local" toml:"Local" yaml:"Local"`
	MultiAddress *MultiAddress `boil:"MultiAddress" json:"MultiAddress" toml:"MultiAddress" yaml:"MultiAddress"`
	Provide      *Provide      `boil:"Provide" json:"Provide" toml:"Provide" yaml:"Provide"`
	Remote       *Peer         `boil:"Remote" json:"Remote" toml:"Remote" yaml:"Remote"`
}

// NewStruct creates a new relationship struct
func (*dialR) NewStruct() *dialR {
	return &dialR{}
}

// dialL is where Load methods for each relationship are stored.
type dialL struct{}

var (
	dialAllColumns            = []string{"id", "provide_id", "local_id", "remote_id", "transport", "multi_address_id", "started_at", "ended_at", "error"}
	dialColumnsWithoutDefault = []string{"provide_id", "local_id", "remote_id", "transport", "multi_address_id", "started_at", "ended_at", "error"}
	dialColumnsWithDefault    = []string{"id"}
	dialPrimaryKeyColumns     = []string{"id"}
)

type (
	// DialSlice is an alias for a slice of pointers to Dial.
	// This should almost always be used instead of []Dial.
	DialSlice []*Dial
	// DialHook is the signature for custom Dial hook methods
	DialHook func(context.Context, boil.ContextExecutor, *Dial) error

	dialQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dialType                 = reflect.TypeOf(&Dial{})
	dialMapping              = queries.MakeStructMapping(dialType)
	dialPrimaryKeyMapping, _ = queries.BindMapping(dialType, dialMapping, dialPrimaryKeyColumns)
	dialInsertCacheMut       sync.RWMutex
	dialInsertCache          = make(map[string]insertCache)
	dialUpdateCacheMut       sync.RWMutex
	dialUpdateCache          = make(map[string]updateCache)
	dialUpsertCacheMut       sync.RWMutex
	dialUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dialBeforeInsertHooks []DialHook
var dialBeforeUpdateHooks []DialHook
var dialBeforeDeleteHooks []DialHook
var dialBeforeUpsertHooks []DialHook

var dialAfterInsertHooks []DialHook
var dialAfterSelectHooks []DialHook
var dialAfterUpdateHooks []DialHook
var dialAfterDeleteHooks []DialHook
var dialAfterUpsertHooks []DialHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Dial) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dialBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Dial) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dialBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Dial) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dialBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Dial) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dialBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Dial) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dialAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Dial) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dialAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Dial) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dialAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Dial) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dialAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Dial) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dialAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDialHook registers your hook function for all future operations.
func AddDialHook(hookPoint boil.HookPoint, dialHook DialHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		dialBeforeInsertHooks = append(dialBeforeInsertHooks, dialHook)
	case boil.BeforeUpdateHook:
		dialBeforeUpdateHooks = append(dialBeforeUpdateHooks, dialHook)
	case boil.BeforeDeleteHook:
		dialBeforeDeleteHooks = append(dialBeforeDeleteHooks, dialHook)
	case boil.BeforeUpsertHook:
		dialBeforeUpsertHooks = append(dialBeforeUpsertHooks, dialHook)
	case boil.AfterInsertHook:
		dialAfterInsertHooks = append(dialAfterInsertHooks, dialHook)
	case boil.AfterSelectHook:
		dialAfterSelectHooks = append(dialAfterSelectHooks, dialHook)
	case boil.AfterUpdateHook:
		dialAfterUpdateHooks = append(dialAfterUpdateHooks, dialHook)
	case boil.AfterDeleteHook:
		dialAfterDeleteHooks = append(dialAfterDeleteHooks, dialHook)
	case boil.AfterUpsertHook:
		dialAfterUpsertHooks = append(dialAfterUpsertHooks, dialHook)
	}
}

// One returns a single dial record from the query.
func (q dialQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Dial, error) {
	o := &Dial{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for dials")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Dial records from the query.
func (q dialQuery) All(ctx context.Context, exec boil.ContextExecutor) (DialSlice, error) {
	var o []*Dial

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Dial slice")
	}

	if len(dialAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Dial records in the query.
func (q dialQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count dials rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dialQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if dials exists")
	}

	return count > 0, nil
}

// Local pointed to by the foreign key.
func (o *Dial) Local(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LocalID),
	}

	queryMods = append(queryMods, mods...)

	query := Peers(queryMods...)
	queries.SetFrom(query.Query, "\"peers\"")

	return query
}

// MultiAddress pointed to by the foreign key.
func (o *Dial) MultiAddress(mods ...qm.QueryMod) multiAddressQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MultiAddressID),
	}

	queryMods = append(queryMods, mods...)

	query := MultiAddresses(queryMods...)
	queries.SetFrom(query.Query, "\"multi_addresses\"")

	return query
}

// Provide pointed to by the foreign key.
func (o *Dial) Provide(mods ...qm.QueryMod) provideQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProvideID),
	}

	queryMods = append(queryMods, mods...)

	query := Provides(queryMods...)
	queries.SetFrom(query.Query, "\"provides\"")

	return query
}

// Remote pointed to by the foreign key.
func (o *Dial) Remote(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RemoteID),
	}

	queryMods = append(queryMods, mods...)

	query := Peers(queryMods...)
	queries.SetFrom(query.Query, "\"peers\"")

	return query
}

// LoadLocal allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dialL) LoadLocal(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDial interface{}, mods queries.Applicator) error {
	var slice []*Dial
	var object *Dial

	if singular {
		object = maybeDial.(*Dial)
	} else {
		slice = *maybeDial.(*[]*Dial)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dialR{}
		}
		args = append(args, object.LocalID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dialR{}
			}

			for _, a := range args {
				if a == obj.LocalID {
					continue Outer
				}
			}

			args = append(args, obj.LocalID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(dialAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Local = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.LocalDials = append(foreign.R.LocalDials, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LocalID == foreign.ID {
				local.R.Local = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.LocalDials = append(foreign.R.LocalDials, local)
				break
			}
		}
	}

	return nil
}

// LoadMultiAddress allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dialL) LoadMultiAddress(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDial interface{}, mods queries.Applicator) error {
	var slice []*Dial
	var object *Dial

	if singular {
		object = maybeDial.(*Dial)
	} else {
		slice = *maybeDial.(*[]*Dial)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dialR{}
		}
		args = append(args, object.MultiAddressID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dialR{}
			}

			for _, a := range args {
				if a == obj.MultiAddressID {
					continue Outer
				}
			}

			args = append(args, obj.MultiAddressID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`multi_addresses`),
		qm.WhereIn(`multi_addresses.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MultiAddress")
	}

	var resultSlice []*MultiAddress
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MultiAddress")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for multi_addresses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for multi_addresses")
	}

	if len(dialAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MultiAddress = foreign
		if foreign.R == nil {
			foreign.R = &multiAddressR{}
		}
		foreign.R.Dials = append(foreign.R.Dials, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MultiAddressID == foreign.ID {
				local.R.MultiAddress = foreign
				if foreign.R == nil {
					foreign.R = &multiAddressR{}
				}
				foreign.R.Dials = append(foreign.R.Dials, local)
				break
			}
		}
	}

	return nil
}

// LoadProvide allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dialL) LoadProvide(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDial interface{}, mods queries.Applicator) error {
	var slice []*Dial
	var object *Dial

	if singular {
		object = maybeDial.(*Dial)
	} else {
		slice = *maybeDial.(*[]*Dial)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dialR{}
		}
		args = append(args, object.ProvideID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dialR{}
			}

			for _, a := range args {
				if a == obj.ProvideID {
					continue Outer
				}
			}

			args = append(args, obj.ProvideID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`provides`),
		qm.WhereIn(`provides.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Provide")
	}

	var resultSlice []*Provide
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Provide")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for provides")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for provides")
	}

	if len(dialAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Provide = foreign
		if foreign.R == nil {
			foreign.R = &provideR{}
		}
		foreign.R.Dials = append(foreign.R.Dials, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProvideID == foreign.ID {
				local.R.Provide = foreign
				if foreign.R == nil {
					foreign.R = &provideR{}
				}
				foreign.R.Dials = append(foreign.R.Dials, local)
				break
			}
		}
	}

	return nil
}

// LoadRemote allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dialL) LoadRemote(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDial interface{}, mods queries.Applicator) error {
	var slice []*Dial
	var object *Dial

	if singular {
		object = maybeDial.(*Dial)
	} else {
		slice = *maybeDial.(*[]*Dial)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dialR{}
		}
		args = append(args, object.RemoteID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dialR{}
			}

			for _, a := range args {
				if a == obj.RemoteID {
					continue Outer
				}
			}

			args = append(args, obj.RemoteID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(dialAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Remote = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.RemoteDials = append(foreign.R.RemoteDials, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RemoteID == foreign.ID {
				local.R.Remote = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.RemoteDials = append(foreign.R.RemoteDials, local)
				break
			}
		}
	}

	return nil
}

// SetLocal of the dial to the related item.
// Sets o.R.Local to related.
// Adds o to related.R.LocalDials.
func (o *Dial) SetLocal(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"dials\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"local_id"}),
		strmangle.WhereClause("\"", "\"", 2, dialPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LocalID = related.ID
	if o.R == nil {
		o.R = &dialR{
			Local: related,
		}
	} else {
		o.R.Local = related
	}

	if related.R == nil {
		related.R = &peerR{
			LocalDials: DialSlice{o},
		}
	} else {
		related.R.LocalDials = append(related.R.LocalDials, o)
	}

	return nil
}

// SetMultiAddress of the dial to the related item.
// Sets o.R.MultiAddress to related.
// Adds o to related.R.Dials.
func (o *Dial) SetMultiAddress(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MultiAddress) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"dials\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"multi_address_id"}),
		strmangle.WhereClause("\"", "\"", 2, dialPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MultiAddressID = related.ID
	if o.R == nil {
		o.R = &dialR{
			MultiAddress: related,
		}
	} else {
		o.R.MultiAddress = related
	}

	if related.R == nil {
		related.R = &multiAddressR{
			Dials: DialSlice{o},
		}
	} else {
		related.R.Dials = append(related.R.Dials, o)
	}

	return nil
}

// SetProvide of the dial to the related item.
// Sets o.R.Provide to related.
// Adds o to related.R.Dials.
func (o *Dial) SetProvide(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Provide) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"dials\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"provide_id"}),
		strmangle.WhereClause("\"", "\"", 2, dialPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProvideID = related.ID
	if o.R == nil {
		o.R = &dialR{
			Provide: related,
		}
	} else {
		o.R.Provide = related
	}

	if related.R == nil {
		related.R = &provideR{
			Dials: DialSlice{o},
		}
	} else {
		related.R.Dials = append(related.R.Dials, o)
	}

	return nil
}

// SetRemote of the dial to the related item.
// Sets o.R.Remote to related.
// Adds o to related.R.RemoteDials.
func (o *Dial) SetRemote(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"dials\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"remote_id"}),
		strmangle.WhereClause("\"", "\"", 2, dialPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RemoteID = related.ID
	if o.R == nil {
		o.R = &dialR{
			Remote: related,
		}
	} else {
		o.R.Remote = related
	}

	if related.R == nil {
		related.R = &peerR{
			RemoteDials: DialSlice{o},
		}
	} else {
		related.R.RemoteDials = append(related.R.RemoteDials, o)
	}

	return nil
}

// Dials retrieves all the records using an executor.
func Dials(mods ...qm.QueryMod) dialQuery {
	mods = append(mods, qm.From("\"dials\""))
	return dialQuery{NewQuery(mods...)}
}

// FindDial retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDial(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Dial, error) {
	dialObj := &Dial{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"dials\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, dialObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from dials")
	}

	if err = dialObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dialObj, err
	}

	return dialObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Dial) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dials provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dialColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dialInsertCacheMut.RLock()
	cache, cached := dialInsertCache[key]
	dialInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dialAllColumns,
			dialColumnsWithDefault,
			dialColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dialType, dialMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dialType, dialMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"dials\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"dials\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into dials")
	}

	if !cached {
		dialInsertCacheMut.Lock()
		dialInsertCache[key] = cache
		dialInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Dial.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Dial) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dialUpdateCacheMut.RLock()
	cache, cached := dialUpdateCache[key]
	dialUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dialAllColumns,
			dialPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update dials, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"dials\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, dialPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dialType, dialMapping, append(wl, dialPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update dials row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for dials")
	}

	if !cached {
		dialUpdateCacheMut.Lock()
		dialUpdateCache[key] = cache
		dialUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dialQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for dials")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for dials")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DialSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"dials\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, dialPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dial slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dial")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Dial) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dials provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dialColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dialUpsertCacheMut.RLock()
	cache, cached := dialUpsertCache[key]
	dialUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dialAllColumns,
			dialColumnsWithDefault,
			dialColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			dialAllColumns,
			dialPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert dials, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(dialPrimaryKeyColumns))
			copy(conflict, dialPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"dials\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(dialType, dialMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dialType, dialMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert dials")
	}

	if !cached {
		dialUpsertCacheMut.Lock()
		dialUpsertCache[key] = cache
		dialUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Dial record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Dial) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Dial provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dialPrimaryKeyMapping)
	sql := "DELETE FROM \"dials\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from dials")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for dials")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dialQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dialQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dials")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dials")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DialSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dialBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"dials\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dialPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dial slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dials")
	}

	if len(dialAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Dial) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDial(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DialSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DialSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"dials\".* FROM \"dials\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dialPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DialSlice")
	}

	*o = slice

	return nil
}

// DialExists checks if the Dial row exists.
func DialExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"dials\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if dials exists")
	}

	return exists, nil
}
