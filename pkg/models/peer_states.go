// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PeerState is an object representing the database table.
type PeerState struct {
	ID         int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	PeerID     int    `boil:"peer_id" json:"peer_id" toml:"peer_id" yaml:"peer_id"`
	ReferrerID int    `boil:"referrer_id" json:"referrer_id" toml:"referrer_id" yaml:"referrer_id"`
	State      string `boil:"state" json:"state" toml:"state" yaml:"state"`
	Distance   []byte `boil:"distance" json:"distance" toml:"distance" yaml:"distance"`

	R *peerStateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L peerStateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PeerStateColumns = struct {
	ID         string
	PeerID     string
	ReferrerID string
	State      string
	Distance   string
}{
	ID:         "id",
	PeerID:     "peer_id",
	ReferrerID: "referrer_id",
	State:      "state",
	Distance:   "distance",
}

var PeerStateTableColumns = struct {
	ID         string
	PeerID     string
	ReferrerID string
	State      string
	Distance   string
}{
	ID:         "peer_states.id",
	PeerID:     "peer_states.peer_id",
	ReferrerID: "peer_states.referrer_id",
	State:      "peer_states.state",
	Distance:   "peer_states.distance",
}

// Generated where

var PeerStateWhere = struct {
	ID         whereHelperint
	PeerID     whereHelperint
	ReferrerID whereHelperint
	State      whereHelperstring
	Distance   whereHelper__byte
}{
	ID:         whereHelperint{field: "\"peer_states\".\"id\""},
	PeerID:     whereHelperint{field: "\"peer_states\".\"peer_id\""},
	ReferrerID: whereHelperint{field: "\"peer_states\".\"referrer_id\""},
	State:      whereHelperstring{field: "\"peer_states\".\"state\""},
	Distance:   whereHelper__byte{field: "\"peer_states\".\"distance\""},
}

// PeerStateRels is where relationship names are stored.
var PeerStateRels = struct {
	Peer       string
	Referrer   string
	Provides   string
	Retrievals string
}{
	Peer:       "Peer",
	Referrer:   "Referrer",
	Provides:   "Provides",
	Retrievals: "Retrievals",
}

// peerStateR is where relationships are stored.
type peerStateR struct {
	Peer       *Peer          `boil:"Peer" json:"Peer" toml:"Peer" yaml:"Peer"`
	Referrer   *Peer          `boil:"Referrer" json:"Referrer" toml:"Referrer" yaml:"Referrer"`
	Provides   ProvideSlice   `boil:"Provides" json:"Provides" toml:"Provides" yaml:"Provides"`
	Retrievals RetrievalSlice `boil:"Retrievals" json:"Retrievals" toml:"Retrievals" yaml:"Retrievals"`
}

// NewStruct creates a new relationship struct
func (*peerStateR) NewStruct() *peerStateR {
	return &peerStateR{}
}

// peerStateL is where Load methods for each relationship are stored.
type peerStateL struct{}

var (
	peerStateAllColumns            = []string{"id", "peer_id", "referrer_id", "state", "distance"}
	peerStateColumnsWithoutDefault = []string{"peer_id", "referrer_id", "state", "distance"}
	peerStateColumnsWithDefault    = []string{"id"}
	peerStatePrimaryKeyColumns     = []string{"id"}
)

type (
	// PeerStateSlice is an alias for a slice of pointers to PeerState.
	// This should almost always be used instead of []PeerState.
	PeerStateSlice []*PeerState
	// PeerStateHook is the signature for custom PeerState hook methods
	PeerStateHook func(context.Context, boil.ContextExecutor, *PeerState) error

	peerStateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	peerStateType                 = reflect.TypeOf(&PeerState{})
	peerStateMapping              = queries.MakeStructMapping(peerStateType)
	peerStatePrimaryKeyMapping, _ = queries.BindMapping(peerStateType, peerStateMapping, peerStatePrimaryKeyColumns)
	peerStateInsertCacheMut       sync.RWMutex
	peerStateInsertCache          = make(map[string]insertCache)
	peerStateUpdateCacheMut       sync.RWMutex
	peerStateUpdateCache          = make(map[string]updateCache)
	peerStateUpsertCacheMut       sync.RWMutex
	peerStateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var peerStateBeforeInsertHooks []PeerStateHook
var peerStateBeforeUpdateHooks []PeerStateHook
var peerStateBeforeDeleteHooks []PeerStateHook
var peerStateBeforeUpsertHooks []PeerStateHook

var peerStateAfterInsertHooks []PeerStateHook
var peerStateAfterSelectHooks []PeerStateHook
var peerStateAfterUpdateHooks []PeerStateHook
var peerStateAfterDeleteHooks []PeerStateHook
var peerStateAfterUpsertHooks []PeerStateHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PeerState) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerStateBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PeerState) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerStateBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PeerState) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerStateBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PeerState) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerStateBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PeerState) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerStateAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PeerState) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerStateAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PeerState) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerStateAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PeerState) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerStateAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PeerState) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerStateAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPeerStateHook registers your hook function for all future operations.
func AddPeerStateHook(hookPoint boil.HookPoint, peerStateHook PeerStateHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		peerStateBeforeInsertHooks = append(peerStateBeforeInsertHooks, peerStateHook)
	case boil.BeforeUpdateHook:
		peerStateBeforeUpdateHooks = append(peerStateBeforeUpdateHooks, peerStateHook)
	case boil.BeforeDeleteHook:
		peerStateBeforeDeleteHooks = append(peerStateBeforeDeleteHooks, peerStateHook)
	case boil.BeforeUpsertHook:
		peerStateBeforeUpsertHooks = append(peerStateBeforeUpsertHooks, peerStateHook)
	case boil.AfterInsertHook:
		peerStateAfterInsertHooks = append(peerStateAfterInsertHooks, peerStateHook)
	case boil.AfterSelectHook:
		peerStateAfterSelectHooks = append(peerStateAfterSelectHooks, peerStateHook)
	case boil.AfterUpdateHook:
		peerStateAfterUpdateHooks = append(peerStateAfterUpdateHooks, peerStateHook)
	case boil.AfterDeleteHook:
		peerStateAfterDeleteHooks = append(peerStateAfterDeleteHooks, peerStateHook)
	case boil.AfterUpsertHook:
		peerStateAfterUpsertHooks = append(peerStateAfterUpsertHooks, peerStateHook)
	}
}

// One returns a single peerState record from the query.
func (q peerStateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PeerState, error) {
	o := &PeerState{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for peer_states")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PeerState records from the query.
func (q peerStateQuery) All(ctx context.Context, exec boil.ContextExecutor) (PeerStateSlice, error) {
	var o []*PeerState

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PeerState slice")
	}

	if len(peerStateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PeerState records in the query.
func (q peerStateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count peer_states rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q peerStateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if peer_states exists")
	}

	return count > 0, nil
}

// Peer pointed to by the foreign key.
func (o *PeerState) Peer(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PeerID),
	}

	queryMods = append(queryMods, mods...)

	query := Peers(queryMods...)
	queries.SetFrom(query.Query, "\"peers\"")

	return query
}

// Referrer pointed to by the foreign key.
func (o *PeerState) Referrer(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ReferrerID),
	}

	queryMods = append(queryMods, mods...)

	query := Peers(queryMods...)
	queries.SetFrom(query.Query, "\"peers\"")

	return query
}

// Provides retrieves all the provide's Provides with an executor.
func (o *PeerState) Provides(mods ...qm.QueryMod) provideQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"provides_x_peer_states\" on \"provides\".\"id\" = \"provides_x_peer_states\".\"provide_id\""),
		qm.Where("\"provides_x_peer_states\".\"peer_state_id\"=?", o.ID),
	)

	query := Provides(queryMods...)
	queries.SetFrom(query.Query, "\"provides\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"provides\".*"})
	}

	return query
}

// Retrievals retrieves all the retrieval's Retrievals with an executor.
func (o *PeerState) Retrievals(mods ...qm.QueryMod) retrievalQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"retrievals_x_peer_states\" on \"retrievals\".\"id\" = \"retrievals_x_peer_states\".\"retrieval_id\""),
		qm.Where("\"retrievals_x_peer_states\".\"peer_state_id\"=?", o.ID),
	)

	query := Retrievals(queryMods...)
	queries.SetFrom(query.Query, "\"retrievals\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"retrievals\".*"})
	}

	return query
}

// LoadPeer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (peerStateL) LoadPeer(ctx context.Context, e boil.ContextExecutor, singular bool, maybePeerState interface{}, mods queries.Applicator) error {
	var slice []*PeerState
	var object *PeerState

	if singular {
		object = maybePeerState.(*PeerState)
	} else {
		slice = *maybePeerState.(*[]*PeerState)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &peerStateR{}
		}
		args = append(args, object.PeerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &peerStateR{}
			}

			for _, a := range args {
				if a == obj.PeerID {
					continue Outer
				}
			}

			args = append(args, obj.PeerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(peerStateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Peer = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.PeerStates = append(foreign.R.PeerStates, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PeerID == foreign.ID {
				local.R.Peer = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.PeerStates = append(foreign.R.PeerStates, local)
				break
			}
		}
	}

	return nil
}

// LoadReferrer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (peerStateL) LoadReferrer(ctx context.Context, e boil.ContextExecutor, singular bool, maybePeerState interface{}, mods queries.Applicator) error {
	var slice []*PeerState
	var object *PeerState

	if singular {
		object = maybePeerState.(*PeerState)
	} else {
		slice = *maybePeerState.(*[]*PeerState)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &peerStateR{}
		}
		args = append(args, object.ReferrerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &peerStateR{}
			}

			for _, a := range args {
				if a == obj.ReferrerID {
					continue Outer
				}
			}

			args = append(args, obj.ReferrerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(peerStateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Referrer = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.ReferrerPeerStates = append(foreign.R.ReferrerPeerStates, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ReferrerID == foreign.ID {
				local.R.Referrer = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.ReferrerPeerStates = append(foreign.R.ReferrerPeerStates, local)
				break
			}
		}
	}

	return nil
}

// LoadProvides allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (peerStateL) LoadProvides(ctx context.Context, e boil.ContextExecutor, singular bool, maybePeerState interface{}, mods queries.Applicator) error {
	var slice []*PeerState
	var object *PeerState

	if singular {
		object = maybePeerState.(*PeerState)
	} else {
		slice = *maybePeerState.(*[]*PeerState)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &peerStateR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &peerStateR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"provides\".id, \"provides\".provider_id, \"provides\".content_id, \"provides\".distance, \"provides\".initial_routing_table_id, \"provides\".final_routing_table_id, \"provides\".started_at, \"provides\".ended_at, \"provides\".error, \"provides\".done_at, \"provides\".updated_at, \"provides\".created_at, \"a\".\"peer_state_id\""),
		qm.From("\"provides\""),
		qm.InnerJoin("\"provides_x_peer_states\" as \"a\" on \"provides\".\"id\" = \"a\".\"provide_id\""),
		qm.WhereIn("\"a\".\"peer_state_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load provides")
	}

	var resultSlice []*Provide

	var localJoinCols []int
	for results.Next() {
		one := new(Provide)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.ProviderID, &one.ContentID, &one.Distance, &one.InitialRoutingTableID, &one.FinalRoutingTableID, &one.StartedAt, &one.EndedAt, &one.Error, &one.DoneAt, &one.UpdatedAt, &one.CreatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for provides")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice provides")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on provides")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for provides")
	}

	if len(provideAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Provides = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &provideR{}
			}
			foreign.R.PeerStates = append(foreign.R.PeerStates, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Provides = append(local.R.Provides, foreign)
				if foreign.R == nil {
					foreign.R = &provideR{}
				}
				foreign.R.PeerStates = append(foreign.R.PeerStates, local)
				break
			}
		}
	}

	return nil
}

// LoadRetrievals allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (peerStateL) LoadRetrievals(ctx context.Context, e boil.ContextExecutor, singular bool, maybePeerState interface{}, mods queries.Applicator) error {
	var slice []*PeerState
	var object *PeerState

	if singular {
		object = maybePeerState.(*PeerState)
	} else {
		slice = *maybePeerState.(*[]*PeerState)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &peerStateR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &peerStateR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"retrievals\".id, \"retrievals\".retriever_id, \"retrievals\".content_id, \"retrievals\".distance, \"retrievals\".initial_routing_table_id, \"retrievals\".final_routing_table_id, \"retrievals\".started_at, \"retrievals\".ended_at, \"retrievals\".error, \"retrievals\".done_at, \"retrievals\".updated_at, \"retrievals\".created_at, \"a\".\"peer_state_id\""),
		qm.From("\"retrievals\""),
		qm.InnerJoin("\"retrievals_x_peer_states\" as \"a\" on \"retrievals\".\"id\" = \"a\".\"retrieval_id\""),
		qm.WhereIn("\"a\".\"peer_state_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load retrievals")
	}

	var resultSlice []*Retrieval

	var localJoinCols []int
	for results.Next() {
		one := new(Retrieval)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.RetrieverID, &one.ContentID, &one.Distance, &one.InitialRoutingTableID, &one.FinalRoutingTableID, &one.StartedAt, &one.EndedAt, &one.Error, &one.DoneAt, &one.UpdatedAt, &one.CreatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for retrievals")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice retrievals")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on retrievals")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for retrievals")
	}

	if len(retrievalAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Retrievals = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &retrievalR{}
			}
			foreign.R.PeerStates = append(foreign.R.PeerStates, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Retrievals = append(local.R.Retrievals, foreign)
				if foreign.R == nil {
					foreign.R = &retrievalR{}
				}
				foreign.R.PeerStates = append(foreign.R.PeerStates, local)
				break
			}
		}
	}

	return nil
}

// SetPeer of the peerState to the related item.
// Sets o.R.Peer to related.
// Adds o to related.R.PeerStates.
func (o *PeerState) SetPeer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"peer_states\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"peer_id"}),
		strmangle.WhereClause("\"", "\"", 2, peerStatePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PeerID = related.ID
	if o.R == nil {
		o.R = &peerStateR{
			Peer: related,
		}
	} else {
		o.R.Peer = related
	}

	if related.R == nil {
		related.R = &peerR{
			PeerStates: PeerStateSlice{o},
		}
	} else {
		related.R.PeerStates = append(related.R.PeerStates, o)
	}

	return nil
}

// SetReferrer of the peerState to the related item.
// Sets o.R.Referrer to related.
// Adds o to related.R.ReferrerPeerStates.
func (o *PeerState) SetReferrer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"peer_states\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"referrer_id"}),
		strmangle.WhereClause("\"", "\"", 2, peerStatePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ReferrerID = related.ID
	if o.R == nil {
		o.R = &peerStateR{
			Referrer: related,
		}
	} else {
		o.R.Referrer = related
	}

	if related.R == nil {
		related.R = &peerR{
			ReferrerPeerStates: PeerStateSlice{o},
		}
	} else {
		related.R.ReferrerPeerStates = append(related.R.ReferrerPeerStates, o)
	}

	return nil
}

// AddProvides adds the given related objects to the existing relationships
// of the peer_state, optionally inserting them as new records.
// Appends related to o.R.Provides.
// Sets related.R.PeerStates appropriately.
func (o *PeerState) AddProvides(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Provide) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"provides_x_peer_states\" (\"peer_state_id\", \"provide_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &peerStateR{
			Provides: related,
		}
	} else {
		o.R.Provides = append(o.R.Provides, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &provideR{
				PeerStates: PeerStateSlice{o},
			}
		} else {
			rel.R.PeerStates = append(rel.R.PeerStates, o)
		}
	}
	return nil
}

// SetProvides removes all previously related items of the
// peer_state replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PeerStates's Provides accordingly.
// Replaces o.R.Provides with related.
// Sets related.R.PeerStates's Provides accordingly.
func (o *PeerState) SetProvides(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Provide) error {
	query := "delete from \"provides_x_peer_states\" where \"peer_state_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeProvidesFromPeerStatesSlice(o, related)
	if o.R != nil {
		o.R.Provides = nil
	}
	return o.AddProvides(ctx, exec, insert, related...)
}

// RemoveProvides relationships from objects passed in.
// Removes related items from R.Provides (uses pointer comparison, removal does not keep order)
// Sets related.R.PeerStates.
func (o *PeerState) RemoveProvides(ctx context.Context, exec boil.ContextExecutor, related ...*Provide) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"provides_x_peer_states\" where \"peer_state_id\" = $1 and \"provide_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeProvidesFromPeerStatesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Provides {
			if rel != ri {
				continue
			}

			ln := len(o.R.Provides)
			if ln > 1 && i < ln-1 {
				o.R.Provides[i] = o.R.Provides[ln-1]
			}
			o.R.Provides = o.R.Provides[:ln-1]
			break
		}
	}

	return nil
}

func removeProvidesFromPeerStatesSlice(o *PeerState, related []*Provide) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.PeerStates {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.PeerStates)
			if ln > 1 && i < ln-1 {
				rel.R.PeerStates[i] = rel.R.PeerStates[ln-1]
			}
			rel.R.PeerStates = rel.R.PeerStates[:ln-1]
			break
		}
	}
}

// AddRetrievals adds the given related objects to the existing relationships
// of the peer_state, optionally inserting them as new records.
// Appends related to o.R.Retrievals.
// Sets related.R.PeerStates appropriately.
func (o *PeerState) AddRetrievals(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Retrieval) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"retrievals_x_peer_states\" (\"peer_state_id\", \"retrieval_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &peerStateR{
			Retrievals: related,
		}
	} else {
		o.R.Retrievals = append(o.R.Retrievals, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &retrievalR{
				PeerStates: PeerStateSlice{o},
			}
		} else {
			rel.R.PeerStates = append(rel.R.PeerStates, o)
		}
	}
	return nil
}

// SetRetrievals removes all previously related items of the
// peer_state replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PeerStates's Retrievals accordingly.
// Replaces o.R.Retrievals with related.
// Sets related.R.PeerStates's Retrievals accordingly.
func (o *PeerState) SetRetrievals(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Retrieval) error {
	query := "delete from \"retrievals_x_peer_states\" where \"peer_state_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeRetrievalsFromPeerStatesSlice(o, related)
	if o.R != nil {
		o.R.Retrievals = nil
	}
	return o.AddRetrievals(ctx, exec, insert, related...)
}

// RemoveRetrievals relationships from objects passed in.
// Removes related items from R.Retrievals (uses pointer comparison, removal does not keep order)
// Sets related.R.PeerStates.
func (o *PeerState) RemoveRetrievals(ctx context.Context, exec boil.ContextExecutor, related ...*Retrieval) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"retrievals_x_peer_states\" where \"peer_state_id\" = $1 and \"retrieval_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeRetrievalsFromPeerStatesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Retrievals {
			if rel != ri {
				continue
			}

			ln := len(o.R.Retrievals)
			if ln > 1 && i < ln-1 {
				o.R.Retrievals[i] = o.R.Retrievals[ln-1]
			}
			o.R.Retrievals = o.R.Retrievals[:ln-1]
			break
		}
	}

	return nil
}

func removeRetrievalsFromPeerStatesSlice(o *PeerState, related []*Retrieval) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.PeerStates {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.PeerStates)
			if ln > 1 && i < ln-1 {
				rel.R.PeerStates[i] = rel.R.PeerStates[ln-1]
			}
			rel.R.PeerStates = rel.R.PeerStates[:ln-1]
			break
		}
	}
}

// PeerStates retrieves all the records using an executor.
func PeerStates(mods ...qm.QueryMod) peerStateQuery {
	mods = append(mods, qm.From("\"peer_states\""))
	return peerStateQuery{NewQuery(mods...)}
}

// FindPeerState retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPeerState(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PeerState, error) {
	peerStateObj := &PeerState{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"peer_states\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, peerStateObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from peer_states")
	}

	if err = peerStateObj.doAfterSelectHooks(ctx, exec); err != nil {
		return peerStateObj, err
	}

	return peerStateObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PeerState) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no peer_states provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(peerStateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	peerStateInsertCacheMut.RLock()
	cache, cached := peerStateInsertCache[key]
	peerStateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			peerStateAllColumns,
			peerStateColumnsWithDefault,
			peerStateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(peerStateType, peerStateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(peerStateType, peerStateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"peer_states\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"peer_states\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into peer_states")
	}

	if !cached {
		peerStateInsertCacheMut.Lock()
		peerStateInsertCache[key] = cache
		peerStateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PeerState.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PeerState) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	peerStateUpdateCacheMut.RLock()
	cache, cached := peerStateUpdateCache[key]
	peerStateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			peerStateAllColumns,
			peerStatePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update peer_states, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"peer_states\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, peerStatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(peerStateType, peerStateMapping, append(wl, peerStatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update peer_states row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for peer_states")
	}

	if !cached {
		peerStateUpdateCacheMut.Lock()
		peerStateUpdateCache[key] = cache
		peerStateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q peerStateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for peer_states")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for peer_states")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PeerStateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), peerStatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"peer_states\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, peerStatePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in peerState slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all peerState")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PeerState) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no peer_states provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(peerStateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	peerStateUpsertCacheMut.RLock()
	cache, cached := peerStateUpsertCache[key]
	peerStateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			peerStateAllColumns,
			peerStateColumnsWithDefault,
			peerStateColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			peerStateAllColumns,
			peerStatePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert peer_states, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(peerStatePrimaryKeyColumns))
			copy(conflict, peerStatePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"peer_states\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(peerStateType, peerStateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(peerStateType, peerStateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert peer_states")
	}

	if !cached {
		peerStateUpsertCacheMut.Lock()
		peerStateUpsertCache[key] = cache
		peerStateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PeerState record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PeerState) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PeerState provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), peerStatePrimaryKeyMapping)
	sql := "DELETE FROM \"peer_states\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from peer_states")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for peer_states")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q peerStateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no peerStateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from peer_states")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for peer_states")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PeerStateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(peerStateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), peerStatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"peer_states\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, peerStatePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from peerState slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for peer_states")
	}

	if len(peerStateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PeerState) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPeerState(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PeerStateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PeerStateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), peerStatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"peer_states\".* FROM \"peer_states\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, peerStatePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PeerStateSlice")
	}

	*o = slice

	return nil
}

// PeerStateExists checks if the PeerState row exists.
func PeerStateExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"peer_states\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if peer_states exists")
	}

	return exists, nil
}
