// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CloserPeer is an object representing the database table.
type CloserPeer struct {
	ProvideID  int `boil:"provide_id" json:"provide_id" toml:"provide_id" yaml:"provide_id"`
	FindNodeID int `boil:"find_node_id" json:"find_node_id" toml:"find_node_id" yaml:"find_node_id"`
	PeerID     int `boil:"peer_id" json:"peer_id" toml:"peer_id" yaml:"peer_id"`

	R *closerPeerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L closerPeerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CloserPeerColumns = struct {
	ProvideID  string
	FindNodeID string
	PeerID     string
}{
	ProvideID:  "provide_id",
	FindNodeID: "find_node_id",
	PeerID:     "peer_id",
}

var CloserPeerTableColumns = struct {
	ProvideID  string
	FindNodeID string
	PeerID     string
}{
	ProvideID:  "closer_peers.provide_id",
	FindNodeID: "closer_peers.find_node_id",
	PeerID:     "closer_peers.peer_id",
}

// Generated where

var CloserPeerWhere = struct {
	ProvideID  whereHelperint
	FindNodeID whereHelperint
	PeerID     whereHelperint
}{
	ProvideID:  whereHelperint{field: "\"closer_peers\".\"provide_id\""},
	FindNodeID: whereHelperint{field: "\"closer_peers\".\"find_node_id\""},
	PeerID:     whereHelperint{field: "\"closer_peers\".\"peer_id\""},
}

// CloserPeerRels is where relationship names are stored.
var CloserPeerRels = struct {
	FindNode string
	Peer     string
	Provide  string
}{
	FindNode: "FindNode",
	Peer:     "Peer",
	Provide:  "Provide",
}

// closerPeerR is where relationships are stored.
type closerPeerR struct {
	FindNode *FindNode `boil:"FindNode" json:"FindNode" toml:"FindNode" yaml:"FindNode"`
	Peer     *Peer     `boil:"Peer" json:"Peer" toml:"Peer" yaml:"Peer"`
	Provide  *Provide  `boil:"Provide" json:"Provide" toml:"Provide" yaml:"Provide"`
}

// NewStruct creates a new relationship struct
func (*closerPeerR) NewStruct() *closerPeerR {
	return &closerPeerR{}
}

// closerPeerL is where Load methods for each relationship are stored.
type closerPeerL struct{}

var (
	closerPeerAllColumns            = []string{"provide_id", "find_node_id", "peer_id"}
	closerPeerColumnsWithoutDefault = []string{"provide_id", "find_node_id", "peer_id"}
	closerPeerColumnsWithDefault    = []string{}
	closerPeerPrimaryKeyColumns     = []string{"provide_id", "find_node_id", "peer_id"}
)

type (
	// CloserPeerSlice is an alias for a slice of pointers to CloserPeer.
	// This should almost always be used instead of []CloserPeer.
	CloserPeerSlice []*CloserPeer
	// CloserPeerHook is the signature for custom CloserPeer hook methods
	CloserPeerHook func(context.Context, boil.ContextExecutor, *CloserPeer) error

	closerPeerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	closerPeerType                 = reflect.TypeOf(&CloserPeer{})
	closerPeerMapping              = queries.MakeStructMapping(closerPeerType)
	closerPeerPrimaryKeyMapping, _ = queries.BindMapping(closerPeerType, closerPeerMapping, closerPeerPrimaryKeyColumns)
	closerPeerInsertCacheMut       sync.RWMutex
	closerPeerInsertCache          = make(map[string]insertCache)
	closerPeerUpdateCacheMut       sync.RWMutex
	closerPeerUpdateCache          = make(map[string]updateCache)
	closerPeerUpsertCacheMut       sync.RWMutex
	closerPeerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var closerPeerBeforeInsertHooks []CloserPeerHook
var closerPeerBeforeUpdateHooks []CloserPeerHook
var closerPeerBeforeDeleteHooks []CloserPeerHook
var closerPeerBeforeUpsertHooks []CloserPeerHook

var closerPeerAfterInsertHooks []CloserPeerHook
var closerPeerAfterSelectHooks []CloserPeerHook
var closerPeerAfterUpdateHooks []CloserPeerHook
var closerPeerAfterDeleteHooks []CloserPeerHook
var closerPeerAfterUpsertHooks []CloserPeerHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CloserPeer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range closerPeerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CloserPeer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range closerPeerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CloserPeer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range closerPeerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CloserPeer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range closerPeerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CloserPeer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range closerPeerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CloserPeer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range closerPeerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CloserPeer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range closerPeerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CloserPeer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range closerPeerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CloserPeer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range closerPeerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCloserPeerHook registers your hook function for all future operations.
func AddCloserPeerHook(hookPoint boil.HookPoint, closerPeerHook CloserPeerHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		closerPeerBeforeInsertHooks = append(closerPeerBeforeInsertHooks, closerPeerHook)
	case boil.BeforeUpdateHook:
		closerPeerBeforeUpdateHooks = append(closerPeerBeforeUpdateHooks, closerPeerHook)
	case boil.BeforeDeleteHook:
		closerPeerBeforeDeleteHooks = append(closerPeerBeforeDeleteHooks, closerPeerHook)
	case boil.BeforeUpsertHook:
		closerPeerBeforeUpsertHooks = append(closerPeerBeforeUpsertHooks, closerPeerHook)
	case boil.AfterInsertHook:
		closerPeerAfterInsertHooks = append(closerPeerAfterInsertHooks, closerPeerHook)
	case boil.AfterSelectHook:
		closerPeerAfterSelectHooks = append(closerPeerAfterSelectHooks, closerPeerHook)
	case boil.AfterUpdateHook:
		closerPeerAfterUpdateHooks = append(closerPeerAfterUpdateHooks, closerPeerHook)
	case boil.AfterDeleteHook:
		closerPeerAfterDeleteHooks = append(closerPeerAfterDeleteHooks, closerPeerHook)
	case boil.AfterUpsertHook:
		closerPeerAfterUpsertHooks = append(closerPeerAfterUpsertHooks, closerPeerHook)
	}
}

// One returns a single closerPeer record from the query.
func (q closerPeerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CloserPeer, error) {
	o := &CloserPeer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for closer_peers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CloserPeer records from the query.
func (q closerPeerQuery) All(ctx context.Context, exec boil.ContextExecutor) (CloserPeerSlice, error) {
	var o []*CloserPeer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CloserPeer slice")
	}

	if len(closerPeerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CloserPeer records in the query.
func (q closerPeerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count closer_peers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q closerPeerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if closer_peers exists")
	}

	return count > 0, nil
}

// FindNode pointed to by the foreign key.
func (o *CloserPeer) FindNode(mods ...qm.QueryMod) findNodeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FindNodeID),
	}

	queryMods = append(queryMods, mods...)

	query := FindNodes(queryMods...)
	queries.SetFrom(query.Query, "\"find_nodes\"")

	return query
}

// Peer pointed to by the foreign key.
func (o *CloserPeer) Peer(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PeerID),
	}

	queryMods = append(queryMods, mods...)

	query := Peers(queryMods...)
	queries.SetFrom(query.Query, "\"peers\"")

	return query
}

// Provide pointed to by the foreign key.
func (o *CloserPeer) Provide(mods ...qm.QueryMod) provideQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProvideID),
	}

	queryMods = append(queryMods, mods...)

	query := Provides(queryMods...)
	queries.SetFrom(query.Query, "\"provides\"")

	return query
}

// LoadFindNode allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (closerPeerL) LoadFindNode(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCloserPeer interface{}, mods queries.Applicator) error {
	var slice []*CloserPeer
	var object *CloserPeer

	if singular {
		object = maybeCloserPeer.(*CloserPeer)
	} else {
		slice = *maybeCloserPeer.(*[]*CloserPeer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &closerPeerR{}
		}
		args = append(args, object.FindNodeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &closerPeerR{}
			}

			for _, a := range args {
				if a == obj.FindNodeID {
					continue Outer
				}
			}

			args = append(args, obj.FindNodeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`find_nodes`),
		qm.WhereIn(`find_nodes.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load FindNode")
	}

	var resultSlice []*FindNode
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice FindNode")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for find_nodes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for find_nodes")
	}

	if len(closerPeerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FindNode = foreign
		if foreign.R == nil {
			foreign.R = &findNodeR{}
		}
		foreign.R.CloserPeers = append(foreign.R.CloserPeers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FindNodeID == foreign.ID {
				local.R.FindNode = foreign
				if foreign.R == nil {
					foreign.R = &findNodeR{}
				}
				foreign.R.CloserPeers = append(foreign.R.CloserPeers, local)
				break
			}
		}
	}

	return nil
}

// LoadPeer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (closerPeerL) LoadPeer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCloserPeer interface{}, mods queries.Applicator) error {
	var slice []*CloserPeer
	var object *CloserPeer

	if singular {
		object = maybeCloserPeer.(*CloserPeer)
	} else {
		slice = *maybeCloserPeer.(*[]*CloserPeer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &closerPeerR{}
		}
		args = append(args, object.PeerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &closerPeerR{}
			}

			for _, a := range args {
				if a == obj.PeerID {
					continue Outer
				}
			}

			args = append(args, obj.PeerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(closerPeerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Peer = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.CloserPeers = append(foreign.R.CloserPeers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PeerID == foreign.ID {
				local.R.Peer = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.CloserPeers = append(foreign.R.CloserPeers, local)
				break
			}
		}
	}

	return nil
}

// LoadProvide allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (closerPeerL) LoadProvide(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCloserPeer interface{}, mods queries.Applicator) error {
	var slice []*CloserPeer
	var object *CloserPeer

	if singular {
		object = maybeCloserPeer.(*CloserPeer)
	} else {
		slice = *maybeCloserPeer.(*[]*CloserPeer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &closerPeerR{}
		}
		args = append(args, object.ProvideID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &closerPeerR{}
			}

			for _, a := range args {
				if a == obj.ProvideID {
					continue Outer
				}
			}

			args = append(args, obj.ProvideID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`provides`),
		qm.WhereIn(`provides.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Provide")
	}

	var resultSlice []*Provide
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Provide")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for provides")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for provides")
	}

	if len(closerPeerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Provide = foreign
		if foreign.R == nil {
			foreign.R = &provideR{}
		}
		foreign.R.CloserPeers = append(foreign.R.CloserPeers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProvideID == foreign.ID {
				local.R.Provide = foreign
				if foreign.R == nil {
					foreign.R = &provideR{}
				}
				foreign.R.CloserPeers = append(foreign.R.CloserPeers, local)
				break
			}
		}
	}

	return nil
}

// SetFindNode of the closerPeer to the related item.
// Sets o.R.FindNode to related.
// Adds o to related.R.CloserPeers.
func (o *CloserPeer) SetFindNode(ctx context.Context, exec boil.ContextExecutor, insert bool, related *FindNode) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"closer_peers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"find_node_id"}),
		strmangle.WhereClause("\"", "\"", 2, closerPeerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ProvideID, o.FindNodeID, o.PeerID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FindNodeID = related.ID
	if o.R == nil {
		o.R = &closerPeerR{
			FindNode: related,
		}
	} else {
		o.R.FindNode = related
	}

	if related.R == nil {
		related.R = &findNodeR{
			CloserPeers: CloserPeerSlice{o},
		}
	} else {
		related.R.CloserPeers = append(related.R.CloserPeers, o)
	}

	return nil
}

// SetPeer of the closerPeer to the related item.
// Sets o.R.Peer to related.
// Adds o to related.R.CloserPeers.
func (o *CloserPeer) SetPeer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"closer_peers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"peer_id"}),
		strmangle.WhereClause("\"", "\"", 2, closerPeerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ProvideID, o.FindNodeID, o.PeerID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PeerID = related.ID
	if o.R == nil {
		o.R = &closerPeerR{
			Peer: related,
		}
	} else {
		o.R.Peer = related
	}

	if related.R == nil {
		related.R = &peerR{
			CloserPeers: CloserPeerSlice{o},
		}
	} else {
		related.R.CloserPeers = append(related.R.CloserPeers, o)
	}

	return nil
}

// SetProvide of the closerPeer to the related item.
// Sets o.R.Provide to related.
// Adds o to related.R.CloserPeers.
func (o *CloserPeer) SetProvide(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Provide) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"closer_peers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"provide_id"}),
		strmangle.WhereClause("\"", "\"", 2, closerPeerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ProvideID, o.FindNodeID, o.PeerID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProvideID = related.ID
	if o.R == nil {
		o.R = &closerPeerR{
			Provide: related,
		}
	} else {
		o.R.Provide = related
	}

	if related.R == nil {
		related.R = &provideR{
			CloserPeers: CloserPeerSlice{o},
		}
	} else {
		related.R.CloserPeers = append(related.R.CloserPeers, o)
	}

	return nil
}

// CloserPeers retrieves all the records using an executor.
func CloserPeers(mods ...qm.QueryMod) closerPeerQuery {
	mods = append(mods, qm.From("\"closer_peers\""))
	return closerPeerQuery{NewQuery(mods...)}
}

// FindCloserPeer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCloserPeer(ctx context.Context, exec boil.ContextExecutor, provideID int, findNodeID int, peerID int, selectCols ...string) (*CloserPeer, error) {
	closerPeerObj := &CloserPeer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"closer_peers\" where \"provide_id\"=$1 AND \"find_node_id\"=$2 AND \"peer_id\"=$3", sel,
	)

	q := queries.Raw(query, provideID, findNodeID, peerID)

	err := q.Bind(ctx, exec, closerPeerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from closer_peers")
	}

	if err = closerPeerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return closerPeerObj, err
	}

	return closerPeerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CloserPeer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no closer_peers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(closerPeerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	closerPeerInsertCacheMut.RLock()
	cache, cached := closerPeerInsertCache[key]
	closerPeerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			closerPeerAllColumns,
			closerPeerColumnsWithDefault,
			closerPeerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(closerPeerType, closerPeerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(closerPeerType, closerPeerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"closer_peers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"closer_peers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into closer_peers")
	}

	if !cached {
		closerPeerInsertCacheMut.Lock()
		closerPeerInsertCache[key] = cache
		closerPeerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CloserPeer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CloserPeer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	closerPeerUpdateCacheMut.RLock()
	cache, cached := closerPeerUpdateCache[key]
	closerPeerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			closerPeerAllColumns,
			closerPeerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update closer_peers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"closer_peers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, closerPeerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(closerPeerType, closerPeerMapping, append(wl, closerPeerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update closer_peers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for closer_peers")
	}

	if !cached {
		closerPeerUpdateCacheMut.Lock()
		closerPeerUpdateCache[key] = cache
		closerPeerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q closerPeerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for closer_peers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for closer_peers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CloserPeerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), closerPeerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"closer_peers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, closerPeerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in closerPeer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all closerPeer")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CloserPeer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no closer_peers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(closerPeerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	closerPeerUpsertCacheMut.RLock()
	cache, cached := closerPeerUpsertCache[key]
	closerPeerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			closerPeerAllColumns,
			closerPeerColumnsWithDefault,
			closerPeerColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			closerPeerAllColumns,
			closerPeerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert closer_peers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(closerPeerPrimaryKeyColumns))
			copy(conflict, closerPeerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"closer_peers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(closerPeerType, closerPeerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(closerPeerType, closerPeerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert closer_peers")
	}

	if !cached {
		closerPeerUpsertCacheMut.Lock()
		closerPeerUpsertCache[key] = cache
		closerPeerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CloserPeer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CloserPeer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CloserPeer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), closerPeerPrimaryKeyMapping)
	sql := "DELETE FROM \"closer_peers\" WHERE \"provide_id\"=$1 AND \"find_node_id\"=$2 AND \"peer_id\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from closer_peers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for closer_peers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q closerPeerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no closerPeerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from closer_peers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for closer_peers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CloserPeerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(closerPeerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), closerPeerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"closer_peers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, closerPeerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from closerPeer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for closer_peers")
	}

	if len(closerPeerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CloserPeer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCloserPeer(ctx, exec, o.ProvideID, o.FindNodeID, o.PeerID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CloserPeerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CloserPeerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), closerPeerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"closer_peers\".* FROM \"closer_peers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, closerPeerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CloserPeerSlice")
	}

	*o = slice

	return nil
}

// CloserPeerExists checks if the CloserPeer row exists.
func CloserPeerExists(ctx context.Context, exec boil.ContextExecutor, provideID int, findNodeID int, peerID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"closer_peers\" where \"provide_id\"=$1 AND \"find_node_id\"=$2 AND \"peer_id\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, provideID, findNodeID, peerID)
	}
	row := exec.QueryRowContext(ctx, sql, provideID, findNodeID, peerID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if closer_peers exists")
	}

	return exists, nil
}
