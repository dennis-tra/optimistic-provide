// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FindNodesRPC is an object representing the database table.
type FindNodesRPC struct {
	ID               int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	QueryID          string      `boil:"query_id" json:"query_id" toml:"query_id" yaml:"query_id"`
	LocalID          int         `boil:"local_id" json:"local_id" toml:"local_id" yaml:"local_id"`
	RemoteID         int         `boil:"remote_id" json:"remote_id" toml:"remote_id" yaml:"remote_id"`
	StartedAt        time.Time   `boil:"started_at" json:"started_at" toml:"started_at" yaml:"started_at"`
	EndedAt          time.Time   `boil:"ended_at" json:"ended_at" toml:"ended_at" yaml:"ended_at"`
	CloserPeersCount null.Int    `boil:"closer_peers_count" json:"closer_peers_count,omitempty" toml:"closer_peers_count" yaml:"closer_peers_count,omitempty"`
	Error            null.String `boil:"error" json:"error,omitempty" toml:"error" yaml:"error,omitempty"`

	R *findNodesRPCR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L findNodesRPCL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FindNodesRPCColumns = struct {
	ID               string
	QueryID          string
	LocalID          string
	RemoteID         string
	StartedAt        string
	EndedAt          string
	CloserPeersCount string
	Error            string
}{
	ID:               "id",
	QueryID:          "query_id",
	LocalID:          "local_id",
	RemoteID:         "remote_id",
	StartedAt:        "started_at",
	EndedAt:          "ended_at",
	CloserPeersCount: "closer_peers_count",
	Error:            "error",
}

var FindNodesRPCTableColumns = struct {
	ID               string
	QueryID          string
	LocalID          string
	RemoteID         string
	StartedAt        string
	EndedAt          string
	CloserPeersCount string
	Error            string
}{
	ID:               "find_nodes_rpcs.id",
	QueryID:          "find_nodes_rpcs.query_id",
	LocalID:          "find_nodes_rpcs.local_id",
	RemoteID:         "find_nodes_rpcs.remote_id",
	StartedAt:        "find_nodes_rpcs.started_at",
	EndedAt:          "find_nodes_rpcs.ended_at",
	CloserPeersCount: "find_nodes_rpcs.closer_peers_count",
	Error:            "find_nodes_rpcs.error",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var FindNodesRPCWhere = struct {
	ID               whereHelperint
	QueryID          whereHelperstring
	LocalID          whereHelperint
	RemoteID         whereHelperint
	StartedAt        whereHelpertime_Time
	EndedAt          whereHelpertime_Time
	CloserPeersCount whereHelpernull_Int
	Error            whereHelpernull_String
}{
	ID:               whereHelperint{field: "\"find_nodes_rpcs\".\"id\""},
	QueryID:          whereHelperstring{field: "\"find_nodes_rpcs\".\"query_id\""},
	LocalID:          whereHelperint{field: "\"find_nodes_rpcs\".\"local_id\""},
	RemoteID:         whereHelperint{field: "\"find_nodes_rpcs\".\"remote_id\""},
	StartedAt:        whereHelpertime_Time{field: "\"find_nodes_rpcs\".\"started_at\""},
	EndedAt:          whereHelpertime_Time{field: "\"find_nodes_rpcs\".\"ended_at\""},
	CloserPeersCount: whereHelpernull_Int{field: "\"find_nodes_rpcs\".\"closer_peers_count\""},
	Error:            whereHelpernull_String{field: "\"find_nodes_rpcs\".\"error\""},
}

// FindNodesRPCRels is where relationship names are stored.
var FindNodesRPCRels = struct {
	Local                  string
	Remote                 string
	FindNodeRPCCloserPeers string
	Provides               string
}{
	Local:                  "Local",
	Remote:                 "Remote",
	FindNodeRPCCloserPeers: "FindNodeRPCCloserPeers",
	Provides:               "Provides",
}

// findNodesRPCR is where relationships are stored.
type findNodesRPCR struct {
	Local                  *Peer           `boil:"Local" json:"Local" toml:"Local" yaml:"Local"`
	Remote                 *Peer           `boil:"Remote" json:"Remote" toml:"Remote" yaml:"Remote"`
	FindNodeRPCCloserPeers CloserPeerSlice `boil:"FindNodeRPCCloserPeers" json:"FindNodeRPCCloserPeers" toml:"FindNodeRPCCloserPeers" yaml:"FindNodeRPCCloserPeers"`
	Provides               ProvideSlice    `boil:"Provides" json:"Provides" toml:"Provides" yaml:"Provides"`
}

// NewStruct creates a new relationship struct
func (*findNodesRPCR) NewStruct() *findNodesRPCR {
	return &findNodesRPCR{}
}

// findNodesRPCL is where Load methods for each relationship are stored.
type findNodesRPCL struct{}

var (
	findNodesRPCAllColumns            = []string{"id", "query_id", "local_id", "remote_id", "started_at", "ended_at", "closer_peers_count", "error"}
	findNodesRPCColumnsWithoutDefault = []string{"query_id", "local_id", "remote_id", "started_at", "ended_at", "closer_peers_count", "error"}
	findNodesRPCColumnsWithDefault    = []string{"id"}
	findNodesRPCPrimaryKeyColumns     = []string{"id"}
)

type (
	// FindNodesRPCSlice is an alias for a slice of pointers to FindNodesRPC.
	// This should almost always be used instead of []FindNodesRPC.
	FindNodesRPCSlice []*FindNodesRPC
	// FindNodesRPCHook is the signature for custom FindNodesRPC hook methods
	FindNodesRPCHook func(context.Context, boil.ContextExecutor, *FindNodesRPC) error

	findNodesRPCQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	findNodesRPCType                 = reflect.TypeOf(&FindNodesRPC{})
	findNodesRPCMapping              = queries.MakeStructMapping(findNodesRPCType)
	findNodesRPCPrimaryKeyMapping, _ = queries.BindMapping(findNodesRPCType, findNodesRPCMapping, findNodesRPCPrimaryKeyColumns)
	findNodesRPCInsertCacheMut       sync.RWMutex
	findNodesRPCInsertCache          = make(map[string]insertCache)
	findNodesRPCUpdateCacheMut       sync.RWMutex
	findNodesRPCUpdateCache          = make(map[string]updateCache)
	findNodesRPCUpsertCacheMut       sync.RWMutex
	findNodesRPCUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var findNodesRPCBeforeInsertHooks []FindNodesRPCHook
var findNodesRPCBeforeUpdateHooks []FindNodesRPCHook
var findNodesRPCBeforeDeleteHooks []FindNodesRPCHook
var findNodesRPCBeforeUpsertHooks []FindNodesRPCHook

var findNodesRPCAfterInsertHooks []FindNodesRPCHook
var findNodesRPCAfterSelectHooks []FindNodesRPCHook
var findNodesRPCAfterUpdateHooks []FindNodesRPCHook
var findNodesRPCAfterDeleteHooks []FindNodesRPCHook
var findNodesRPCAfterUpsertHooks []FindNodesRPCHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FindNodesRPC) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range findNodesRPCBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FindNodesRPC) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range findNodesRPCBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FindNodesRPC) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range findNodesRPCBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FindNodesRPC) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range findNodesRPCBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FindNodesRPC) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range findNodesRPCAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FindNodesRPC) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range findNodesRPCAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FindNodesRPC) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range findNodesRPCAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FindNodesRPC) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range findNodesRPCAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FindNodesRPC) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range findNodesRPCAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFindNodesRPCHook registers your hook function for all future operations.
func AddFindNodesRPCHook(hookPoint boil.HookPoint, findNodesRPCHook FindNodesRPCHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		findNodesRPCBeforeInsertHooks = append(findNodesRPCBeforeInsertHooks, findNodesRPCHook)
	case boil.BeforeUpdateHook:
		findNodesRPCBeforeUpdateHooks = append(findNodesRPCBeforeUpdateHooks, findNodesRPCHook)
	case boil.BeforeDeleteHook:
		findNodesRPCBeforeDeleteHooks = append(findNodesRPCBeforeDeleteHooks, findNodesRPCHook)
	case boil.BeforeUpsertHook:
		findNodesRPCBeforeUpsertHooks = append(findNodesRPCBeforeUpsertHooks, findNodesRPCHook)
	case boil.AfterInsertHook:
		findNodesRPCAfterInsertHooks = append(findNodesRPCAfterInsertHooks, findNodesRPCHook)
	case boil.AfterSelectHook:
		findNodesRPCAfterSelectHooks = append(findNodesRPCAfterSelectHooks, findNodesRPCHook)
	case boil.AfterUpdateHook:
		findNodesRPCAfterUpdateHooks = append(findNodesRPCAfterUpdateHooks, findNodesRPCHook)
	case boil.AfterDeleteHook:
		findNodesRPCAfterDeleteHooks = append(findNodesRPCAfterDeleteHooks, findNodesRPCHook)
	case boil.AfterUpsertHook:
		findNodesRPCAfterUpsertHooks = append(findNodesRPCAfterUpsertHooks, findNodesRPCHook)
	}
}

// One returns a single findNodesRPC record from the query.
func (q findNodesRPCQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FindNodesRPC, error) {
	o := &FindNodesRPC{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for find_nodes_rpcs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FindNodesRPC records from the query.
func (q findNodesRPCQuery) All(ctx context.Context, exec boil.ContextExecutor) (FindNodesRPCSlice, error) {
	var o []*FindNodesRPC

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FindNodesRPC slice")
	}

	if len(findNodesRPCAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FindNodesRPC records in the query.
func (q findNodesRPCQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count find_nodes_rpcs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q findNodesRPCQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if find_nodes_rpcs exists")
	}

	return count > 0, nil
}

// Local pointed to by the foreign key.
func (o *FindNodesRPC) Local(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LocalID),
	}

	queryMods = append(queryMods, mods...)

	query := Peers(queryMods...)
	queries.SetFrom(query.Query, "\"peers\"")

	return query
}

// Remote pointed to by the foreign key.
func (o *FindNodesRPC) Remote(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RemoteID),
	}

	queryMods = append(queryMods, mods...)

	query := Peers(queryMods...)
	queries.SetFrom(query.Query, "\"peers\"")

	return query
}

// FindNodeRPCCloserPeers retrieves all the closer_peer's CloserPeers with an executor via find_node_rpc_id column.
func (o *FindNodesRPC) FindNodeRPCCloserPeers(mods ...qm.QueryMod) closerPeerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"closer_peers\".\"find_node_rpc_id\"=?", o.ID),
	)

	query := CloserPeers(queryMods...)
	queries.SetFrom(query.Query, "\"closer_peers\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"closer_peers\".*"})
	}

	return query
}

// Provides retrieves all the provide's Provides with an executor.
func (o *FindNodesRPC) Provides(mods ...qm.QueryMod) provideQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"provides_x_find_nodes_rpcs\" on \"provides\".\"id\" = \"provides_x_find_nodes_rpcs\".\"provide_id\""),
		qm.Where("\"provides_x_find_nodes_rpcs\".\"find_nodes_rpc_id\"=?", o.ID),
	)

	query := Provides(queryMods...)
	queries.SetFrom(query.Query, "\"provides\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"provides\".*"})
	}

	return query
}

// LoadLocal allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (findNodesRPCL) LoadLocal(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFindNodesRPC interface{}, mods queries.Applicator) error {
	var slice []*FindNodesRPC
	var object *FindNodesRPC

	if singular {
		object = maybeFindNodesRPC.(*FindNodesRPC)
	} else {
		slice = *maybeFindNodesRPC.(*[]*FindNodesRPC)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &findNodesRPCR{}
		}
		args = append(args, object.LocalID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &findNodesRPCR{}
			}

			for _, a := range args {
				if a == obj.LocalID {
					continue Outer
				}
			}

			args = append(args, obj.LocalID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(findNodesRPCAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Local = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.LocalFindNodesRPCS = append(foreign.R.LocalFindNodesRPCS, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LocalID == foreign.ID {
				local.R.Local = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.LocalFindNodesRPCS = append(foreign.R.LocalFindNodesRPCS, local)
				break
			}
		}
	}

	return nil
}

// LoadRemote allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (findNodesRPCL) LoadRemote(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFindNodesRPC interface{}, mods queries.Applicator) error {
	var slice []*FindNodesRPC
	var object *FindNodesRPC

	if singular {
		object = maybeFindNodesRPC.(*FindNodesRPC)
	} else {
		slice = *maybeFindNodesRPC.(*[]*FindNodesRPC)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &findNodesRPCR{}
		}
		args = append(args, object.RemoteID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &findNodesRPCR{}
			}

			for _, a := range args {
				if a == obj.RemoteID {
					continue Outer
				}
			}

			args = append(args, obj.RemoteID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(findNodesRPCAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Remote = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.RemoteFindNodesRPCS = append(foreign.R.RemoteFindNodesRPCS, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RemoteID == foreign.ID {
				local.R.Remote = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.RemoteFindNodesRPCS = append(foreign.R.RemoteFindNodesRPCS, local)
				break
			}
		}
	}

	return nil
}

// LoadFindNodeRPCCloserPeers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (findNodesRPCL) LoadFindNodeRPCCloserPeers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFindNodesRPC interface{}, mods queries.Applicator) error {
	var slice []*FindNodesRPC
	var object *FindNodesRPC

	if singular {
		object = maybeFindNodesRPC.(*FindNodesRPC)
	} else {
		slice = *maybeFindNodesRPC.(*[]*FindNodesRPC)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &findNodesRPCR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &findNodesRPCR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`closer_peers`),
		qm.WhereIn(`closer_peers.find_node_rpc_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load closer_peers")
	}

	var resultSlice []*CloserPeer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice closer_peers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on closer_peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for closer_peers")
	}

	if len(closerPeerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FindNodeRPCCloserPeers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &closerPeerR{}
			}
			foreign.R.FindNodeRPC = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.FindNodeRPCID {
				local.R.FindNodeRPCCloserPeers = append(local.R.FindNodeRPCCloserPeers, foreign)
				if foreign.R == nil {
					foreign.R = &closerPeerR{}
				}
				foreign.R.FindNodeRPC = local
				break
			}
		}
	}

	return nil
}

// LoadProvides allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (findNodesRPCL) LoadProvides(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFindNodesRPC interface{}, mods queries.Applicator) error {
	var slice []*FindNodesRPC
	var object *FindNodesRPC

	if singular {
		object = maybeFindNodesRPC.(*FindNodesRPC)
	} else {
		slice = *maybeFindNodesRPC.(*[]*FindNodesRPC)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &findNodesRPCR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &findNodesRPCR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"provides\".id, \"provides\".provider_id, \"provides\".content_id, \"provides\".distance, \"provides\".initial_routing_table_id, \"provides\".final_routing_table_id, \"provides\".started_at, \"provides\".ended_at, \"provides\".error, \"provides\".done_at, \"provides\".updated_at, \"provides\".created_at, \"a\".\"find_nodes_rpc_id\""),
		qm.From("\"provides\""),
		qm.InnerJoin("\"provides_x_find_nodes_rpcs\" as \"a\" on \"provides\".\"id\" = \"a\".\"provide_id\""),
		qm.WhereIn("\"a\".\"find_nodes_rpc_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load provides")
	}

	var resultSlice []*Provide

	var localJoinCols []int
	for results.Next() {
		one := new(Provide)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.ProviderID, &one.ContentID, &one.Distance, &one.InitialRoutingTableID, &one.FinalRoutingTableID, &one.StartedAt, &one.EndedAt, &one.Error, &one.DoneAt, &one.UpdatedAt, &one.CreatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for provides")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice provides")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on provides")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for provides")
	}

	if len(provideAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Provides = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &provideR{}
			}
			foreign.R.FindNodesRPCS = append(foreign.R.FindNodesRPCS, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Provides = append(local.R.Provides, foreign)
				if foreign.R == nil {
					foreign.R = &provideR{}
				}
				foreign.R.FindNodesRPCS = append(foreign.R.FindNodesRPCS, local)
				break
			}
		}
	}

	return nil
}

// SetLocal of the findNodesRPC to the related item.
// Sets o.R.Local to related.
// Adds o to related.R.LocalFindNodesRPCS.
func (o *FindNodesRPC) SetLocal(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"find_nodes_rpcs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"local_id"}),
		strmangle.WhereClause("\"", "\"", 2, findNodesRPCPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LocalID = related.ID
	if o.R == nil {
		o.R = &findNodesRPCR{
			Local: related,
		}
	} else {
		o.R.Local = related
	}

	if related.R == nil {
		related.R = &peerR{
			LocalFindNodesRPCS: FindNodesRPCSlice{o},
		}
	} else {
		related.R.LocalFindNodesRPCS = append(related.R.LocalFindNodesRPCS, o)
	}

	return nil
}

// SetRemote of the findNodesRPC to the related item.
// Sets o.R.Remote to related.
// Adds o to related.R.RemoteFindNodesRPCS.
func (o *FindNodesRPC) SetRemote(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"find_nodes_rpcs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"remote_id"}),
		strmangle.WhereClause("\"", "\"", 2, findNodesRPCPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RemoteID = related.ID
	if o.R == nil {
		o.R = &findNodesRPCR{
			Remote: related,
		}
	} else {
		o.R.Remote = related
	}

	if related.R == nil {
		related.R = &peerR{
			RemoteFindNodesRPCS: FindNodesRPCSlice{o},
		}
	} else {
		related.R.RemoteFindNodesRPCS = append(related.R.RemoteFindNodesRPCS, o)
	}

	return nil
}

// AddFindNodeRPCCloserPeers adds the given related objects to the existing relationships
// of the find_nodes_rpc, optionally inserting them as new records.
// Appends related to o.R.FindNodeRPCCloserPeers.
// Sets related.R.FindNodeRPC appropriately.
func (o *FindNodesRPC) AddFindNodeRPCCloserPeers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CloserPeer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FindNodeRPCID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"closer_peers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"find_node_rpc_id"}),
				strmangle.WhereClause("\"", "\"", 2, closerPeerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.FindNodeRPCID, rel.PeerID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FindNodeRPCID = o.ID
		}
	}

	if o.R == nil {
		o.R = &findNodesRPCR{
			FindNodeRPCCloserPeers: related,
		}
	} else {
		o.R.FindNodeRPCCloserPeers = append(o.R.FindNodeRPCCloserPeers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &closerPeerR{
				FindNodeRPC: o,
			}
		} else {
			rel.R.FindNodeRPC = o
		}
	}
	return nil
}

// AddProvides adds the given related objects to the existing relationships
// of the find_nodes_rpc, optionally inserting them as new records.
// Appends related to o.R.Provides.
// Sets related.R.FindNodesRPCS appropriately.
func (o *FindNodesRPC) AddProvides(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Provide) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"provides_x_find_nodes_rpcs\" (\"find_nodes_rpc_id\", \"provide_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &findNodesRPCR{
			Provides: related,
		}
	} else {
		o.R.Provides = append(o.R.Provides, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &provideR{
				FindNodesRPCS: FindNodesRPCSlice{o},
			}
		} else {
			rel.R.FindNodesRPCS = append(rel.R.FindNodesRPCS, o)
		}
	}
	return nil
}

// SetProvides removes all previously related items of the
// find_nodes_rpc replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.FindNodesRPCS's Provides accordingly.
// Replaces o.R.Provides with related.
// Sets related.R.FindNodesRPCS's Provides accordingly.
func (o *FindNodesRPC) SetProvides(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Provide) error {
	query := "delete from \"provides_x_find_nodes_rpcs\" where \"find_nodes_rpc_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeProvidesFromFindNodesRPCSSlice(o, related)
	if o.R != nil {
		o.R.Provides = nil
	}
	return o.AddProvides(ctx, exec, insert, related...)
}

// RemoveProvides relationships from objects passed in.
// Removes related items from R.Provides (uses pointer comparison, removal does not keep order)
// Sets related.R.FindNodesRPCS.
func (o *FindNodesRPC) RemoveProvides(ctx context.Context, exec boil.ContextExecutor, related ...*Provide) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"provides_x_find_nodes_rpcs\" where \"find_nodes_rpc_id\" = $1 and \"provide_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeProvidesFromFindNodesRPCSSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Provides {
			if rel != ri {
				continue
			}

			ln := len(o.R.Provides)
			if ln > 1 && i < ln-1 {
				o.R.Provides[i] = o.R.Provides[ln-1]
			}
			o.R.Provides = o.R.Provides[:ln-1]
			break
		}
	}

	return nil
}

func removeProvidesFromFindNodesRPCSSlice(o *FindNodesRPC, related []*Provide) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.FindNodesRPCS {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.FindNodesRPCS)
			if ln > 1 && i < ln-1 {
				rel.R.FindNodesRPCS[i] = rel.R.FindNodesRPCS[ln-1]
			}
			rel.R.FindNodesRPCS = rel.R.FindNodesRPCS[:ln-1]
			break
		}
	}
}

// FindNodesRPCS retrieves all the records using an executor.
func FindNodesRPCS(mods ...qm.QueryMod) findNodesRPCQuery {
	mods = append(mods, qm.From("\"find_nodes_rpcs\""))
	return findNodesRPCQuery{NewQuery(mods...)}
}

// FindFindNodesRPC retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFindNodesRPC(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*FindNodesRPC, error) {
	findNodesRPCObj := &FindNodesRPC{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"find_nodes_rpcs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, findNodesRPCObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from find_nodes_rpcs")
	}

	if err = findNodesRPCObj.doAfterSelectHooks(ctx, exec); err != nil {
		return findNodesRPCObj, err
	}

	return findNodesRPCObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FindNodesRPC) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no find_nodes_rpcs provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(findNodesRPCColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	findNodesRPCInsertCacheMut.RLock()
	cache, cached := findNodesRPCInsertCache[key]
	findNodesRPCInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			findNodesRPCAllColumns,
			findNodesRPCColumnsWithDefault,
			findNodesRPCColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(findNodesRPCType, findNodesRPCMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(findNodesRPCType, findNodesRPCMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"find_nodes_rpcs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"find_nodes_rpcs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into find_nodes_rpcs")
	}

	if !cached {
		findNodesRPCInsertCacheMut.Lock()
		findNodesRPCInsertCache[key] = cache
		findNodesRPCInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FindNodesRPC.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FindNodesRPC) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	findNodesRPCUpdateCacheMut.RLock()
	cache, cached := findNodesRPCUpdateCache[key]
	findNodesRPCUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			findNodesRPCAllColumns,
			findNodesRPCPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update find_nodes_rpcs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"find_nodes_rpcs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, findNodesRPCPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(findNodesRPCType, findNodesRPCMapping, append(wl, findNodesRPCPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update find_nodes_rpcs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for find_nodes_rpcs")
	}

	if !cached {
		findNodesRPCUpdateCacheMut.Lock()
		findNodesRPCUpdateCache[key] = cache
		findNodesRPCUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q findNodesRPCQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for find_nodes_rpcs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for find_nodes_rpcs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FindNodesRPCSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), findNodesRPCPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"find_nodes_rpcs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, findNodesRPCPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in findNodesRPC slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all findNodesRPC")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FindNodesRPC) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no find_nodes_rpcs provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(findNodesRPCColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	findNodesRPCUpsertCacheMut.RLock()
	cache, cached := findNodesRPCUpsertCache[key]
	findNodesRPCUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			findNodesRPCAllColumns,
			findNodesRPCColumnsWithDefault,
			findNodesRPCColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			findNodesRPCAllColumns,
			findNodesRPCPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert find_nodes_rpcs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(findNodesRPCPrimaryKeyColumns))
			copy(conflict, findNodesRPCPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"find_nodes_rpcs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(findNodesRPCType, findNodesRPCMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(findNodesRPCType, findNodesRPCMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert find_nodes_rpcs")
	}

	if !cached {
		findNodesRPCUpsertCacheMut.Lock()
		findNodesRPCUpsertCache[key] = cache
		findNodesRPCUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FindNodesRPC record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FindNodesRPC) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FindNodesRPC provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), findNodesRPCPrimaryKeyMapping)
	sql := "DELETE FROM \"find_nodes_rpcs\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from find_nodes_rpcs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for find_nodes_rpcs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q findNodesRPCQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no findNodesRPCQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from find_nodes_rpcs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for find_nodes_rpcs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FindNodesRPCSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(findNodesRPCBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), findNodesRPCPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"find_nodes_rpcs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, findNodesRPCPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from findNodesRPC slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for find_nodes_rpcs")
	}

	if len(findNodesRPCAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FindNodesRPC) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFindNodesRPC(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FindNodesRPCSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FindNodesRPCSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), findNodesRPCPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"find_nodes_rpcs\".* FROM \"find_nodes_rpcs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, findNodesRPCPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FindNodesRPCSlice")
	}

	*o = slice

	return nil
}

// FindNodesRPCExists checks if the FindNodesRPC row exists.
func FindNodesRPCExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"find_nodes_rpcs\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if find_nodes_rpcs exists")
	}

	return exists, nil
}
