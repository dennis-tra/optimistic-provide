// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GetProvider is an object representing the database table.
type GetProvider struct {
	ID                 int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	RetrievalID        int         `boil:"retrieval_id" json:"retrieval_id" toml:"retrieval_id" yaml:"retrieval_id"`
	LocalID            int         `boil:"local_id" json:"local_id" toml:"local_id" yaml:"local_id"`
	RemoteID           int         `boil:"remote_id" json:"remote_id" toml:"remote_id" yaml:"remote_id"`
	StartedAt          time.Time   `boil:"started_at" json:"started_at" toml:"started_at" yaml:"started_at"`
	EndedAt            time.Time   `boil:"ended_at" json:"ended_at" toml:"ended_at" yaml:"ended_at"`
	ProviderPeersCount null.Int    `boil:"provider_peers_count" json:"provider_peers_count,omitempty" toml:"provider_peers_count" yaml:"provider_peers_count,omitempty"`
	Error              null.String `boil:"error" json:"error,omitempty" toml:"error" yaml:"error,omitempty"`

	R *getProviderR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L getProviderL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GetProviderColumns = struct {
	ID                 string
	RetrievalID        string
	LocalID            string
	RemoteID           string
	StartedAt          string
	EndedAt            string
	ProviderPeersCount string
	Error              string
}{
	ID:                 "id",
	RetrievalID:        "retrieval_id",
	LocalID:            "local_id",
	RemoteID:           "remote_id",
	StartedAt:          "started_at",
	EndedAt:            "ended_at",
	ProviderPeersCount: "provider_peers_count",
	Error:              "error",
}

var GetProviderTableColumns = struct {
	ID                 string
	RetrievalID        string
	LocalID            string
	RemoteID           string
	StartedAt          string
	EndedAt            string
	ProviderPeersCount string
	Error              string
}{
	ID:                 "get_providers.id",
	RetrievalID:        "get_providers.retrieval_id",
	LocalID:            "get_providers.local_id",
	RemoteID:           "get_providers.remote_id",
	StartedAt:          "get_providers.started_at",
	EndedAt:            "get_providers.ended_at",
	ProviderPeersCount: "get_providers.provider_peers_count",
	Error:              "get_providers.error",
}

// Generated where

var GetProviderWhere = struct {
	ID                 whereHelperint
	RetrievalID        whereHelperint
	LocalID            whereHelperint
	RemoteID           whereHelperint
	StartedAt          whereHelpertime_Time
	EndedAt            whereHelpertime_Time
	ProviderPeersCount whereHelpernull_Int
	Error              whereHelpernull_String
}{
	ID:                 whereHelperint{field: "\"get_providers\".\"id\""},
	RetrievalID:        whereHelperint{field: "\"get_providers\".\"retrieval_id\""},
	LocalID:            whereHelperint{field: "\"get_providers\".\"local_id\""},
	RemoteID:           whereHelperint{field: "\"get_providers\".\"remote_id\""},
	StartedAt:          whereHelpertime_Time{field: "\"get_providers\".\"started_at\""},
	EndedAt:            whereHelpertime_Time{field: "\"get_providers\".\"ended_at\""},
	ProviderPeersCount: whereHelpernull_Int{field: "\"get_providers\".\"provider_peers_count\""},
	Error:              whereHelpernull_String{field: "\"get_providers\".\"error\""},
}

// GetProviderRels is where relationship names are stored.
var GetProviderRels = struct {
	Local         string
	Remote        string
	Retrieval     string
	ProviderPeers string
}{
	Local:         "Local",
	Remote:        "Remote",
	Retrieval:     "Retrieval",
	ProviderPeers: "ProviderPeers",
}

// getProviderR is where relationships are stored.
type getProviderR struct {
	Local         *Peer             `boil:"Local" json:"Local" toml:"Local" yaml:"Local"`
	Remote        *Peer             `boil:"Remote" json:"Remote" toml:"Remote" yaml:"Remote"`
	Retrieval     *Retrieval        `boil:"Retrieval" json:"Retrieval" toml:"Retrieval" yaml:"Retrieval"`
	ProviderPeers ProviderPeerSlice `boil:"ProviderPeers" json:"ProviderPeers" toml:"ProviderPeers" yaml:"ProviderPeers"`
}

// NewStruct creates a new relationship struct
func (*getProviderR) NewStruct() *getProviderR {
	return &getProviderR{}
}

// getProviderL is where Load methods for each relationship are stored.
type getProviderL struct{}

var (
	getProviderAllColumns            = []string{"id", "retrieval_id", "local_id", "remote_id", "started_at", "ended_at", "provider_peers_count", "error"}
	getProviderColumnsWithoutDefault = []string{"retrieval_id", "local_id", "remote_id", "started_at", "ended_at", "provider_peers_count", "error"}
	getProviderColumnsWithDefault    = []string{"id"}
	getProviderPrimaryKeyColumns     = []string{"id"}
)

type (
	// GetProviderSlice is an alias for a slice of pointers to GetProvider.
	// This should almost always be used instead of []GetProvider.
	GetProviderSlice []*GetProvider
	// GetProviderHook is the signature for custom GetProvider hook methods
	GetProviderHook func(context.Context, boil.ContextExecutor, *GetProvider) error

	getProviderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	getProviderType                 = reflect.TypeOf(&GetProvider{})
	getProviderMapping              = queries.MakeStructMapping(getProviderType)
	getProviderPrimaryKeyMapping, _ = queries.BindMapping(getProviderType, getProviderMapping, getProviderPrimaryKeyColumns)
	getProviderInsertCacheMut       sync.RWMutex
	getProviderInsertCache          = make(map[string]insertCache)
	getProviderUpdateCacheMut       sync.RWMutex
	getProviderUpdateCache          = make(map[string]updateCache)
	getProviderUpsertCacheMut       sync.RWMutex
	getProviderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var getProviderBeforeInsertHooks []GetProviderHook
var getProviderBeforeUpdateHooks []GetProviderHook
var getProviderBeforeDeleteHooks []GetProviderHook
var getProviderBeforeUpsertHooks []GetProviderHook

var getProviderAfterInsertHooks []GetProviderHook
var getProviderAfterSelectHooks []GetProviderHook
var getProviderAfterUpdateHooks []GetProviderHook
var getProviderAfterDeleteHooks []GetProviderHook
var getProviderAfterUpsertHooks []GetProviderHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GetProvider) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range getProviderBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GetProvider) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range getProviderBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GetProvider) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range getProviderBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GetProvider) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range getProviderBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GetProvider) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range getProviderAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GetProvider) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range getProviderAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GetProvider) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range getProviderAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GetProvider) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range getProviderAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GetProvider) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range getProviderAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGetProviderHook registers your hook function for all future operations.
func AddGetProviderHook(hookPoint boil.HookPoint, getProviderHook GetProviderHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		getProviderBeforeInsertHooks = append(getProviderBeforeInsertHooks, getProviderHook)
	case boil.BeforeUpdateHook:
		getProviderBeforeUpdateHooks = append(getProviderBeforeUpdateHooks, getProviderHook)
	case boil.BeforeDeleteHook:
		getProviderBeforeDeleteHooks = append(getProviderBeforeDeleteHooks, getProviderHook)
	case boil.BeforeUpsertHook:
		getProviderBeforeUpsertHooks = append(getProviderBeforeUpsertHooks, getProviderHook)
	case boil.AfterInsertHook:
		getProviderAfterInsertHooks = append(getProviderAfterInsertHooks, getProviderHook)
	case boil.AfterSelectHook:
		getProviderAfterSelectHooks = append(getProviderAfterSelectHooks, getProviderHook)
	case boil.AfterUpdateHook:
		getProviderAfterUpdateHooks = append(getProviderAfterUpdateHooks, getProviderHook)
	case boil.AfterDeleteHook:
		getProviderAfterDeleteHooks = append(getProviderAfterDeleteHooks, getProviderHook)
	case boil.AfterUpsertHook:
		getProviderAfterUpsertHooks = append(getProviderAfterUpsertHooks, getProviderHook)
	}
}

// One returns a single getProvider record from the query.
func (q getProviderQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GetProvider, error) {
	o := &GetProvider{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for get_providers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GetProvider records from the query.
func (q getProviderQuery) All(ctx context.Context, exec boil.ContextExecutor) (GetProviderSlice, error) {
	var o []*GetProvider

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GetProvider slice")
	}

	if len(getProviderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GetProvider records in the query.
func (q getProviderQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count get_providers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q getProviderQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if get_providers exists")
	}

	return count > 0, nil
}

// Local pointed to by the foreign key.
func (o *GetProvider) Local(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LocalID),
	}

	queryMods = append(queryMods, mods...)

	query := Peers(queryMods...)
	queries.SetFrom(query.Query, "\"peers\"")

	return query
}

// Remote pointed to by the foreign key.
func (o *GetProvider) Remote(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RemoteID),
	}

	queryMods = append(queryMods, mods...)

	query := Peers(queryMods...)
	queries.SetFrom(query.Query, "\"peers\"")

	return query
}

// Retrieval pointed to by the foreign key.
func (o *GetProvider) Retrieval(mods ...qm.QueryMod) retrievalQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RetrievalID),
	}

	queryMods = append(queryMods, mods...)

	query := Retrievals(queryMods...)
	queries.SetFrom(query.Query, "\"retrievals\"")

	return query
}

// ProviderPeers retrieves all the provider_peer's ProviderPeers with an executor.
func (o *GetProvider) ProviderPeers(mods ...qm.QueryMod) providerPeerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"provider_peers\".\"get_providers_id\"=?", o.ID),
	)

	query := ProviderPeers(queryMods...)
	queries.SetFrom(query.Query, "\"provider_peers\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"provider_peers\".*"})
	}

	return query
}

// LoadLocal allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (getProviderL) LoadLocal(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGetProvider interface{}, mods queries.Applicator) error {
	var slice []*GetProvider
	var object *GetProvider

	if singular {
		object = maybeGetProvider.(*GetProvider)
	} else {
		slice = *maybeGetProvider.(*[]*GetProvider)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &getProviderR{}
		}
		args = append(args, object.LocalID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &getProviderR{}
			}

			for _, a := range args {
				if a == obj.LocalID {
					continue Outer
				}
			}

			args = append(args, obj.LocalID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(getProviderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Local = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.LocalGetProviders = append(foreign.R.LocalGetProviders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LocalID == foreign.ID {
				local.R.Local = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.LocalGetProviders = append(foreign.R.LocalGetProviders, local)
				break
			}
		}
	}

	return nil
}

// LoadRemote allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (getProviderL) LoadRemote(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGetProvider interface{}, mods queries.Applicator) error {
	var slice []*GetProvider
	var object *GetProvider

	if singular {
		object = maybeGetProvider.(*GetProvider)
	} else {
		slice = *maybeGetProvider.(*[]*GetProvider)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &getProviderR{}
		}
		args = append(args, object.RemoteID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &getProviderR{}
			}

			for _, a := range args {
				if a == obj.RemoteID {
					continue Outer
				}
			}

			args = append(args, obj.RemoteID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(getProviderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Remote = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.RemoteGetProviders = append(foreign.R.RemoteGetProviders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RemoteID == foreign.ID {
				local.R.Remote = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.RemoteGetProviders = append(foreign.R.RemoteGetProviders, local)
				break
			}
		}
	}

	return nil
}

// LoadRetrieval allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (getProviderL) LoadRetrieval(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGetProvider interface{}, mods queries.Applicator) error {
	var slice []*GetProvider
	var object *GetProvider

	if singular {
		object = maybeGetProvider.(*GetProvider)
	} else {
		slice = *maybeGetProvider.(*[]*GetProvider)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &getProviderR{}
		}
		args = append(args, object.RetrievalID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &getProviderR{}
			}

			for _, a := range args {
				if a == obj.RetrievalID {
					continue Outer
				}
			}

			args = append(args, obj.RetrievalID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`retrievals`),
		qm.WhereIn(`retrievals.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Retrieval")
	}

	var resultSlice []*Retrieval
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Retrieval")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for retrievals")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for retrievals")
	}

	if len(getProviderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Retrieval = foreign
		if foreign.R == nil {
			foreign.R = &retrievalR{}
		}
		foreign.R.GetProviders = append(foreign.R.GetProviders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RetrievalID == foreign.ID {
				local.R.Retrieval = foreign
				if foreign.R == nil {
					foreign.R = &retrievalR{}
				}
				foreign.R.GetProviders = append(foreign.R.GetProviders, local)
				break
			}
		}
	}

	return nil
}

// LoadProviderPeers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (getProviderL) LoadProviderPeers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGetProvider interface{}, mods queries.Applicator) error {
	var slice []*GetProvider
	var object *GetProvider

	if singular {
		object = maybeGetProvider.(*GetProvider)
	} else {
		slice = *maybeGetProvider.(*[]*GetProvider)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &getProviderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &getProviderR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`provider_peers`),
		qm.WhereIn(`provider_peers.get_providers_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load provider_peers")
	}

	var resultSlice []*ProviderPeer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice provider_peers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on provider_peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for provider_peers")
	}

	if len(providerPeerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProviderPeers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &providerPeerR{}
			}
			foreign.R.GetProvider = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GetProvidersID {
				local.R.ProviderPeers = append(local.R.ProviderPeers, foreign)
				if foreign.R == nil {
					foreign.R = &providerPeerR{}
				}
				foreign.R.GetProvider = local
				break
			}
		}
	}

	return nil
}

// SetLocal of the getProvider to the related item.
// Sets o.R.Local to related.
// Adds o to related.R.LocalGetProviders.
func (o *GetProvider) SetLocal(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"get_providers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"local_id"}),
		strmangle.WhereClause("\"", "\"", 2, getProviderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LocalID = related.ID
	if o.R == nil {
		o.R = &getProviderR{
			Local: related,
		}
	} else {
		o.R.Local = related
	}

	if related.R == nil {
		related.R = &peerR{
			LocalGetProviders: GetProviderSlice{o},
		}
	} else {
		related.R.LocalGetProviders = append(related.R.LocalGetProviders, o)
	}

	return nil
}

// SetRemote of the getProvider to the related item.
// Sets o.R.Remote to related.
// Adds o to related.R.RemoteGetProviders.
func (o *GetProvider) SetRemote(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"get_providers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"remote_id"}),
		strmangle.WhereClause("\"", "\"", 2, getProviderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RemoteID = related.ID
	if o.R == nil {
		o.R = &getProviderR{
			Remote: related,
		}
	} else {
		o.R.Remote = related
	}

	if related.R == nil {
		related.R = &peerR{
			RemoteGetProviders: GetProviderSlice{o},
		}
	} else {
		related.R.RemoteGetProviders = append(related.R.RemoteGetProviders, o)
	}

	return nil
}

// SetRetrieval of the getProvider to the related item.
// Sets o.R.Retrieval to related.
// Adds o to related.R.GetProviders.
func (o *GetProvider) SetRetrieval(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Retrieval) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"get_providers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"retrieval_id"}),
		strmangle.WhereClause("\"", "\"", 2, getProviderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RetrievalID = related.ID
	if o.R == nil {
		o.R = &getProviderR{
			Retrieval: related,
		}
	} else {
		o.R.Retrieval = related
	}

	if related.R == nil {
		related.R = &retrievalR{
			GetProviders: GetProviderSlice{o},
		}
	} else {
		related.R.GetProviders = append(related.R.GetProviders, o)
	}

	return nil
}

// AddProviderPeers adds the given related objects to the existing relationships
// of the get_provider, optionally inserting them as new records.
// Appends related to o.R.ProviderPeers.
// Sets related.R.GetProvider appropriately.
func (o *GetProvider) AddProviderPeers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProviderPeer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GetProvidersID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"provider_peers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"get_providers_id"}),
				strmangle.WhereClause("\"", "\"", 2, providerPeerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GetProvidersID = o.ID
		}
	}

	if o.R == nil {
		o.R = &getProviderR{
			ProviderPeers: related,
		}
	} else {
		o.R.ProviderPeers = append(o.R.ProviderPeers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &providerPeerR{
				GetProvider: o,
			}
		} else {
			rel.R.GetProvider = o
		}
	}
	return nil
}

// GetProviders retrieves all the records using an executor.
func GetProviders(mods ...qm.QueryMod) getProviderQuery {
	mods = append(mods, qm.From("\"get_providers\""))
	return getProviderQuery{NewQuery(mods...)}
}

// FindGetProvider retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGetProvider(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*GetProvider, error) {
	getProviderObj := &GetProvider{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"get_providers\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, getProviderObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from get_providers")
	}

	if err = getProviderObj.doAfterSelectHooks(ctx, exec); err != nil {
		return getProviderObj, err
	}

	return getProviderObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GetProvider) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no get_providers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(getProviderColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	getProviderInsertCacheMut.RLock()
	cache, cached := getProviderInsertCache[key]
	getProviderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			getProviderAllColumns,
			getProviderColumnsWithDefault,
			getProviderColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(getProviderType, getProviderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(getProviderType, getProviderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"get_providers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"get_providers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into get_providers")
	}

	if !cached {
		getProviderInsertCacheMut.Lock()
		getProviderInsertCache[key] = cache
		getProviderInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GetProvider.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GetProvider) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	getProviderUpdateCacheMut.RLock()
	cache, cached := getProviderUpdateCache[key]
	getProviderUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			getProviderAllColumns,
			getProviderPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update get_providers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"get_providers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, getProviderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(getProviderType, getProviderMapping, append(wl, getProviderPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update get_providers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for get_providers")
	}

	if !cached {
		getProviderUpdateCacheMut.Lock()
		getProviderUpdateCache[key] = cache
		getProviderUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q getProviderQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for get_providers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for get_providers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GetProviderSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), getProviderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"get_providers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, getProviderPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in getProvider slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all getProvider")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GetProvider) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no get_providers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(getProviderColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	getProviderUpsertCacheMut.RLock()
	cache, cached := getProviderUpsertCache[key]
	getProviderUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			getProviderAllColumns,
			getProviderColumnsWithDefault,
			getProviderColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			getProviderAllColumns,
			getProviderPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert get_providers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(getProviderPrimaryKeyColumns))
			copy(conflict, getProviderPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"get_providers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(getProviderType, getProviderMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(getProviderType, getProviderMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert get_providers")
	}

	if !cached {
		getProviderUpsertCacheMut.Lock()
		getProviderUpsertCache[key] = cache
		getProviderUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GetProvider record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GetProvider) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GetProvider provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), getProviderPrimaryKeyMapping)
	sql := "DELETE FROM \"get_providers\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from get_providers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for get_providers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q getProviderQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no getProviderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from get_providers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for get_providers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GetProviderSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(getProviderBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), getProviderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"get_providers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, getProviderPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from getProvider slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for get_providers")
	}

	if len(getProviderAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GetProvider) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGetProvider(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GetProviderSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GetProviderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), getProviderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"get_providers\".* FROM \"get_providers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, getProviderPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GetProviderSlice")
	}

	*o = slice

	return nil
}

// GetProviderExists checks if the GetProvider row exists.
func GetProviderExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"get_providers\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if get_providers exists")
	}

	return exists, nil
}
