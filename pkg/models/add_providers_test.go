// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAddProviders(t *testing.T) {
	t.Parallel()

	query := AddProviders()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAddProvidersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AddProvider{}
	if err = randomize.Struct(seed, o, addProviderDBTypes, true, addProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AddProviders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAddProvidersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AddProvider{}
	if err = randomize.Struct(seed, o, addProviderDBTypes, true, addProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AddProviders().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AddProviders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAddProvidersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AddProvider{}
	if err = randomize.Struct(seed, o, addProviderDBTypes, true, addProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AddProviderSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AddProviders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAddProvidersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AddProvider{}
	if err = randomize.Struct(seed, o, addProviderDBTypes, true, addProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AddProviderExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AddProvider exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AddProviderExists to return true, but got false.")
	}
}

func testAddProvidersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AddProvider{}
	if err = randomize.Struct(seed, o, addProviderDBTypes, true, addProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	addProviderFound, err := FindAddProvider(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if addProviderFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAddProvidersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AddProvider{}
	if err = randomize.Struct(seed, o, addProviderDBTypes, true, addProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AddProviders().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAddProvidersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AddProvider{}
	if err = randomize.Struct(seed, o, addProviderDBTypes, true, addProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AddProviders().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAddProvidersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	addProviderOne := &AddProvider{}
	addProviderTwo := &AddProvider{}
	if err = randomize.Struct(seed, addProviderOne, addProviderDBTypes, false, addProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddProvider struct: %s", err)
	}
	if err = randomize.Struct(seed, addProviderTwo, addProviderDBTypes, false, addProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = addProviderOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = addProviderTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AddProviders().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAddProvidersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	addProviderOne := &AddProvider{}
	addProviderTwo := &AddProvider{}
	if err = randomize.Struct(seed, addProviderOne, addProviderDBTypes, false, addProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddProvider struct: %s", err)
	}
	if err = randomize.Struct(seed, addProviderTwo, addProviderDBTypes, false, addProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = addProviderOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = addProviderTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AddProviders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func addProviderBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AddProvider) error {
	*o = AddProvider{}
	return nil
}

func addProviderAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AddProvider) error {
	*o = AddProvider{}
	return nil
}

func addProviderAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AddProvider) error {
	*o = AddProvider{}
	return nil
}

func addProviderBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AddProvider) error {
	*o = AddProvider{}
	return nil
}

func addProviderAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AddProvider) error {
	*o = AddProvider{}
	return nil
}

func addProviderBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AddProvider) error {
	*o = AddProvider{}
	return nil
}

func addProviderAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AddProvider) error {
	*o = AddProvider{}
	return nil
}

func addProviderBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AddProvider) error {
	*o = AddProvider{}
	return nil
}

func addProviderAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AddProvider) error {
	*o = AddProvider{}
	return nil
}

func testAddProvidersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AddProvider{}
	o := &AddProvider{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, addProviderDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AddProvider object: %s", err)
	}

	AddAddProviderHook(boil.BeforeInsertHook, addProviderBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	addProviderBeforeInsertHooks = []AddProviderHook{}

	AddAddProviderHook(boil.AfterInsertHook, addProviderAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	addProviderAfterInsertHooks = []AddProviderHook{}

	AddAddProviderHook(boil.AfterSelectHook, addProviderAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	addProviderAfterSelectHooks = []AddProviderHook{}

	AddAddProviderHook(boil.BeforeUpdateHook, addProviderBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	addProviderBeforeUpdateHooks = []AddProviderHook{}

	AddAddProviderHook(boil.AfterUpdateHook, addProviderAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	addProviderAfterUpdateHooks = []AddProviderHook{}

	AddAddProviderHook(boil.BeforeDeleteHook, addProviderBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	addProviderBeforeDeleteHooks = []AddProviderHook{}

	AddAddProviderHook(boil.AfterDeleteHook, addProviderAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	addProviderAfterDeleteHooks = []AddProviderHook{}

	AddAddProviderHook(boil.BeforeUpsertHook, addProviderBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	addProviderBeforeUpsertHooks = []AddProviderHook{}

	AddAddProviderHook(boil.AfterUpsertHook, addProviderAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	addProviderAfterUpsertHooks = []AddProviderHook{}
}

func testAddProvidersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AddProvider{}
	if err = randomize.Struct(seed, o, addProviderDBTypes, true, addProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AddProviders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAddProvidersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AddProvider{}
	if err = randomize.Struct(seed, o, addProviderDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AddProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(addProviderColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AddProviders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAddProviderToOnePeerUsingLocal(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AddProvider
	var foreign Peer

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, addProviderDBTypes, false, addProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddProvider struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, peerDBTypes, false, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LocalID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Local().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AddProviderSlice{&local}
	if err = local.L.LoadLocal(ctx, tx, false, (*[]*AddProvider)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Local == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Local = nil
	if err = local.L.LoadLocal(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Local == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAddProviderToOneProvideUsingProvide(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AddProvider
	var foreign Provide

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, addProviderDBTypes, false, addProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddProvider struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, provideDBTypes, false, provideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Provide struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProvideID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Provide().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AddProviderSlice{&local}
	if err = local.L.LoadProvide(ctx, tx, false, (*[]*AddProvider)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Provide == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Provide = nil
	if err = local.L.LoadProvide(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Provide == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAddProviderToOnePeerUsingRemote(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AddProvider
	var foreign Peer

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, addProviderDBTypes, false, addProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddProvider struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, peerDBTypes, false, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RemoteID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Remote().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AddProviderSlice{&local}
	if err = local.L.LoadRemote(ctx, tx, false, (*[]*AddProvider)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Remote == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Remote = nil
	if err = local.L.LoadRemote(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Remote == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAddProviderToOneSetOpPeerUsingLocal(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AddProvider
	var b, c Peer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addProviderDBTypes, false, strmangle.SetComplement(addProviderPrimaryKeyColumns, addProviderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, peerDBTypes, false, strmangle.SetComplement(peerPrimaryKeyColumns, peerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, peerDBTypes, false, strmangle.SetComplement(peerPrimaryKeyColumns, peerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Peer{&b, &c} {
		err = a.SetLocal(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Local != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LocalAddProviders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LocalID != x.ID {
			t.Error("foreign key was wrong value", a.LocalID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LocalID))
		reflect.Indirect(reflect.ValueOf(&a.LocalID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.LocalID != x.ID {
			t.Error("foreign key was wrong value", a.LocalID, x.ID)
		}
	}
}
func testAddProviderToOneSetOpProvideUsingProvide(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AddProvider
	var b, c Provide

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addProviderDBTypes, false, strmangle.SetComplement(addProviderPrimaryKeyColumns, addProviderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, provideDBTypes, false, strmangle.SetComplement(providePrimaryKeyColumns, provideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, provideDBTypes, false, strmangle.SetComplement(providePrimaryKeyColumns, provideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Provide{&b, &c} {
		err = a.SetProvide(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Provide != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AddProviders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProvideID != x.ID {
			t.Error("foreign key was wrong value", a.ProvideID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProvideID))
		reflect.Indirect(reflect.ValueOf(&a.ProvideID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ProvideID != x.ID {
			t.Error("foreign key was wrong value", a.ProvideID, x.ID)
		}
	}
}
func testAddProviderToOneSetOpPeerUsingRemote(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AddProvider
	var b, c Peer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addProviderDBTypes, false, strmangle.SetComplement(addProviderPrimaryKeyColumns, addProviderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, peerDBTypes, false, strmangle.SetComplement(peerPrimaryKeyColumns, peerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, peerDBTypes, false, strmangle.SetComplement(peerPrimaryKeyColumns, peerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Peer{&b, &c} {
		err = a.SetRemote(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Remote != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RemoteAddProviders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RemoteID != x.ID {
			t.Error("foreign key was wrong value", a.RemoteID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RemoteID))
		reflect.Indirect(reflect.ValueOf(&a.RemoteID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RemoteID != x.ID {
			t.Error("foreign key was wrong value", a.RemoteID, x.ID)
		}
	}
}

func testAddProvidersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AddProvider{}
	if err = randomize.Struct(seed, o, addProviderDBTypes, true, addProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAddProvidersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AddProvider{}
	if err = randomize.Struct(seed, o, addProviderDBTypes, true, addProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AddProviderSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAddProvidersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AddProvider{}
	if err = randomize.Struct(seed, o, addProviderDBTypes, true, addProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AddProviders().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	addProviderDBTypes = map[string]string{`ID`: `integer`, `ProvideID`: `integer`, `LocalID`: `integer`, `RemoteID`: `integer`, `Distance`: `bytea`, `MultiAddressIds`: `ARRAYinteger`, `StartedAt`: `timestamp with time zone`, `EndedAt`: `timestamp with time zone`, `Error`: `text`}
	_                  = bytes.MinRead
)

func testAddProvidersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(addProviderPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(addProviderAllColumns) == len(addProviderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AddProvider{}
	if err = randomize.Struct(seed, o, addProviderDBTypes, true, addProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AddProviders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, addProviderDBTypes, true, addProviderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AddProvider struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAddProvidersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(addProviderAllColumns) == len(addProviderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AddProvider{}
	if err = randomize.Struct(seed, o, addProviderDBTypes, true, addProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AddProviders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, addProviderDBTypes, true, addProviderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AddProvider struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(addProviderAllColumns, addProviderPrimaryKeyColumns) {
		fields = addProviderAllColumns
	} else {
		fields = strmangle.SetComplement(
			addProviderAllColumns,
			addProviderPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AddProviderSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAddProvidersUpsert(t *testing.T) {
	t.Parallel()

	if len(addProviderAllColumns) == len(addProviderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AddProvider{}
	if err = randomize.Struct(seed, &o, addProviderDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AddProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AddProvider: %s", err)
	}

	count, err := AddProviders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, addProviderDBTypes, false, addProviderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AddProvider struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AddProvider: %s", err)
	}

	count, err = AddProviders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
