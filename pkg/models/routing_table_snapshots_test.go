// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRoutingTableSnapshots(t *testing.T) {
	t.Parallel()

	query := RoutingTableSnapshots()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRoutingTableSnapshotsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoutingTableSnapshot{}
	if err = randomize.Struct(seed, o, routingTableSnapshotDBTypes, true, routingTableSnapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoutingTableSnapshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RoutingTableSnapshots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoutingTableSnapshotsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoutingTableSnapshot{}
	if err = randomize.Struct(seed, o, routingTableSnapshotDBTypes, true, routingTableSnapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoutingTableSnapshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RoutingTableSnapshots().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RoutingTableSnapshots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoutingTableSnapshotsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoutingTableSnapshot{}
	if err = randomize.Struct(seed, o, routingTableSnapshotDBTypes, true, routingTableSnapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoutingTableSnapshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RoutingTableSnapshotSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RoutingTableSnapshots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoutingTableSnapshotsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoutingTableSnapshot{}
	if err = randomize.Struct(seed, o, routingTableSnapshotDBTypes, true, routingTableSnapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoutingTableSnapshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RoutingTableSnapshotExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if RoutingTableSnapshot exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RoutingTableSnapshotExists to return true, but got false.")
	}
}

func testRoutingTableSnapshotsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoutingTableSnapshot{}
	if err = randomize.Struct(seed, o, routingTableSnapshotDBTypes, true, routingTableSnapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoutingTableSnapshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	routingTableSnapshotFound, err := FindRoutingTableSnapshot(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if routingTableSnapshotFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRoutingTableSnapshotsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoutingTableSnapshot{}
	if err = randomize.Struct(seed, o, routingTableSnapshotDBTypes, true, routingTableSnapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoutingTableSnapshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RoutingTableSnapshots().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRoutingTableSnapshotsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoutingTableSnapshot{}
	if err = randomize.Struct(seed, o, routingTableSnapshotDBTypes, true, routingTableSnapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoutingTableSnapshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RoutingTableSnapshots().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRoutingTableSnapshotsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	routingTableSnapshotOne := &RoutingTableSnapshot{}
	routingTableSnapshotTwo := &RoutingTableSnapshot{}
	if err = randomize.Struct(seed, routingTableSnapshotOne, routingTableSnapshotDBTypes, false, routingTableSnapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoutingTableSnapshot struct: %s", err)
	}
	if err = randomize.Struct(seed, routingTableSnapshotTwo, routingTableSnapshotDBTypes, false, routingTableSnapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoutingTableSnapshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = routingTableSnapshotOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = routingTableSnapshotTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RoutingTableSnapshots().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRoutingTableSnapshotsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	routingTableSnapshotOne := &RoutingTableSnapshot{}
	routingTableSnapshotTwo := &RoutingTableSnapshot{}
	if err = randomize.Struct(seed, routingTableSnapshotOne, routingTableSnapshotDBTypes, false, routingTableSnapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoutingTableSnapshot struct: %s", err)
	}
	if err = randomize.Struct(seed, routingTableSnapshotTwo, routingTableSnapshotDBTypes, false, routingTableSnapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoutingTableSnapshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = routingTableSnapshotOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = routingTableSnapshotTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoutingTableSnapshots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func routingTableSnapshotBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RoutingTableSnapshot) error {
	*o = RoutingTableSnapshot{}
	return nil
}

func routingTableSnapshotAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RoutingTableSnapshot) error {
	*o = RoutingTableSnapshot{}
	return nil
}

func routingTableSnapshotAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RoutingTableSnapshot) error {
	*o = RoutingTableSnapshot{}
	return nil
}

func routingTableSnapshotBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RoutingTableSnapshot) error {
	*o = RoutingTableSnapshot{}
	return nil
}

func routingTableSnapshotAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RoutingTableSnapshot) error {
	*o = RoutingTableSnapshot{}
	return nil
}

func routingTableSnapshotBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RoutingTableSnapshot) error {
	*o = RoutingTableSnapshot{}
	return nil
}

func routingTableSnapshotAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RoutingTableSnapshot) error {
	*o = RoutingTableSnapshot{}
	return nil
}

func routingTableSnapshotBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RoutingTableSnapshot) error {
	*o = RoutingTableSnapshot{}
	return nil
}

func routingTableSnapshotAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RoutingTableSnapshot) error {
	*o = RoutingTableSnapshot{}
	return nil
}

func testRoutingTableSnapshotsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RoutingTableSnapshot{}
	o := &RoutingTableSnapshot{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, routingTableSnapshotDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RoutingTableSnapshot object: %s", err)
	}

	AddRoutingTableSnapshotHook(boil.BeforeInsertHook, routingTableSnapshotBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	routingTableSnapshotBeforeInsertHooks = []RoutingTableSnapshotHook{}

	AddRoutingTableSnapshotHook(boil.AfterInsertHook, routingTableSnapshotAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	routingTableSnapshotAfterInsertHooks = []RoutingTableSnapshotHook{}

	AddRoutingTableSnapshotHook(boil.AfterSelectHook, routingTableSnapshotAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	routingTableSnapshotAfterSelectHooks = []RoutingTableSnapshotHook{}

	AddRoutingTableSnapshotHook(boil.BeforeUpdateHook, routingTableSnapshotBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	routingTableSnapshotBeforeUpdateHooks = []RoutingTableSnapshotHook{}

	AddRoutingTableSnapshotHook(boil.AfterUpdateHook, routingTableSnapshotAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	routingTableSnapshotAfterUpdateHooks = []RoutingTableSnapshotHook{}

	AddRoutingTableSnapshotHook(boil.BeforeDeleteHook, routingTableSnapshotBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	routingTableSnapshotBeforeDeleteHooks = []RoutingTableSnapshotHook{}

	AddRoutingTableSnapshotHook(boil.AfterDeleteHook, routingTableSnapshotAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	routingTableSnapshotAfterDeleteHooks = []RoutingTableSnapshotHook{}

	AddRoutingTableSnapshotHook(boil.BeforeUpsertHook, routingTableSnapshotBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	routingTableSnapshotBeforeUpsertHooks = []RoutingTableSnapshotHook{}

	AddRoutingTableSnapshotHook(boil.AfterUpsertHook, routingTableSnapshotAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	routingTableSnapshotAfterUpsertHooks = []RoutingTableSnapshotHook{}
}

func testRoutingTableSnapshotsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoutingTableSnapshot{}
	if err = randomize.Struct(seed, o, routingTableSnapshotDBTypes, true, routingTableSnapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoutingTableSnapshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoutingTableSnapshots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoutingTableSnapshotsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoutingTableSnapshot{}
	if err = randomize.Struct(seed, o, routingTableSnapshotDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RoutingTableSnapshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(routingTableSnapshotColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RoutingTableSnapshots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoutingTableSnapshotToManyFinalRoutingTableProvides(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoutingTableSnapshot
	var b, c Provide

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routingTableSnapshotDBTypes, true, routingTableSnapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoutingTableSnapshot struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, provideDBTypes, false, provideColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, provideDBTypes, false, provideColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.FinalRoutingTableID, a.ID)
	queries.Assign(&c.FinalRoutingTableID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.FinalRoutingTableProvides().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.FinalRoutingTableID, b.FinalRoutingTableID) {
			bFound = true
		}
		if queries.Equal(v.FinalRoutingTableID, c.FinalRoutingTableID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RoutingTableSnapshotSlice{&a}
	if err = a.L.LoadFinalRoutingTableProvides(ctx, tx, false, (*[]*RoutingTableSnapshot)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FinalRoutingTableProvides); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FinalRoutingTableProvides = nil
	if err = a.L.LoadFinalRoutingTableProvides(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FinalRoutingTableProvides); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRoutingTableSnapshotToManyInitialRoutingTableProvides(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoutingTableSnapshot
	var b, c Provide

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routingTableSnapshotDBTypes, true, routingTableSnapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoutingTableSnapshot struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, provideDBTypes, false, provideColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, provideDBTypes, false, provideColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.InitialRoutingTableID = a.ID
	c.InitialRoutingTableID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.InitialRoutingTableProvides().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.InitialRoutingTableID == b.InitialRoutingTableID {
			bFound = true
		}
		if v.InitialRoutingTableID == c.InitialRoutingTableID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RoutingTableSnapshotSlice{&a}
	if err = a.L.LoadInitialRoutingTableProvides(ctx, tx, false, (*[]*RoutingTableSnapshot)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.InitialRoutingTableProvides); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.InitialRoutingTableProvides = nil
	if err = a.L.LoadInitialRoutingTableProvides(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.InitialRoutingTableProvides); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRoutingTableSnapshotToManyFinalRoutingTableRetrievals(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoutingTableSnapshot
	var b, c Retrieval

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routingTableSnapshotDBTypes, true, routingTableSnapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoutingTableSnapshot struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, retrievalDBTypes, false, retrievalColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, retrievalDBTypes, false, retrievalColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.FinalRoutingTableID, a.ID)
	queries.Assign(&c.FinalRoutingTableID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.FinalRoutingTableRetrievals().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.FinalRoutingTableID, b.FinalRoutingTableID) {
			bFound = true
		}
		if queries.Equal(v.FinalRoutingTableID, c.FinalRoutingTableID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RoutingTableSnapshotSlice{&a}
	if err = a.L.LoadFinalRoutingTableRetrievals(ctx, tx, false, (*[]*RoutingTableSnapshot)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FinalRoutingTableRetrievals); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FinalRoutingTableRetrievals = nil
	if err = a.L.LoadFinalRoutingTableRetrievals(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FinalRoutingTableRetrievals); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRoutingTableSnapshotToManyInitialRoutingTableRetrievals(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoutingTableSnapshot
	var b, c Retrieval

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routingTableSnapshotDBTypes, true, routingTableSnapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoutingTableSnapshot struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, retrievalDBTypes, false, retrievalColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, retrievalDBTypes, false, retrievalColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.InitialRoutingTableID = a.ID
	c.InitialRoutingTableID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.InitialRoutingTableRetrievals().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.InitialRoutingTableID == b.InitialRoutingTableID {
			bFound = true
		}
		if v.InitialRoutingTableID == c.InitialRoutingTableID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RoutingTableSnapshotSlice{&a}
	if err = a.L.LoadInitialRoutingTableRetrievals(ctx, tx, false, (*[]*RoutingTableSnapshot)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.InitialRoutingTableRetrievals); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.InitialRoutingTableRetrievals = nil
	if err = a.L.LoadInitialRoutingTableRetrievals(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.InitialRoutingTableRetrievals); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRoutingTableSnapshotToManyRoutingTableEntries(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoutingTableSnapshot
	var b, c RoutingTableEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routingTableSnapshotDBTypes, true, routingTableSnapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoutingTableSnapshot struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, routingTableEntryDBTypes, false, routingTableEntryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, routingTableEntryDBTypes, false, routingTableEntryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.RoutingTableSnapshotID = a.ID
	c.RoutingTableSnapshotID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.RoutingTableEntries().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.RoutingTableSnapshotID == b.RoutingTableSnapshotID {
			bFound = true
		}
		if v.RoutingTableSnapshotID == c.RoutingTableSnapshotID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RoutingTableSnapshotSlice{&a}
	if err = a.L.LoadRoutingTableEntries(ctx, tx, false, (*[]*RoutingTableSnapshot)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RoutingTableEntries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RoutingTableEntries = nil
	if err = a.L.LoadRoutingTableEntries(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RoutingTableEntries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRoutingTableSnapshotToManyAddOpFinalRoutingTableProvides(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoutingTableSnapshot
	var b, c, d, e Provide

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routingTableSnapshotDBTypes, false, strmangle.SetComplement(routingTableSnapshotPrimaryKeyColumns, routingTableSnapshotColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Provide{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, provideDBTypes, false, strmangle.SetComplement(providePrimaryKeyColumns, provideColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Provide{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFinalRoutingTableProvides(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.FinalRoutingTableID) {
			t.Error("foreign key was wrong value", a.ID, first.FinalRoutingTableID)
		}
		if !queries.Equal(a.ID, second.FinalRoutingTableID) {
			t.Error("foreign key was wrong value", a.ID, second.FinalRoutingTableID)
		}

		if first.R.FinalRoutingTable != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.FinalRoutingTable != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FinalRoutingTableProvides[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FinalRoutingTableProvides[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FinalRoutingTableProvides().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testRoutingTableSnapshotToManySetOpFinalRoutingTableProvides(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoutingTableSnapshot
	var b, c, d, e Provide

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routingTableSnapshotDBTypes, false, strmangle.SetComplement(routingTableSnapshotPrimaryKeyColumns, routingTableSnapshotColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Provide{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, provideDBTypes, false, strmangle.SetComplement(providePrimaryKeyColumns, provideColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetFinalRoutingTableProvides(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FinalRoutingTableProvides().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetFinalRoutingTableProvides(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FinalRoutingTableProvides().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FinalRoutingTableID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FinalRoutingTableID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.FinalRoutingTableID) {
		t.Error("foreign key was wrong value", a.ID, d.FinalRoutingTableID)
	}
	if !queries.Equal(a.ID, e.FinalRoutingTableID) {
		t.Error("foreign key was wrong value", a.ID, e.FinalRoutingTableID)
	}

	if b.R.FinalRoutingTable != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.FinalRoutingTable != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.FinalRoutingTable != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.FinalRoutingTable != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.FinalRoutingTableProvides[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.FinalRoutingTableProvides[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testRoutingTableSnapshotToManyRemoveOpFinalRoutingTableProvides(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoutingTableSnapshot
	var b, c, d, e Provide

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routingTableSnapshotDBTypes, false, strmangle.SetComplement(routingTableSnapshotPrimaryKeyColumns, routingTableSnapshotColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Provide{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, provideDBTypes, false, strmangle.SetComplement(providePrimaryKeyColumns, provideColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddFinalRoutingTableProvides(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FinalRoutingTableProvides().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveFinalRoutingTableProvides(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FinalRoutingTableProvides().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FinalRoutingTableID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FinalRoutingTableID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.FinalRoutingTable != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.FinalRoutingTable != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.FinalRoutingTable != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.FinalRoutingTable != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.FinalRoutingTableProvides) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.FinalRoutingTableProvides[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.FinalRoutingTableProvides[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testRoutingTableSnapshotToManyAddOpInitialRoutingTableProvides(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoutingTableSnapshot
	var b, c, d, e Provide

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routingTableSnapshotDBTypes, false, strmangle.SetComplement(routingTableSnapshotPrimaryKeyColumns, routingTableSnapshotColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Provide{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, provideDBTypes, false, strmangle.SetComplement(providePrimaryKeyColumns, provideColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Provide{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddInitialRoutingTableProvides(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.InitialRoutingTableID {
			t.Error("foreign key was wrong value", a.ID, first.InitialRoutingTableID)
		}
		if a.ID != second.InitialRoutingTableID {
			t.Error("foreign key was wrong value", a.ID, second.InitialRoutingTableID)
		}

		if first.R.InitialRoutingTable != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.InitialRoutingTable != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.InitialRoutingTableProvides[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.InitialRoutingTableProvides[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.InitialRoutingTableProvides().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testRoutingTableSnapshotToManyAddOpFinalRoutingTableRetrievals(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoutingTableSnapshot
	var b, c, d, e Retrieval

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routingTableSnapshotDBTypes, false, strmangle.SetComplement(routingTableSnapshotPrimaryKeyColumns, routingTableSnapshotColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Retrieval{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, retrievalDBTypes, false, strmangle.SetComplement(retrievalPrimaryKeyColumns, retrievalColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Retrieval{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFinalRoutingTableRetrievals(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.FinalRoutingTableID) {
			t.Error("foreign key was wrong value", a.ID, first.FinalRoutingTableID)
		}
		if !queries.Equal(a.ID, second.FinalRoutingTableID) {
			t.Error("foreign key was wrong value", a.ID, second.FinalRoutingTableID)
		}

		if first.R.FinalRoutingTable != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.FinalRoutingTable != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FinalRoutingTableRetrievals[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FinalRoutingTableRetrievals[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FinalRoutingTableRetrievals().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testRoutingTableSnapshotToManySetOpFinalRoutingTableRetrievals(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoutingTableSnapshot
	var b, c, d, e Retrieval

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routingTableSnapshotDBTypes, false, strmangle.SetComplement(routingTableSnapshotPrimaryKeyColumns, routingTableSnapshotColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Retrieval{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, retrievalDBTypes, false, strmangle.SetComplement(retrievalPrimaryKeyColumns, retrievalColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetFinalRoutingTableRetrievals(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FinalRoutingTableRetrievals().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetFinalRoutingTableRetrievals(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FinalRoutingTableRetrievals().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FinalRoutingTableID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FinalRoutingTableID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.FinalRoutingTableID) {
		t.Error("foreign key was wrong value", a.ID, d.FinalRoutingTableID)
	}
	if !queries.Equal(a.ID, e.FinalRoutingTableID) {
		t.Error("foreign key was wrong value", a.ID, e.FinalRoutingTableID)
	}

	if b.R.FinalRoutingTable != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.FinalRoutingTable != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.FinalRoutingTable != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.FinalRoutingTable != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.FinalRoutingTableRetrievals[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.FinalRoutingTableRetrievals[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testRoutingTableSnapshotToManyRemoveOpFinalRoutingTableRetrievals(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoutingTableSnapshot
	var b, c, d, e Retrieval

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routingTableSnapshotDBTypes, false, strmangle.SetComplement(routingTableSnapshotPrimaryKeyColumns, routingTableSnapshotColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Retrieval{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, retrievalDBTypes, false, strmangle.SetComplement(retrievalPrimaryKeyColumns, retrievalColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddFinalRoutingTableRetrievals(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FinalRoutingTableRetrievals().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveFinalRoutingTableRetrievals(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FinalRoutingTableRetrievals().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FinalRoutingTableID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FinalRoutingTableID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.FinalRoutingTable != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.FinalRoutingTable != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.FinalRoutingTable != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.FinalRoutingTable != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.FinalRoutingTableRetrievals) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.FinalRoutingTableRetrievals[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.FinalRoutingTableRetrievals[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testRoutingTableSnapshotToManyAddOpInitialRoutingTableRetrievals(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoutingTableSnapshot
	var b, c, d, e Retrieval

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routingTableSnapshotDBTypes, false, strmangle.SetComplement(routingTableSnapshotPrimaryKeyColumns, routingTableSnapshotColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Retrieval{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, retrievalDBTypes, false, strmangle.SetComplement(retrievalPrimaryKeyColumns, retrievalColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Retrieval{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddInitialRoutingTableRetrievals(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.InitialRoutingTableID {
			t.Error("foreign key was wrong value", a.ID, first.InitialRoutingTableID)
		}
		if a.ID != second.InitialRoutingTableID {
			t.Error("foreign key was wrong value", a.ID, second.InitialRoutingTableID)
		}

		if first.R.InitialRoutingTable != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.InitialRoutingTable != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.InitialRoutingTableRetrievals[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.InitialRoutingTableRetrievals[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.InitialRoutingTableRetrievals().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testRoutingTableSnapshotToManyAddOpRoutingTableEntries(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoutingTableSnapshot
	var b, c, d, e RoutingTableEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routingTableSnapshotDBTypes, false, strmangle.SetComplement(routingTableSnapshotPrimaryKeyColumns, routingTableSnapshotColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RoutingTableEntry{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, routingTableEntryDBTypes, false, strmangle.SetComplement(routingTableEntryPrimaryKeyColumns, routingTableEntryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RoutingTableEntry{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRoutingTableEntries(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.RoutingTableSnapshotID {
			t.Error("foreign key was wrong value", a.ID, first.RoutingTableSnapshotID)
		}
		if a.ID != second.RoutingTableSnapshotID {
			t.Error("foreign key was wrong value", a.ID, second.RoutingTableSnapshotID)
		}

		if first.R.RoutingTableSnapshot != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.RoutingTableSnapshot != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RoutingTableEntries[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RoutingTableEntries[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RoutingTableEntries().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testRoutingTableSnapshotToOnePeerUsingPeer(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RoutingTableSnapshot
	var foreign Peer

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, routingTableSnapshotDBTypes, false, routingTableSnapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoutingTableSnapshot struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, peerDBTypes, false, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PeerID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Peer().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RoutingTableSnapshotSlice{&local}
	if err = local.L.LoadPeer(ctx, tx, false, (*[]*RoutingTableSnapshot)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Peer == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Peer = nil
	if err = local.L.LoadPeer(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Peer == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRoutingTableSnapshotToOneSetOpPeerUsingPeer(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoutingTableSnapshot
	var b, c Peer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routingTableSnapshotDBTypes, false, strmangle.SetComplement(routingTableSnapshotPrimaryKeyColumns, routingTableSnapshotColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, peerDBTypes, false, strmangle.SetComplement(peerPrimaryKeyColumns, peerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, peerDBTypes, false, strmangle.SetComplement(peerPrimaryKeyColumns, peerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Peer{&b, &c} {
		err = a.SetPeer(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Peer != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RoutingTableSnapshots[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PeerID != x.ID {
			t.Error("foreign key was wrong value", a.PeerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PeerID))
		reflect.Indirect(reflect.ValueOf(&a.PeerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PeerID != x.ID {
			t.Error("foreign key was wrong value", a.PeerID, x.ID)
		}
	}
}

func testRoutingTableSnapshotsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoutingTableSnapshot{}
	if err = randomize.Struct(seed, o, routingTableSnapshotDBTypes, true, routingTableSnapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoutingTableSnapshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRoutingTableSnapshotsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoutingTableSnapshot{}
	if err = randomize.Struct(seed, o, routingTableSnapshotDBTypes, true, routingTableSnapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoutingTableSnapshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RoutingTableSnapshotSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRoutingTableSnapshotsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoutingTableSnapshot{}
	if err = randomize.Struct(seed, o, routingTableSnapshotDBTypes, true, routingTableSnapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoutingTableSnapshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RoutingTableSnapshots().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	routingTableSnapshotDBTypes = map[string]string{`ID`: `integer`, `PeerID`: `integer`, `BucketSize`: `integer`, `EntryCount`: `integer`, `CreatedAt`: `timestamp with time zone`}
	_                           = bytes.MinRead
)

func testRoutingTableSnapshotsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(routingTableSnapshotPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(routingTableSnapshotAllColumns) == len(routingTableSnapshotPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RoutingTableSnapshot{}
	if err = randomize.Struct(seed, o, routingTableSnapshotDBTypes, true, routingTableSnapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoutingTableSnapshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoutingTableSnapshots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, routingTableSnapshotDBTypes, true, routingTableSnapshotPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoutingTableSnapshot struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRoutingTableSnapshotsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(routingTableSnapshotAllColumns) == len(routingTableSnapshotPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RoutingTableSnapshot{}
	if err = randomize.Struct(seed, o, routingTableSnapshotDBTypes, true, routingTableSnapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoutingTableSnapshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoutingTableSnapshots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, routingTableSnapshotDBTypes, true, routingTableSnapshotPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoutingTableSnapshot struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(routingTableSnapshotAllColumns, routingTableSnapshotPrimaryKeyColumns) {
		fields = routingTableSnapshotAllColumns
	} else {
		fields = strmangle.SetComplement(
			routingTableSnapshotAllColumns,
			routingTableSnapshotPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RoutingTableSnapshotSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRoutingTableSnapshotsUpsert(t *testing.T) {
	t.Parallel()

	if len(routingTableSnapshotAllColumns) == len(routingTableSnapshotPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RoutingTableSnapshot{}
	if err = randomize.Struct(seed, &o, routingTableSnapshotDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RoutingTableSnapshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RoutingTableSnapshot: %s", err)
	}

	count, err := RoutingTableSnapshots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, routingTableSnapshotDBTypes, false, routingTableSnapshotPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoutingTableSnapshot struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RoutingTableSnapshot: %s", err)
	}

	count, err = RoutingTableSnapshots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
