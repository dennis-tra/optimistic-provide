// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Measurement is an object representing the database table.
type Measurement struct {
	ID            int        `boil:"id" json:"id" toml:"id" yaml:"id"`
	HostID        int        `boil:"host_id" json:"host_id" toml:"host_id" yaml:"host_id"`
	StartedAt     time.Time  `boil:"started_at" json:"started_at" toml:"started_at" yaml:"started_at"`
	EndedAt       null.Time  `boil:"ended_at" json:"ended_at,omitempty" toml:"ended_at" yaml:"ended_at,omitempty"`
	Configuration types.JSON `boil:"configuration" json:"configuration" toml:"configuration" yaml:"configuration"`
	UpdatedAt     time.Time  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt     time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *measurementR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L measurementL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MeasurementColumns = struct {
	ID            string
	HostID        string
	StartedAt     string
	EndedAt       string
	Configuration string
	UpdatedAt     string
	CreatedAt     string
}{
	ID:            "id",
	HostID:        "host_id",
	StartedAt:     "started_at",
	EndedAt:       "ended_at",
	Configuration: "configuration",
	UpdatedAt:     "updated_at",
	CreatedAt:     "created_at",
}

var MeasurementTableColumns = struct {
	ID            string
	HostID        string
	StartedAt     string
	EndedAt       string
	Configuration string
	UpdatedAt     string
	CreatedAt     string
}{
	ID:            "measurements.id",
	HostID:        "measurements.host_id",
	StartedAt:     "measurements.started_at",
	EndedAt:       "measurements.ended_at",
	Configuration: "measurements.configuration",
	UpdatedAt:     "measurements.updated_at",
	CreatedAt:     "measurements.created_at",
}

// Generated where

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var MeasurementWhere = struct {
	ID            whereHelperint
	HostID        whereHelperint
	StartedAt     whereHelpertime_Time
	EndedAt       whereHelpernull_Time
	Configuration whereHelpertypes_JSON
	UpdatedAt     whereHelpertime_Time
	CreatedAt     whereHelpertime_Time
}{
	ID:            whereHelperint{field: "\"measurements\".\"id\""},
	HostID:        whereHelperint{field: "\"measurements\".\"host_id\""},
	StartedAt:     whereHelpertime_Time{field: "\"measurements\".\"started_at\""},
	EndedAt:       whereHelpernull_Time{field: "\"measurements\".\"ended_at\""},
	Configuration: whereHelpertypes_JSON{field: "\"measurements\".\"configuration\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"measurements\".\"updated_at\""},
	CreatedAt:     whereHelpertime_Time{field: "\"measurements\".\"created_at\""},
}

// MeasurementRels is where relationship names are stored.
var MeasurementRels = struct {
	Host     string
	Provides string
}{
	Host:     "Host",
	Provides: "Provides",
}

// measurementR is where relationships are stored.
type measurementR struct {
	Host     *Peer        `boil:"Host" json:"Host" toml:"Host" yaml:"Host"`
	Provides ProvideSlice `boil:"Provides" json:"Provides" toml:"Provides" yaml:"Provides"`
}

// NewStruct creates a new relationship struct
func (*measurementR) NewStruct() *measurementR {
	return &measurementR{}
}

// measurementL is where Load methods for each relationship are stored.
type measurementL struct{}

var (
	measurementAllColumns            = []string{"id", "host_id", "started_at", "ended_at", "configuration", "updated_at", "created_at"}
	measurementColumnsWithoutDefault = []string{"host_id", "started_at", "ended_at", "configuration", "updated_at", "created_at"}
	measurementColumnsWithDefault    = []string{"id"}
	measurementPrimaryKeyColumns     = []string{"id"}
)

type (
	// MeasurementSlice is an alias for a slice of pointers to Measurement.
	// This should almost always be used instead of []Measurement.
	MeasurementSlice []*Measurement
	// MeasurementHook is the signature for custom Measurement hook methods
	MeasurementHook func(context.Context, boil.ContextExecutor, *Measurement) error

	measurementQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	measurementType                 = reflect.TypeOf(&Measurement{})
	measurementMapping              = queries.MakeStructMapping(measurementType)
	measurementPrimaryKeyMapping, _ = queries.BindMapping(measurementType, measurementMapping, measurementPrimaryKeyColumns)
	measurementInsertCacheMut       sync.RWMutex
	measurementInsertCache          = make(map[string]insertCache)
	measurementUpdateCacheMut       sync.RWMutex
	measurementUpdateCache          = make(map[string]updateCache)
	measurementUpsertCacheMut       sync.RWMutex
	measurementUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var measurementBeforeInsertHooks []MeasurementHook
var measurementBeforeUpdateHooks []MeasurementHook
var measurementBeforeDeleteHooks []MeasurementHook
var measurementBeforeUpsertHooks []MeasurementHook

var measurementAfterInsertHooks []MeasurementHook
var measurementAfterSelectHooks []MeasurementHook
var measurementAfterUpdateHooks []MeasurementHook
var measurementAfterDeleteHooks []MeasurementHook
var measurementAfterUpsertHooks []MeasurementHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Measurement) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range measurementBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Measurement) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range measurementBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Measurement) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range measurementBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Measurement) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range measurementBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Measurement) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range measurementAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Measurement) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range measurementAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Measurement) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range measurementAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Measurement) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range measurementAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Measurement) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range measurementAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMeasurementHook registers your hook function for all future operations.
func AddMeasurementHook(hookPoint boil.HookPoint, measurementHook MeasurementHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		measurementBeforeInsertHooks = append(measurementBeforeInsertHooks, measurementHook)
	case boil.BeforeUpdateHook:
		measurementBeforeUpdateHooks = append(measurementBeforeUpdateHooks, measurementHook)
	case boil.BeforeDeleteHook:
		measurementBeforeDeleteHooks = append(measurementBeforeDeleteHooks, measurementHook)
	case boil.BeforeUpsertHook:
		measurementBeforeUpsertHooks = append(measurementBeforeUpsertHooks, measurementHook)
	case boil.AfterInsertHook:
		measurementAfterInsertHooks = append(measurementAfterInsertHooks, measurementHook)
	case boil.AfterSelectHook:
		measurementAfterSelectHooks = append(measurementAfterSelectHooks, measurementHook)
	case boil.AfterUpdateHook:
		measurementAfterUpdateHooks = append(measurementAfterUpdateHooks, measurementHook)
	case boil.AfterDeleteHook:
		measurementAfterDeleteHooks = append(measurementAfterDeleteHooks, measurementHook)
	case boil.AfterUpsertHook:
		measurementAfterUpsertHooks = append(measurementAfterUpsertHooks, measurementHook)
	}
}

// One returns a single measurement record from the query.
func (q measurementQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Measurement, error) {
	o := &Measurement{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for measurements")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Measurement records from the query.
func (q measurementQuery) All(ctx context.Context, exec boil.ContextExecutor) (MeasurementSlice, error) {
	var o []*Measurement

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Measurement slice")
	}

	if len(measurementAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Measurement records in the query.
func (q measurementQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count measurements rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q measurementQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if measurements exists")
	}

	return count > 0, nil
}

// Host pointed to by the foreign key.
func (o *Measurement) Host(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.HostID),
	}

	queryMods = append(queryMods, mods...)

	query := Peers(queryMods...)
	queries.SetFrom(query.Query, "\"peers\"")

	return query
}

// Provides retrieves all the provide's Provides with an executor.
func (o *Measurement) Provides(mods ...qm.QueryMod) provideQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"provides\".\"measurement_id\"=?", o.ID),
	)

	query := Provides(queryMods...)
	queries.SetFrom(query.Query, "\"provides\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"provides\".*"})
	}

	return query
}

// LoadHost allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (measurementL) LoadHost(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMeasurement interface{}, mods queries.Applicator) error {
	var slice []*Measurement
	var object *Measurement

	if singular {
		object = maybeMeasurement.(*Measurement)
	} else {
		slice = *maybeMeasurement.(*[]*Measurement)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &measurementR{}
		}
		args = append(args, object.HostID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &measurementR{}
			}

			for _, a := range args {
				if a == obj.HostID {
					continue Outer
				}
			}

			args = append(args, obj.HostID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(measurementAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Host = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.HostMeasurements = append(foreign.R.HostMeasurements, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.HostID == foreign.ID {
				local.R.Host = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.HostMeasurements = append(foreign.R.HostMeasurements, local)
				break
			}
		}
	}

	return nil
}

// LoadProvides allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (measurementL) LoadProvides(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMeasurement interface{}, mods queries.Applicator) error {
	var slice []*Measurement
	var object *Measurement

	if singular {
		object = maybeMeasurement.(*Measurement)
	} else {
		slice = *maybeMeasurement.(*[]*Measurement)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &measurementR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &measurementR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`provides`),
		qm.WhereIn(`provides.measurement_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load provides")
	}

	var resultSlice []*Provide
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice provides")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on provides")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for provides")
	}

	if len(provideAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Provides = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &provideR{}
			}
			foreign.R.Measurement = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.MeasurementID) {
				local.R.Provides = append(local.R.Provides, foreign)
				if foreign.R == nil {
					foreign.R = &provideR{}
				}
				foreign.R.Measurement = local
				break
			}
		}
	}

	return nil
}

// SetHost of the measurement to the related item.
// Sets o.R.Host to related.
// Adds o to related.R.HostMeasurements.
func (o *Measurement) SetHost(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"measurements\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"host_id"}),
		strmangle.WhereClause("\"", "\"", 2, measurementPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.HostID = related.ID
	if o.R == nil {
		o.R = &measurementR{
			Host: related,
		}
	} else {
		o.R.Host = related
	}

	if related.R == nil {
		related.R = &peerR{
			HostMeasurements: MeasurementSlice{o},
		}
	} else {
		related.R.HostMeasurements = append(related.R.HostMeasurements, o)
	}

	return nil
}

// AddProvides adds the given related objects to the existing relationships
// of the measurement, optionally inserting them as new records.
// Appends related to o.R.Provides.
// Sets related.R.Measurement appropriately.
func (o *Measurement) AddProvides(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Provide) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.MeasurementID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"provides\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"measurement_id"}),
				strmangle.WhereClause("\"", "\"", 2, providePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.MeasurementID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &measurementR{
			Provides: related,
		}
	} else {
		o.R.Provides = append(o.R.Provides, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &provideR{
				Measurement: o,
			}
		} else {
			rel.R.Measurement = o
		}
	}
	return nil
}

// SetProvides removes all previously related items of the
// measurement replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Measurement's Provides accordingly.
// Replaces o.R.Provides with related.
// Sets related.R.Measurement's Provides accordingly.
func (o *Measurement) SetProvides(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Provide) error {
	query := "update \"provides\" set \"measurement_id\" = null where \"measurement_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Provides {
			queries.SetScanner(&rel.MeasurementID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Measurement = nil
		}

		o.R.Provides = nil
	}
	return o.AddProvides(ctx, exec, insert, related...)
}

// RemoveProvides relationships from objects passed in.
// Removes related items from R.Provides (uses pointer comparison, removal does not keep order)
// Sets related.R.Measurement.
func (o *Measurement) RemoveProvides(ctx context.Context, exec boil.ContextExecutor, related ...*Provide) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.MeasurementID, nil)
		if rel.R != nil {
			rel.R.Measurement = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("measurement_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Provides {
			if rel != ri {
				continue
			}

			ln := len(o.R.Provides)
			if ln > 1 && i < ln-1 {
				o.R.Provides[i] = o.R.Provides[ln-1]
			}
			o.R.Provides = o.R.Provides[:ln-1]
			break
		}
	}

	return nil
}

// Measurements retrieves all the records using an executor.
func Measurements(mods ...qm.QueryMod) measurementQuery {
	mods = append(mods, qm.From("\"measurements\""))
	return measurementQuery{NewQuery(mods...)}
}

// FindMeasurement retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMeasurement(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Measurement, error) {
	measurementObj := &Measurement{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"measurements\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, measurementObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from measurements")
	}

	if err = measurementObj.doAfterSelectHooks(ctx, exec); err != nil {
		return measurementObj, err
	}

	return measurementObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Measurement) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no measurements provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(measurementColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	measurementInsertCacheMut.RLock()
	cache, cached := measurementInsertCache[key]
	measurementInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			measurementAllColumns,
			measurementColumnsWithDefault,
			measurementColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(measurementType, measurementMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(measurementType, measurementMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"measurements\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"measurements\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into measurements")
	}

	if !cached {
		measurementInsertCacheMut.Lock()
		measurementInsertCache[key] = cache
		measurementInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Measurement.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Measurement) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	measurementUpdateCacheMut.RLock()
	cache, cached := measurementUpdateCache[key]
	measurementUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			measurementAllColumns,
			measurementPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update measurements, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"measurements\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, measurementPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(measurementType, measurementMapping, append(wl, measurementPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update measurements row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for measurements")
	}

	if !cached {
		measurementUpdateCacheMut.Lock()
		measurementUpdateCache[key] = cache
		measurementUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q measurementQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for measurements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for measurements")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MeasurementSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), measurementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"measurements\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, measurementPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in measurement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all measurement")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Measurement) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no measurements provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(measurementColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	measurementUpsertCacheMut.RLock()
	cache, cached := measurementUpsertCache[key]
	measurementUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			measurementAllColumns,
			measurementColumnsWithDefault,
			measurementColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			measurementAllColumns,
			measurementPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert measurements, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(measurementPrimaryKeyColumns))
			copy(conflict, measurementPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"measurements\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(measurementType, measurementMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(measurementType, measurementMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert measurements")
	}

	if !cached {
		measurementUpsertCacheMut.Lock()
		measurementUpsertCache[key] = cache
		measurementUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Measurement record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Measurement) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Measurement provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), measurementPrimaryKeyMapping)
	sql := "DELETE FROM \"measurements\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from measurements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for measurements")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q measurementQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no measurementQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from measurements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for measurements")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MeasurementSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(measurementBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), measurementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"measurements\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, measurementPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from measurement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for measurements")
	}

	if len(measurementAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Measurement) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMeasurement(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MeasurementSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MeasurementSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), measurementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"measurements\".* FROM \"measurements\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, measurementPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MeasurementSlice")
	}

	*o = slice

	return nil
}

// MeasurementExists checks if the Measurement row exists.
func MeasurementExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"measurements\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if measurements exists")
	}

	return exists, nil
}
