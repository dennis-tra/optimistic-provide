// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Retrieval is an object representing the database table.
type Retrieval struct {
	ID                    int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	RetrieverID           int         `boil:"retriever_id" json:"retriever_id" toml:"retriever_id" yaml:"retriever_id"`
	ContentID             string      `boil:"content_id" json:"content_id" toml:"content_id" yaml:"content_id"`
	Distance              []byte      `boil:"distance" json:"distance" toml:"distance" yaml:"distance"`
	InitialRoutingTableID int         `boil:"initial_routing_table_id" json:"initial_routing_table_id" toml:"initial_routing_table_id" yaml:"initial_routing_table_id"`
	FinalRoutingTableID   null.Int    `boil:"final_routing_table_id" json:"final_routing_table_id,omitempty" toml:"final_routing_table_id" yaml:"final_routing_table_id,omitempty"`
	StartedAt             time.Time   `boil:"started_at" json:"started_at" toml:"started_at" yaml:"started_at"`
	EndedAt               null.Time   `boil:"ended_at" json:"ended_at,omitempty" toml:"ended_at" yaml:"ended_at,omitempty"`
	Error                 null.String `boil:"error" json:"error,omitempty" toml:"error" yaml:"error,omitempty"`
	DoneAt                null.Time   `boil:"done_at" json:"done_at,omitempty" toml:"done_at" yaml:"done_at,omitempty"`
	UpdatedAt             time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt             time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *retrievalR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L retrievalL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RetrievalColumns = struct {
	ID                    string
	RetrieverID           string
	ContentID             string
	Distance              string
	InitialRoutingTableID string
	FinalRoutingTableID   string
	StartedAt             string
	EndedAt               string
	Error                 string
	DoneAt                string
	UpdatedAt             string
	CreatedAt             string
}{
	ID:                    "id",
	RetrieverID:           "retriever_id",
	ContentID:             "content_id",
	Distance:              "distance",
	InitialRoutingTableID: "initial_routing_table_id",
	FinalRoutingTableID:   "final_routing_table_id",
	StartedAt:             "started_at",
	EndedAt:               "ended_at",
	Error:                 "error",
	DoneAt:                "done_at",
	UpdatedAt:             "updated_at",
	CreatedAt:             "created_at",
}

var RetrievalTableColumns = struct {
	ID                    string
	RetrieverID           string
	ContentID             string
	Distance              string
	InitialRoutingTableID string
	FinalRoutingTableID   string
	StartedAt             string
	EndedAt               string
	Error                 string
	DoneAt                string
	UpdatedAt             string
	CreatedAt             string
}{
	ID:                    "retrievals.id",
	RetrieverID:           "retrievals.retriever_id",
	ContentID:             "retrievals.content_id",
	Distance:              "retrievals.distance",
	InitialRoutingTableID: "retrievals.initial_routing_table_id",
	FinalRoutingTableID:   "retrievals.final_routing_table_id",
	StartedAt:             "retrievals.started_at",
	EndedAt:               "retrievals.ended_at",
	Error:                 "retrievals.error",
	DoneAt:                "retrievals.done_at",
	UpdatedAt:             "retrievals.updated_at",
	CreatedAt:             "retrievals.created_at",
}

// Generated where

var RetrievalWhere = struct {
	ID                    whereHelperint
	RetrieverID           whereHelperint
	ContentID             whereHelperstring
	Distance              whereHelper__byte
	InitialRoutingTableID whereHelperint
	FinalRoutingTableID   whereHelpernull_Int
	StartedAt             whereHelpertime_Time
	EndedAt               whereHelpernull_Time
	Error                 whereHelpernull_String
	DoneAt                whereHelpernull_Time
	UpdatedAt             whereHelpertime_Time
	CreatedAt             whereHelpertime_Time
}{
	ID:                    whereHelperint{field: "\"retrievals\".\"id\""},
	RetrieverID:           whereHelperint{field: "\"retrievals\".\"retriever_id\""},
	ContentID:             whereHelperstring{field: "\"retrievals\".\"content_id\""},
	Distance:              whereHelper__byte{field: "\"retrievals\".\"distance\""},
	InitialRoutingTableID: whereHelperint{field: "\"retrievals\".\"initial_routing_table_id\""},
	FinalRoutingTableID:   whereHelpernull_Int{field: "\"retrievals\".\"final_routing_table_id\""},
	StartedAt:             whereHelpertime_Time{field: "\"retrievals\".\"started_at\""},
	EndedAt:               whereHelpernull_Time{field: "\"retrievals\".\"ended_at\""},
	Error:                 whereHelpernull_String{field: "\"retrievals\".\"error\""},
	DoneAt:                whereHelpernull_Time{field: "\"retrievals\".\"done_at\""},
	UpdatedAt:             whereHelpertime_Time{field: "\"retrievals\".\"updated_at\""},
	CreatedAt:             whereHelpertime_Time{field: "\"retrievals\".\"created_at\""},
}

// RetrievalRels is where relationship names are stored.
var RetrievalRels = struct {
	Retriever    string
	Connections  string
	Dials        string
	GetProviders string
	PeerStates   string
	Providers    string
}{
	Retriever:    "Retriever",
	Connections:  "Connections",
	Dials:        "Dials",
	GetProviders: "GetProviders",
	PeerStates:   "PeerStates",
	Providers:    "Providers",
}

// retrievalR is where relationships are stored.
type retrievalR struct {
	Retriever    *Peer            `boil:"Retriever" json:"Retriever" toml:"Retriever" yaml:"Retriever"`
	Connections  ConnectionSlice  `boil:"Connections" json:"Connections" toml:"Connections" yaml:"Connections"`
	Dials        DialSlice        `boil:"Dials" json:"Dials" toml:"Dials" yaml:"Dials"`
	GetProviders GetProviderSlice `boil:"GetProviders" json:"GetProviders" toml:"GetProviders" yaml:"GetProviders"`
	PeerStates   PeerStateSlice   `boil:"PeerStates" json:"PeerStates" toml:"PeerStates" yaml:"PeerStates"`
	Providers    ProviderSlice    `boil:"Providers" json:"Providers" toml:"Providers" yaml:"Providers"`
}

// NewStruct creates a new relationship struct
func (*retrievalR) NewStruct() *retrievalR {
	return &retrievalR{}
}

// retrievalL is where Load methods for each relationship are stored.
type retrievalL struct{}

var (
	retrievalAllColumns            = []string{"id", "retriever_id", "content_id", "distance", "initial_routing_table_id", "final_routing_table_id", "started_at", "ended_at", "error", "done_at", "updated_at", "created_at"}
	retrievalColumnsWithoutDefault = []string{"retriever_id", "content_id", "distance", "initial_routing_table_id", "final_routing_table_id", "started_at", "ended_at", "error", "done_at", "updated_at", "created_at"}
	retrievalColumnsWithDefault    = []string{"id"}
	retrievalPrimaryKeyColumns     = []string{"id"}
)

type (
	// RetrievalSlice is an alias for a slice of pointers to Retrieval.
	// This should almost always be used instead of []Retrieval.
	RetrievalSlice []*Retrieval
	// RetrievalHook is the signature for custom Retrieval hook methods
	RetrievalHook func(context.Context, boil.ContextExecutor, *Retrieval) error

	retrievalQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	retrievalType                 = reflect.TypeOf(&Retrieval{})
	retrievalMapping              = queries.MakeStructMapping(retrievalType)
	retrievalPrimaryKeyMapping, _ = queries.BindMapping(retrievalType, retrievalMapping, retrievalPrimaryKeyColumns)
	retrievalInsertCacheMut       sync.RWMutex
	retrievalInsertCache          = make(map[string]insertCache)
	retrievalUpdateCacheMut       sync.RWMutex
	retrievalUpdateCache          = make(map[string]updateCache)
	retrievalUpsertCacheMut       sync.RWMutex
	retrievalUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var retrievalBeforeInsertHooks []RetrievalHook
var retrievalBeforeUpdateHooks []RetrievalHook
var retrievalBeforeDeleteHooks []RetrievalHook
var retrievalBeforeUpsertHooks []RetrievalHook

var retrievalAfterInsertHooks []RetrievalHook
var retrievalAfterSelectHooks []RetrievalHook
var retrievalAfterUpdateHooks []RetrievalHook
var retrievalAfterDeleteHooks []RetrievalHook
var retrievalAfterUpsertHooks []RetrievalHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Retrieval) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range retrievalBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Retrieval) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range retrievalBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Retrieval) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range retrievalBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Retrieval) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range retrievalBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Retrieval) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range retrievalAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Retrieval) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range retrievalAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Retrieval) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range retrievalAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Retrieval) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range retrievalAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Retrieval) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range retrievalAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRetrievalHook registers your hook function for all future operations.
func AddRetrievalHook(hookPoint boil.HookPoint, retrievalHook RetrievalHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		retrievalBeforeInsertHooks = append(retrievalBeforeInsertHooks, retrievalHook)
	case boil.BeforeUpdateHook:
		retrievalBeforeUpdateHooks = append(retrievalBeforeUpdateHooks, retrievalHook)
	case boil.BeforeDeleteHook:
		retrievalBeforeDeleteHooks = append(retrievalBeforeDeleteHooks, retrievalHook)
	case boil.BeforeUpsertHook:
		retrievalBeforeUpsertHooks = append(retrievalBeforeUpsertHooks, retrievalHook)
	case boil.AfterInsertHook:
		retrievalAfterInsertHooks = append(retrievalAfterInsertHooks, retrievalHook)
	case boil.AfterSelectHook:
		retrievalAfterSelectHooks = append(retrievalAfterSelectHooks, retrievalHook)
	case boil.AfterUpdateHook:
		retrievalAfterUpdateHooks = append(retrievalAfterUpdateHooks, retrievalHook)
	case boil.AfterDeleteHook:
		retrievalAfterDeleteHooks = append(retrievalAfterDeleteHooks, retrievalHook)
	case boil.AfterUpsertHook:
		retrievalAfterUpsertHooks = append(retrievalAfterUpsertHooks, retrievalHook)
	}
}

// One returns a single retrieval record from the query.
func (q retrievalQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Retrieval, error) {
	o := &Retrieval{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for retrievals")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Retrieval records from the query.
func (q retrievalQuery) All(ctx context.Context, exec boil.ContextExecutor) (RetrievalSlice, error) {
	var o []*Retrieval

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Retrieval slice")
	}

	if len(retrievalAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Retrieval records in the query.
func (q retrievalQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count retrievals rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q retrievalQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if retrievals exists")
	}

	return count > 0, nil
}

// Retriever pointed to by the foreign key.
func (o *Retrieval) Retriever(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RetrieverID),
	}

	queryMods = append(queryMods, mods...)

	query := Peers(queryMods...)
	queries.SetFrom(query.Query, "\"peers\"")

	return query
}

// Connections retrieves all the connection's Connections with an executor.
func (o *Retrieval) Connections(mods ...qm.QueryMod) connectionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"connections\".\"retrieval_id\"=?", o.ID),
	)

	query := Connections(queryMods...)
	queries.SetFrom(query.Query, "\"connections\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"connections\".*"})
	}

	return query
}

// Dials retrieves all the dial's Dials with an executor.
func (o *Retrieval) Dials(mods ...qm.QueryMod) dialQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dials\".\"retrieval_id\"=?", o.ID),
	)

	query := Dials(queryMods...)
	queries.SetFrom(query.Query, "\"dials\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"dials\".*"})
	}

	return query
}

// GetProviders retrieves all the get_provider's GetProviders with an executor.
func (o *Retrieval) GetProviders(mods ...qm.QueryMod) getProviderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"get_providers\".\"retrieval_id\"=?", o.ID),
	)

	query := GetProviders(queryMods...)
	queries.SetFrom(query.Query, "\"get_providers\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"get_providers\".*"})
	}

	return query
}

// PeerStates retrieves all the peer_state's PeerStates with an executor.
func (o *Retrieval) PeerStates(mods ...qm.QueryMod) peerStateQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"peer_states\".\"retrieval_id\"=?", o.ID),
	)

	query := PeerStates(queryMods...)
	queries.SetFrom(query.Query, "\"peer_states\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"peer_states\".*"})
	}

	return query
}

// Providers retrieves all the provider's Providers with an executor.
func (o *Retrieval) Providers(mods ...qm.QueryMod) providerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"providers\".\"retrieval_id\"=?", o.ID),
	)

	query := Providers(queryMods...)
	queries.SetFrom(query.Query, "\"providers\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"providers\".*"})
	}

	return query
}

// LoadRetriever allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (retrievalL) LoadRetriever(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRetrieval interface{}, mods queries.Applicator) error {
	var slice []*Retrieval
	var object *Retrieval

	if singular {
		object = maybeRetrieval.(*Retrieval)
	} else {
		slice = *maybeRetrieval.(*[]*Retrieval)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &retrievalR{}
		}
		args = append(args, object.RetrieverID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &retrievalR{}
			}

			for _, a := range args {
				if a == obj.RetrieverID {
					continue Outer
				}
			}

			args = append(args, obj.RetrieverID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(retrievalAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Retriever = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.RetrieverRetrievals = append(foreign.R.RetrieverRetrievals, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RetrieverID == foreign.ID {
				local.R.Retriever = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.RetrieverRetrievals = append(foreign.R.RetrieverRetrievals, local)
				break
			}
		}
	}

	return nil
}

// LoadConnections allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (retrievalL) LoadConnections(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRetrieval interface{}, mods queries.Applicator) error {
	var slice []*Retrieval
	var object *Retrieval

	if singular {
		object = maybeRetrieval.(*Retrieval)
	} else {
		slice = *maybeRetrieval.(*[]*Retrieval)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &retrievalR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &retrievalR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`connections`),
		qm.WhereIn(`connections.retrieval_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load connections")
	}

	var resultSlice []*Connection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice connections")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on connections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for connections")
	}

	if len(connectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Connections = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &connectionR{}
			}
			foreign.R.Retrieval = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RetrievalID) {
				local.R.Connections = append(local.R.Connections, foreign)
				if foreign.R == nil {
					foreign.R = &connectionR{}
				}
				foreign.R.Retrieval = local
				break
			}
		}
	}

	return nil
}

// LoadDials allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (retrievalL) LoadDials(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRetrieval interface{}, mods queries.Applicator) error {
	var slice []*Retrieval
	var object *Retrieval

	if singular {
		object = maybeRetrieval.(*Retrieval)
	} else {
		slice = *maybeRetrieval.(*[]*Retrieval)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &retrievalR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &retrievalR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dials`),
		qm.WhereIn(`dials.retrieval_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dials")
	}

	var resultSlice []*Dial
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dials")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dials")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dials")
	}

	if len(dialAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Dials = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dialR{}
			}
			foreign.R.Retrieval = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RetrievalID) {
				local.R.Dials = append(local.R.Dials, foreign)
				if foreign.R == nil {
					foreign.R = &dialR{}
				}
				foreign.R.Retrieval = local
				break
			}
		}
	}

	return nil
}

// LoadGetProviders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (retrievalL) LoadGetProviders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRetrieval interface{}, mods queries.Applicator) error {
	var slice []*Retrieval
	var object *Retrieval

	if singular {
		object = maybeRetrieval.(*Retrieval)
	} else {
		slice = *maybeRetrieval.(*[]*Retrieval)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &retrievalR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &retrievalR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`get_providers`),
		qm.WhereIn(`get_providers.retrieval_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load get_providers")
	}

	var resultSlice []*GetProvider
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice get_providers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on get_providers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for get_providers")
	}

	if len(getProviderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GetProviders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &getProviderR{}
			}
			foreign.R.Retrieval = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RetrievalID {
				local.R.GetProviders = append(local.R.GetProviders, foreign)
				if foreign.R == nil {
					foreign.R = &getProviderR{}
				}
				foreign.R.Retrieval = local
				break
			}
		}
	}

	return nil
}

// LoadPeerStates allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (retrievalL) LoadPeerStates(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRetrieval interface{}, mods queries.Applicator) error {
	var slice []*Retrieval
	var object *Retrieval

	if singular {
		object = maybeRetrieval.(*Retrieval)
	} else {
		slice = *maybeRetrieval.(*[]*Retrieval)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &retrievalR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &retrievalR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peer_states`),
		qm.WhereIn(`peer_states.retrieval_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load peer_states")
	}

	var resultSlice []*PeerState
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice peer_states")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on peer_states")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peer_states")
	}

	if len(peerStateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PeerStates = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &peerStateR{}
			}
			foreign.R.Retrieval = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RetrievalID) {
				local.R.PeerStates = append(local.R.PeerStates, foreign)
				if foreign.R == nil {
					foreign.R = &peerStateR{}
				}
				foreign.R.Retrieval = local
				break
			}
		}
	}

	return nil
}

// LoadProviders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (retrievalL) LoadProviders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRetrieval interface{}, mods queries.Applicator) error {
	var slice []*Retrieval
	var object *Retrieval

	if singular {
		object = maybeRetrieval.(*Retrieval)
	} else {
		slice = *maybeRetrieval.(*[]*Retrieval)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &retrievalR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &retrievalR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`providers`),
		qm.WhereIn(`providers.retrieval_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load providers")
	}

	var resultSlice []*Provider
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice providers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on providers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for providers")
	}

	if len(providerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Providers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &providerR{}
			}
			foreign.R.Retrieval = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RetrievalID {
				local.R.Providers = append(local.R.Providers, foreign)
				if foreign.R == nil {
					foreign.R = &providerR{}
				}
				foreign.R.Retrieval = local
				break
			}
		}
	}

	return nil
}

// SetRetriever of the retrieval to the related item.
// Sets o.R.Retriever to related.
// Adds o to related.R.RetrieverRetrievals.
func (o *Retrieval) SetRetriever(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"retrievals\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"retriever_id"}),
		strmangle.WhereClause("\"", "\"", 2, retrievalPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RetrieverID = related.ID
	if o.R == nil {
		o.R = &retrievalR{
			Retriever: related,
		}
	} else {
		o.R.Retriever = related
	}

	if related.R == nil {
		related.R = &peerR{
			RetrieverRetrievals: RetrievalSlice{o},
		}
	} else {
		related.R.RetrieverRetrievals = append(related.R.RetrieverRetrievals, o)
	}

	return nil
}

// AddConnections adds the given related objects to the existing relationships
// of the retrieval, optionally inserting them as new records.
// Appends related to o.R.Connections.
// Sets related.R.Retrieval appropriately.
func (o *Retrieval) AddConnections(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Connection) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RetrievalID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"connections\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"retrieval_id"}),
				strmangle.WhereClause("\"", "\"", 2, connectionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RetrievalID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &retrievalR{
			Connections: related,
		}
	} else {
		o.R.Connections = append(o.R.Connections, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &connectionR{
				Retrieval: o,
			}
		} else {
			rel.R.Retrieval = o
		}
	}
	return nil
}

// SetConnections removes all previously related items of the
// retrieval replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Retrieval's Connections accordingly.
// Replaces o.R.Connections with related.
// Sets related.R.Retrieval's Connections accordingly.
func (o *Retrieval) SetConnections(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Connection) error {
	query := "update \"connections\" set \"retrieval_id\" = null where \"retrieval_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Connections {
			queries.SetScanner(&rel.RetrievalID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Retrieval = nil
		}

		o.R.Connections = nil
	}
	return o.AddConnections(ctx, exec, insert, related...)
}

// RemoveConnections relationships from objects passed in.
// Removes related items from R.Connections (uses pointer comparison, removal does not keep order)
// Sets related.R.Retrieval.
func (o *Retrieval) RemoveConnections(ctx context.Context, exec boil.ContextExecutor, related ...*Connection) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RetrievalID, nil)
		if rel.R != nil {
			rel.R.Retrieval = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("retrieval_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Connections {
			if rel != ri {
				continue
			}

			ln := len(o.R.Connections)
			if ln > 1 && i < ln-1 {
				o.R.Connections[i] = o.R.Connections[ln-1]
			}
			o.R.Connections = o.R.Connections[:ln-1]
			break
		}
	}

	return nil
}

// AddDials adds the given related objects to the existing relationships
// of the retrieval, optionally inserting them as new records.
// Appends related to o.R.Dials.
// Sets related.R.Retrieval appropriately.
func (o *Retrieval) AddDials(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Dial) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RetrievalID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dials\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"retrieval_id"}),
				strmangle.WhereClause("\"", "\"", 2, dialPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RetrievalID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &retrievalR{
			Dials: related,
		}
	} else {
		o.R.Dials = append(o.R.Dials, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dialR{
				Retrieval: o,
			}
		} else {
			rel.R.Retrieval = o
		}
	}
	return nil
}

// SetDials removes all previously related items of the
// retrieval replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Retrieval's Dials accordingly.
// Replaces o.R.Dials with related.
// Sets related.R.Retrieval's Dials accordingly.
func (o *Retrieval) SetDials(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Dial) error {
	query := "update \"dials\" set \"retrieval_id\" = null where \"retrieval_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Dials {
			queries.SetScanner(&rel.RetrievalID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Retrieval = nil
		}

		o.R.Dials = nil
	}
	return o.AddDials(ctx, exec, insert, related...)
}

// RemoveDials relationships from objects passed in.
// Removes related items from R.Dials (uses pointer comparison, removal does not keep order)
// Sets related.R.Retrieval.
func (o *Retrieval) RemoveDials(ctx context.Context, exec boil.ContextExecutor, related ...*Dial) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RetrievalID, nil)
		if rel.R != nil {
			rel.R.Retrieval = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("retrieval_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Dials {
			if rel != ri {
				continue
			}

			ln := len(o.R.Dials)
			if ln > 1 && i < ln-1 {
				o.R.Dials[i] = o.R.Dials[ln-1]
			}
			o.R.Dials = o.R.Dials[:ln-1]
			break
		}
	}

	return nil
}

// AddGetProviders adds the given related objects to the existing relationships
// of the retrieval, optionally inserting them as new records.
// Appends related to o.R.GetProviders.
// Sets related.R.Retrieval appropriately.
func (o *Retrieval) AddGetProviders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GetProvider) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RetrievalID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"get_providers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"retrieval_id"}),
				strmangle.WhereClause("\"", "\"", 2, getProviderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RetrievalID = o.ID
		}
	}

	if o.R == nil {
		o.R = &retrievalR{
			GetProviders: related,
		}
	} else {
		o.R.GetProviders = append(o.R.GetProviders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &getProviderR{
				Retrieval: o,
			}
		} else {
			rel.R.Retrieval = o
		}
	}
	return nil
}

// AddPeerStates adds the given related objects to the existing relationships
// of the retrieval, optionally inserting them as new records.
// Appends related to o.R.PeerStates.
// Sets related.R.Retrieval appropriately.
func (o *Retrieval) AddPeerStates(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PeerState) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RetrievalID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"peer_states\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"retrieval_id"}),
				strmangle.WhereClause("\"", "\"", 2, peerStatePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RetrievalID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &retrievalR{
			PeerStates: related,
		}
	} else {
		o.R.PeerStates = append(o.R.PeerStates, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &peerStateR{
				Retrieval: o,
			}
		} else {
			rel.R.Retrieval = o
		}
	}
	return nil
}

// SetPeerStates removes all previously related items of the
// retrieval replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Retrieval's PeerStates accordingly.
// Replaces o.R.PeerStates with related.
// Sets related.R.Retrieval's PeerStates accordingly.
func (o *Retrieval) SetPeerStates(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PeerState) error {
	query := "update \"peer_states\" set \"retrieval_id\" = null where \"retrieval_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.PeerStates {
			queries.SetScanner(&rel.RetrievalID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Retrieval = nil
		}

		o.R.PeerStates = nil
	}
	return o.AddPeerStates(ctx, exec, insert, related...)
}

// RemovePeerStates relationships from objects passed in.
// Removes related items from R.PeerStates (uses pointer comparison, removal does not keep order)
// Sets related.R.Retrieval.
func (o *Retrieval) RemovePeerStates(ctx context.Context, exec boil.ContextExecutor, related ...*PeerState) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RetrievalID, nil)
		if rel.R != nil {
			rel.R.Retrieval = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("retrieval_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.PeerStates {
			if rel != ri {
				continue
			}

			ln := len(o.R.PeerStates)
			if ln > 1 && i < ln-1 {
				o.R.PeerStates[i] = o.R.PeerStates[ln-1]
			}
			o.R.PeerStates = o.R.PeerStates[:ln-1]
			break
		}
	}

	return nil
}

// AddProviders adds the given related objects to the existing relationships
// of the retrieval, optionally inserting them as new records.
// Appends related to o.R.Providers.
// Sets related.R.Retrieval appropriately.
func (o *Retrieval) AddProviders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Provider) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RetrievalID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"providers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"retrieval_id"}),
				strmangle.WhereClause("\"", "\"", 2, providerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RetrievalID = o.ID
		}
	}

	if o.R == nil {
		o.R = &retrievalR{
			Providers: related,
		}
	} else {
		o.R.Providers = append(o.R.Providers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &providerR{
				Retrieval: o,
			}
		} else {
			rel.R.Retrieval = o
		}
	}
	return nil
}

// Retrievals retrieves all the records using an executor.
func Retrievals(mods ...qm.QueryMod) retrievalQuery {
	mods = append(mods, qm.From("\"retrievals\""))
	return retrievalQuery{NewQuery(mods...)}
}

// FindRetrieval retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRetrieval(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Retrieval, error) {
	retrievalObj := &Retrieval{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"retrievals\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, retrievalObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from retrievals")
	}

	if err = retrievalObj.doAfterSelectHooks(ctx, exec); err != nil {
		return retrievalObj, err
	}

	return retrievalObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Retrieval) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no retrievals provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(retrievalColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	retrievalInsertCacheMut.RLock()
	cache, cached := retrievalInsertCache[key]
	retrievalInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			retrievalAllColumns,
			retrievalColumnsWithDefault,
			retrievalColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(retrievalType, retrievalMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(retrievalType, retrievalMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"retrievals\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"retrievals\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into retrievals")
	}

	if !cached {
		retrievalInsertCacheMut.Lock()
		retrievalInsertCache[key] = cache
		retrievalInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Retrieval.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Retrieval) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	retrievalUpdateCacheMut.RLock()
	cache, cached := retrievalUpdateCache[key]
	retrievalUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			retrievalAllColumns,
			retrievalPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update retrievals, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"retrievals\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, retrievalPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(retrievalType, retrievalMapping, append(wl, retrievalPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update retrievals row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for retrievals")
	}

	if !cached {
		retrievalUpdateCacheMut.Lock()
		retrievalUpdateCache[key] = cache
		retrievalUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q retrievalQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for retrievals")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for retrievals")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RetrievalSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), retrievalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"retrievals\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, retrievalPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in retrieval slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all retrieval")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Retrieval) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no retrievals provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(retrievalColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	retrievalUpsertCacheMut.RLock()
	cache, cached := retrievalUpsertCache[key]
	retrievalUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			retrievalAllColumns,
			retrievalColumnsWithDefault,
			retrievalColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			retrievalAllColumns,
			retrievalPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert retrievals, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(retrievalPrimaryKeyColumns))
			copy(conflict, retrievalPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"retrievals\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(retrievalType, retrievalMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(retrievalType, retrievalMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert retrievals")
	}

	if !cached {
		retrievalUpsertCacheMut.Lock()
		retrievalUpsertCache[key] = cache
		retrievalUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Retrieval record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Retrieval) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Retrieval provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), retrievalPrimaryKeyMapping)
	sql := "DELETE FROM \"retrievals\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from retrievals")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for retrievals")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q retrievalQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no retrievalQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from retrievals")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for retrievals")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RetrievalSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(retrievalBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), retrievalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"retrievals\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, retrievalPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from retrieval slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for retrievals")
	}

	if len(retrievalAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Retrieval) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRetrieval(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RetrievalSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RetrievalSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), retrievalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"retrievals\".* FROM \"retrievals\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, retrievalPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RetrievalSlice")
	}

	*o = slice

	return nil
}

// RetrievalExists checks if the Retrieval row exists.
func RetrievalExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"retrievals\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if retrievals exists")
	}

	return exists, nil
}
