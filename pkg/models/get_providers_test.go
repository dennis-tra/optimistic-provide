// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGetProviders(t *testing.T) {
	t.Parallel()

	query := GetProviders()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGetProvidersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GetProvider{}
	if err = randomize.Struct(seed, o, getProviderDBTypes, true, getProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GetProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GetProviders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGetProvidersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GetProvider{}
	if err = randomize.Struct(seed, o, getProviderDBTypes, true, getProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GetProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GetProviders().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GetProviders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGetProvidersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GetProvider{}
	if err = randomize.Struct(seed, o, getProviderDBTypes, true, getProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GetProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GetProviderSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GetProviders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGetProvidersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GetProvider{}
	if err = randomize.Struct(seed, o, getProviderDBTypes, true, getProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GetProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GetProviderExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if GetProvider exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GetProviderExists to return true, but got false.")
	}
}

func testGetProvidersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GetProvider{}
	if err = randomize.Struct(seed, o, getProviderDBTypes, true, getProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GetProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	getProviderFound, err := FindGetProvider(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if getProviderFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGetProvidersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GetProvider{}
	if err = randomize.Struct(seed, o, getProviderDBTypes, true, getProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GetProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GetProviders().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGetProvidersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GetProvider{}
	if err = randomize.Struct(seed, o, getProviderDBTypes, true, getProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GetProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GetProviders().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGetProvidersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	getProviderOne := &GetProvider{}
	getProviderTwo := &GetProvider{}
	if err = randomize.Struct(seed, getProviderOne, getProviderDBTypes, false, getProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GetProvider struct: %s", err)
	}
	if err = randomize.Struct(seed, getProviderTwo, getProviderDBTypes, false, getProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GetProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = getProviderOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = getProviderTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GetProviders().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGetProvidersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	getProviderOne := &GetProvider{}
	getProviderTwo := &GetProvider{}
	if err = randomize.Struct(seed, getProviderOne, getProviderDBTypes, false, getProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GetProvider struct: %s", err)
	}
	if err = randomize.Struct(seed, getProviderTwo, getProviderDBTypes, false, getProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GetProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = getProviderOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = getProviderTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GetProviders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func getProviderBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *GetProvider) error {
	*o = GetProvider{}
	return nil
}

func getProviderAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *GetProvider) error {
	*o = GetProvider{}
	return nil
}

func getProviderAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *GetProvider) error {
	*o = GetProvider{}
	return nil
}

func getProviderBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GetProvider) error {
	*o = GetProvider{}
	return nil
}

func getProviderAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GetProvider) error {
	*o = GetProvider{}
	return nil
}

func getProviderBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GetProvider) error {
	*o = GetProvider{}
	return nil
}

func getProviderAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GetProvider) error {
	*o = GetProvider{}
	return nil
}

func getProviderBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GetProvider) error {
	*o = GetProvider{}
	return nil
}

func getProviderAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GetProvider) error {
	*o = GetProvider{}
	return nil
}

func testGetProvidersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &GetProvider{}
	o := &GetProvider{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, getProviderDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GetProvider object: %s", err)
	}

	AddGetProviderHook(boil.BeforeInsertHook, getProviderBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	getProviderBeforeInsertHooks = []GetProviderHook{}

	AddGetProviderHook(boil.AfterInsertHook, getProviderAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	getProviderAfterInsertHooks = []GetProviderHook{}

	AddGetProviderHook(boil.AfterSelectHook, getProviderAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	getProviderAfterSelectHooks = []GetProviderHook{}

	AddGetProviderHook(boil.BeforeUpdateHook, getProviderBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	getProviderBeforeUpdateHooks = []GetProviderHook{}

	AddGetProviderHook(boil.AfterUpdateHook, getProviderAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	getProviderAfterUpdateHooks = []GetProviderHook{}

	AddGetProviderHook(boil.BeforeDeleteHook, getProviderBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	getProviderBeforeDeleteHooks = []GetProviderHook{}

	AddGetProviderHook(boil.AfterDeleteHook, getProviderAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	getProviderAfterDeleteHooks = []GetProviderHook{}

	AddGetProviderHook(boil.BeforeUpsertHook, getProviderBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	getProviderBeforeUpsertHooks = []GetProviderHook{}

	AddGetProviderHook(boil.AfterUpsertHook, getProviderAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	getProviderAfterUpsertHooks = []GetProviderHook{}
}

func testGetProvidersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GetProvider{}
	if err = randomize.Struct(seed, o, getProviderDBTypes, true, getProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GetProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GetProviders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGetProvidersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GetProvider{}
	if err = randomize.Struct(seed, o, getProviderDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GetProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(getProviderColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GetProviders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGetProviderToManyProviderPeers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GetProvider
	var b, c ProviderPeer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, getProviderDBTypes, true, getProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GetProvider struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, providerPeerDBTypes, false, providerPeerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, providerPeerDBTypes, false, providerPeerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.GetProvidersID = a.ID
	c.GetProvidersID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ProviderPeers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.GetProvidersID == b.GetProvidersID {
			bFound = true
		}
		if v.GetProvidersID == c.GetProvidersID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GetProviderSlice{&a}
	if err = a.L.LoadProviderPeers(ctx, tx, false, (*[]*GetProvider)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProviderPeers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ProviderPeers = nil
	if err = a.L.LoadProviderPeers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProviderPeers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGetProviderToManyAddOpProviderPeers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GetProvider
	var b, c, d, e ProviderPeer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, getProviderDBTypes, false, strmangle.SetComplement(getProviderPrimaryKeyColumns, getProviderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProviderPeer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, providerPeerDBTypes, false, strmangle.SetComplement(providerPeerPrimaryKeyColumns, providerPeerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ProviderPeer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProviderPeers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.GetProvidersID {
			t.Error("foreign key was wrong value", a.ID, first.GetProvidersID)
		}
		if a.ID != second.GetProvidersID {
			t.Error("foreign key was wrong value", a.ID, second.GetProvidersID)
		}

		if first.R.GetProvider != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.GetProvider != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ProviderPeers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ProviderPeers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ProviderPeers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testGetProviderToOnePeerUsingLocal(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local GetProvider
	var foreign Peer

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, getProviderDBTypes, false, getProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GetProvider struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, peerDBTypes, false, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LocalID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Local().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GetProviderSlice{&local}
	if err = local.L.LoadLocal(ctx, tx, false, (*[]*GetProvider)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Local == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Local = nil
	if err = local.L.LoadLocal(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Local == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testGetProviderToOnePeerUsingRemote(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local GetProvider
	var foreign Peer

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, getProviderDBTypes, false, getProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GetProvider struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, peerDBTypes, false, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RemoteID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Remote().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GetProviderSlice{&local}
	if err = local.L.LoadRemote(ctx, tx, false, (*[]*GetProvider)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Remote == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Remote = nil
	if err = local.L.LoadRemote(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Remote == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testGetProviderToOneRetrievalUsingRetrieval(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local GetProvider
	var foreign Retrieval

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, getProviderDBTypes, false, getProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GetProvider struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, retrievalDBTypes, false, retrievalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Retrieval struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RetrievalID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Retrieval().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GetProviderSlice{&local}
	if err = local.L.LoadRetrieval(ctx, tx, false, (*[]*GetProvider)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Retrieval == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Retrieval = nil
	if err = local.L.LoadRetrieval(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Retrieval == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testGetProviderToOneSetOpPeerUsingLocal(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GetProvider
	var b, c Peer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, getProviderDBTypes, false, strmangle.SetComplement(getProviderPrimaryKeyColumns, getProviderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, peerDBTypes, false, strmangle.SetComplement(peerPrimaryKeyColumns, peerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, peerDBTypes, false, strmangle.SetComplement(peerPrimaryKeyColumns, peerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Peer{&b, &c} {
		err = a.SetLocal(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Local != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LocalGetProviders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LocalID != x.ID {
			t.Error("foreign key was wrong value", a.LocalID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LocalID))
		reflect.Indirect(reflect.ValueOf(&a.LocalID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.LocalID != x.ID {
			t.Error("foreign key was wrong value", a.LocalID, x.ID)
		}
	}
}
func testGetProviderToOneSetOpPeerUsingRemote(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GetProvider
	var b, c Peer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, getProviderDBTypes, false, strmangle.SetComplement(getProviderPrimaryKeyColumns, getProviderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, peerDBTypes, false, strmangle.SetComplement(peerPrimaryKeyColumns, peerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, peerDBTypes, false, strmangle.SetComplement(peerPrimaryKeyColumns, peerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Peer{&b, &c} {
		err = a.SetRemote(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Remote != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RemoteGetProviders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RemoteID != x.ID {
			t.Error("foreign key was wrong value", a.RemoteID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RemoteID))
		reflect.Indirect(reflect.ValueOf(&a.RemoteID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RemoteID != x.ID {
			t.Error("foreign key was wrong value", a.RemoteID, x.ID)
		}
	}
}
func testGetProviderToOneSetOpRetrievalUsingRetrieval(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GetProvider
	var b, c Retrieval

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, getProviderDBTypes, false, strmangle.SetComplement(getProviderPrimaryKeyColumns, getProviderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, retrievalDBTypes, false, strmangle.SetComplement(retrievalPrimaryKeyColumns, retrievalColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, retrievalDBTypes, false, strmangle.SetComplement(retrievalPrimaryKeyColumns, retrievalColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Retrieval{&b, &c} {
		err = a.SetRetrieval(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Retrieval != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GetProviders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RetrievalID != x.ID {
			t.Error("foreign key was wrong value", a.RetrievalID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RetrievalID))
		reflect.Indirect(reflect.ValueOf(&a.RetrievalID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RetrievalID != x.ID {
			t.Error("foreign key was wrong value", a.RetrievalID, x.ID)
		}
	}
}

func testGetProvidersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GetProvider{}
	if err = randomize.Struct(seed, o, getProviderDBTypes, true, getProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GetProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGetProvidersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GetProvider{}
	if err = randomize.Struct(seed, o, getProviderDBTypes, true, getProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GetProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GetProviderSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGetProvidersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GetProvider{}
	if err = randomize.Struct(seed, o, getProviderDBTypes, true, getProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GetProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GetProviders().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	getProviderDBTypes = map[string]string{`ID`: `integer`, `RetrievalID`: `integer`, `LocalID`: `integer`, `RemoteID`: `integer`, `StartedAt`: `timestamp with time zone`, `EndedAt`: `timestamp with time zone`, `ProviderPeersCount`: `integer`, `Error`: `text`}
	_                  = bytes.MinRead
)

func testGetProvidersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(getProviderPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(getProviderAllColumns) == len(getProviderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GetProvider{}
	if err = randomize.Struct(seed, o, getProviderDBTypes, true, getProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GetProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GetProviders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, getProviderDBTypes, true, getProviderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GetProvider struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGetProvidersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(getProviderAllColumns) == len(getProviderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GetProvider{}
	if err = randomize.Struct(seed, o, getProviderDBTypes, true, getProviderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GetProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GetProviders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, getProviderDBTypes, true, getProviderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GetProvider struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(getProviderAllColumns, getProviderPrimaryKeyColumns) {
		fields = getProviderAllColumns
	} else {
		fields = strmangle.SetComplement(
			getProviderAllColumns,
			getProviderPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GetProviderSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGetProvidersUpsert(t *testing.T) {
	t.Parallel()

	if len(getProviderAllColumns) == len(getProviderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GetProvider{}
	if err = randomize.Struct(seed, &o, getProviderDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GetProvider struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GetProvider: %s", err)
	}

	count, err := GetProviders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, getProviderDBTypes, false, getProviderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GetProvider struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GetProvider: %s", err)
	}

	count, err = GetProviders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
