// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RoutingTableEntry is an object representing the database table.
type RoutingTableEntry struct {
	RoutingTableSnapshotID        int       `boil:"routing_table_snapshot_id" json:"routing_table_snapshot_id" toml:"routing_table_snapshot_id" yaml:"routing_table_snapshot_id"`
	PeerID                        int       `boil:"peer_id" json:"peer_id" toml:"peer_id" yaml:"peer_id"`
	Bucket                        int16     `boil:"bucket" json:"bucket" toml:"bucket" yaml:"bucket"`
	LastUsefulAt                  null.Time `boil:"last_useful_at" json:"last_useful_at,omitempty" toml:"last_useful_at" yaml:"last_useful_at,omitempty"`
	LastSuccessfulOutboundQueryAt time.Time `boil:"last_successful_outbound_query_at" json:"last_successful_outbound_query_at" toml:"last_successful_outbound_query_at" yaml:"last_successful_outbound_query_at"`
	AddedAt                       time.Time `boil:"added_at" json:"added_at" toml:"added_at" yaml:"added_at"`
	ConnectedSince                null.Time `boil:"connected_since" json:"connected_since,omitempty" toml:"connected_since" yaml:"connected_since,omitempty"`

	R *routingTableEntryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L routingTableEntryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RoutingTableEntryColumns = struct {
	RoutingTableSnapshotID        string
	PeerID                        string
	Bucket                        string
	LastUsefulAt                  string
	LastSuccessfulOutboundQueryAt string
	AddedAt                       string
	ConnectedSince                string
}{
	RoutingTableSnapshotID:        "routing_table_snapshot_id",
	PeerID:                        "peer_id",
	Bucket:                        "bucket",
	LastUsefulAt:                  "last_useful_at",
	LastSuccessfulOutboundQueryAt: "last_successful_outbound_query_at",
	AddedAt:                       "added_at",
	ConnectedSince:                "connected_since",
}

var RoutingTableEntryTableColumns = struct {
	RoutingTableSnapshotID        string
	PeerID                        string
	Bucket                        string
	LastUsefulAt                  string
	LastSuccessfulOutboundQueryAt string
	AddedAt                       string
	ConnectedSince                string
}{
	RoutingTableSnapshotID:        "routing_table_entries.routing_table_snapshot_id",
	PeerID:                        "routing_table_entries.peer_id",
	Bucket:                        "routing_table_entries.bucket",
	LastUsefulAt:                  "routing_table_entries.last_useful_at",
	LastSuccessfulOutboundQueryAt: "routing_table_entries.last_successful_outbound_query_at",
	AddedAt:                       "routing_table_entries.added_at",
	ConnectedSince:                "routing_table_entries.connected_since",
}

// Generated where

type whereHelperint16 struct{ field string }

func (w whereHelperint16) EQ(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint16) NEQ(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint16) LT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint16) LTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint16) GT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint16) GTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint16) NIN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var RoutingTableEntryWhere = struct {
	RoutingTableSnapshotID        whereHelperint
	PeerID                        whereHelperint
	Bucket                        whereHelperint16
	LastUsefulAt                  whereHelpernull_Time
	LastSuccessfulOutboundQueryAt whereHelpertime_Time
	AddedAt                       whereHelpertime_Time
	ConnectedSince                whereHelpernull_Time
}{
	RoutingTableSnapshotID:        whereHelperint{field: "\"routing_table_entries\".\"routing_table_snapshot_id\""},
	PeerID:                        whereHelperint{field: "\"routing_table_entries\".\"peer_id\""},
	Bucket:                        whereHelperint16{field: "\"routing_table_entries\".\"bucket\""},
	LastUsefulAt:                  whereHelpernull_Time{field: "\"routing_table_entries\".\"last_useful_at\""},
	LastSuccessfulOutboundQueryAt: whereHelpertime_Time{field: "\"routing_table_entries\".\"last_successful_outbound_query_at\""},
	AddedAt:                       whereHelpertime_Time{field: "\"routing_table_entries\".\"added_at\""},
	ConnectedSince:                whereHelpernull_Time{field: "\"routing_table_entries\".\"connected_since\""},
}

// RoutingTableEntryRels is where relationship names are stored.
var RoutingTableEntryRels = struct {
	Peer                 string
	RoutingTableSnapshot string
}{
	Peer:                 "Peer",
	RoutingTableSnapshot: "RoutingTableSnapshot",
}

// routingTableEntryR is where relationships are stored.
type routingTableEntryR struct {
	Peer                 *Peer                 `boil:"Peer" json:"Peer" toml:"Peer" yaml:"Peer"`
	RoutingTableSnapshot *RoutingTableSnapshot `boil:"RoutingTableSnapshot" json:"RoutingTableSnapshot" toml:"RoutingTableSnapshot" yaml:"RoutingTableSnapshot"`
}

// NewStruct creates a new relationship struct
func (*routingTableEntryR) NewStruct() *routingTableEntryR {
	return &routingTableEntryR{}
}

// routingTableEntryL is where Load methods for each relationship are stored.
type routingTableEntryL struct{}

var (
	routingTableEntryAllColumns            = []string{"routing_table_snapshot_id", "peer_id", "bucket", "last_useful_at", "last_successful_outbound_query_at", "added_at", "connected_since"}
	routingTableEntryColumnsWithoutDefault = []string{"routing_table_snapshot_id", "peer_id", "bucket", "last_useful_at", "last_successful_outbound_query_at", "added_at", "connected_since"}
	routingTableEntryColumnsWithDefault    = []string{}
	routingTableEntryPrimaryKeyColumns     = []string{"routing_table_snapshot_id", "peer_id"}
)

type (
	// RoutingTableEntrySlice is an alias for a slice of pointers to RoutingTableEntry.
	// This should almost always be used instead of []RoutingTableEntry.
	RoutingTableEntrySlice []*RoutingTableEntry
	// RoutingTableEntryHook is the signature for custom RoutingTableEntry hook methods
	RoutingTableEntryHook func(context.Context, boil.ContextExecutor, *RoutingTableEntry) error

	routingTableEntryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	routingTableEntryType                 = reflect.TypeOf(&RoutingTableEntry{})
	routingTableEntryMapping              = queries.MakeStructMapping(routingTableEntryType)
	routingTableEntryPrimaryKeyMapping, _ = queries.BindMapping(routingTableEntryType, routingTableEntryMapping, routingTableEntryPrimaryKeyColumns)
	routingTableEntryInsertCacheMut       sync.RWMutex
	routingTableEntryInsertCache          = make(map[string]insertCache)
	routingTableEntryUpdateCacheMut       sync.RWMutex
	routingTableEntryUpdateCache          = make(map[string]updateCache)
	routingTableEntryUpsertCacheMut       sync.RWMutex
	routingTableEntryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var routingTableEntryBeforeInsertHooks []RoutingTableEntryHook
var routingTableEntryBeforeUpdateHooks []RoutingTableEntryHook
var routingTableEntryBeforeDeleteHooks []RoutingTableEntryHook
var routingTableEntryBeforeUpsertHooks []RoutingTableEntryHook

var routingTableEntryAfterInsertHooks []RoutingTableEntryHook
var routingTableEntryAfterSelectHooks []RoutingTableEntryHook
var routingTableEntryAfterUpdateHooks []RoutingTableEntryHook
var routingTableEntryAfterDeleteHooks []RoutingTableEntryHook
var routingTableEntryAfterUpsertHooks []RoutingTableEntryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RoutingTableEntry) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routingTableEntryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RoutingTableEntry) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routingTableEntryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RoutingTableEntry) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routingTableEntryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RoutingTableEntry) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routingTableEntryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RoutingTableEntry) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routingTableEntryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RoutingTableEntry) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routingTableEntryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RoutingTableEntry) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routingTableEntryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RoutingTableEntry) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routingTableEntryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RoutingTableEntry) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range routingTableEntryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRoutingTableEntryHook registers your hook function for all future operations.
func AddRoutingTableEntryHook(hookPoint boil.HookPoint, routingTableEntryHook RoutingTableEntryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		routingTableEntryBeforeInsertHooks = append(routingTableEntryBeforeInsertHooks, routingTableEntryHook)
	case boil.BeforeUpdateHook:
		routingTableEntryBeforeUpdateHooks = append(routingTableEntryBeforeUpdateHooks, routingTableEntryHook)
	case boil.BeforeDeleteHook:
		routingTableEntryBeforeDeleteHooks = append(routingTableEntryBeforeDeleteHooks, routingTableEntryHook)
	case boil.BeforeUpsertHook:
		routingTableEntryBeforeUpsertHooks = append(routingTableEntryBeforeUpsertHooks, routingTableEntryHook)
	case boil.AfterInsertHook:
		routingTableEntryAfterInsertHooks = append(routingTableEntryAfterInsertHooks, routingTableEntryHook)
	case boil.AfterSelectHook:
		routingTableEntryAfterSelectHooks = append(routingTableEntryAfterSelectHooks, routingTableEntryHook)
	case boil.AfterUpdateHook:
		routingTableEntryAfterUpdateHooks = append(routingTableEntryAfterUpdateHooks, routingTableEntryHook)
	case boil.AfterDeleteHook:
		routingTableEntryAfterDeleteHooks = append(routingTableEntryAfterDeleteHooks, routingTableEntryHook)
	case boil.AfterUpsertHook:
		routingTableEntryAfterUpsertHooks = append(routingTableEntryAfterUpsertHooks, routingTableEntryHook)
	}
}

// One returns a single routingTableEntry record from the query.
func (q routingTableEntryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RoutingTableEntry, error) {
	o := &RoutingTableEntry{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for routing_table_entries")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RoutingTableEntry records from the query.
func (q routingTableEntryQuery) All(ctx context.Context, exec boil.ContextExecutor) (RoutingTableEntrySlice, error) {
	var o []*RoutingTableEntry

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RoutingTableEntry slice")
	}

	if len(routingTableEntryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RoutingTableEntry records in the query.
func (q routingTableEntryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count routing_table_entries rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q routingTableEntryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if routing_table_entries exists")
	}

	return count > 0, nil
}

// Peer pointed to by the foreign key.
func (o *RoutingTableEntry) Peer(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PeerID),
	}

	queryMods = append(queryMods, mods...)

	query := Peers(queryMods...)
	queries.SetFrom(query.Query, "\"peers\"")

	return query
}

// RoutingTableSnapshot pointed to by the foreign key.
func (o *RoutingTableEntry) RoutingTableSnapshot(mods ...qm.QueryMod) routingTableSnapshotQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RoutingTableSnapshotID),
	}

	queryMods = append(queryMods, mods...)

	query := RoutingTableSnapshots(queryMods...)
	queries.SetFrom(query.Query, "\"routing_table_snapshots\"")

	return query
}

// LoadPeer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (routingTableEntryL) LoadPeer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoutingTableEntry interface{}, mods queries.Applicator) error {
	var slice []*RoutingTableEntry
	var object *RoutingTableEntry

	if singular {
		object = maybeRoutingTableEntry.(*RoutingTableEntry)
	} else {
		slice = *maybeRoutingTableEntry.(*[]*RoutingTableEntry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &routingTableEntryR{}
		}
		args = append(args, object.PeerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &routingTableEntryR{}
			}

			for _, a := range args {
				if a == obj.PeerID {
					continue Outer
				}
			}

			args = append(args, obj.PeerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(routingTableEntryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Peer = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.RoutingTableEntries = append(foreign.R.RoutingTableEntries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PeerID == foreign.ID {
				local.R.Peer = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.RoutingTableEntries = append(foreign.R.RoutingTableEntries, local)
				break
			}
		}
	}

	return nil
}

// LoadRoutingTableSnapshot allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (routingTableEntryL) LoadRoutingTableSnapshot(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoutingTableEntry interface{}, mods queries.Applicator) error {
	var slice []*RoutingTableEntry
	var object *RoutingTableEntry

	if singular {
		object = maybeRoutingTableEntry.(*RoutingTableEntry)
	} else {
		slice = *maybeRoutingTableEntry.(*[]*RoutingTableEntry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &routingTableEntryR{}
		}
		args = append(args, object.RoutingTableSnapshotID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &routingTableEntryR{}
			}

			for _, a := range args {
				if a == obj.RoutingTableSnapshotID {
					continue Outer
				}
			}

			args = append(args, obj.RoutingTableSnapshotID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`routing_table_snapshots`),
		qm.WhereIn(`routing_table_snapshots.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RoutingTableSnapshot")
	}

	var resultSlice []*RoutingTableSnapshot
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RoutingTableSnapshot")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for routing_table_snapshots")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for routing_table_snapshots")
	}

	if len(routingTableEntryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RoutingTableSnapshot = foreign
		if foreign.R == nil {
			foreign.R = &routingTableSnapshotR{}
		}
		foreign.R.RoutingTableEntries = append(foreign.R.RoutingTableEntries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RoutingTableSnapshotID == foreign.ID {
				local.R.RoutingTableSnapshot = foreign
				if foreign.R == nil {
					foreign.R = &routingTableSnapshotR{}
				}
				foreign.R.RoutingTableEntries = append(foreign.R.RoutingTableEntries, local)
				break
			}
		}
	}

	return nil
}

// SetPeer of the routingTableEntry to the related item.
// Sets o.R.Peer to related.
// Adds o to related.R.RoutingTableEntries.
func (o *RoutingTableEntry) SetPeer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"routing_table_entries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"peer_id"}),
		strmangle.WhereClause("\"", "\"", 2, routingTableEntryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.RoutingTableSnapshotID, o.PeerID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PeerID = related.ID
	if o.R == nil {
		o.R = &routingTableEntryR{
			Peer: related,
		}
	} else {
		o.R.Peer = related
	}

	if related.R == nil {
		related.R = &peerR{
			RoutingTableEntries: RoutingTableEntrySlice{o},
		}
	} else {
		related.R.RoutingTableEntries = append(related.R.RoutingTableEntries, o)
	}

	return nil
}

// SetRoutingTableSnapshot of the routingTableEntry to the related item.
// Sets o.R.RoutingTableSnapshot to related.
// Adds o to related.R.RoutingTableEntries.
func (o *RoutingTableEntry) SetRoutingTableSnapshot(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RoutingTableSnapshot) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"routing_table_entries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"routing_table_snapshot_id"}),
		strmangle.WhereClause("\"", "\"", 2, routingTableEntryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.RoutingTableSnapshotID, o.PeerID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RoutingTableSnapshotID = related.ID
	if o.R == nil {
		o.R = &routingTableEntryR{
			RoutingTableSnapshot: related,
		}
	} else {
		o.R.RoutingTableSnapshot = related
	}

	if related.R == nil {
		related.R = &routingTableSnapshotR{
			RoutingTableEntries: RoutingTableEntrySlice{o},
		}
	} else {
		related.R.RoutingTableEntries = append(related.R.RoutingTableEntries, o)
	}

	return nil
}

// RoutingTableEntries retrieves all the records using an executor.
func RoutingTableEntries(mods ...qm.QueryMod) routingTableEntryQuery {
	mods = append(mods, qm.From("\"routing_table_entries\""))
	return routingTableEntryQuery{NewQuery(mods...)}
}

// FindRoutingTableEntry retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRoutingTableEntry(ctx context.Context, exec boil.ContextExecutor, routingTableSnapshotID int, peerID int, selectCols ...string) (*RoutingTableEntry, error) {
	routingTableEntryObj := &RoutingTableEntry{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"routing_table_entries\" where \"routing_table_snapshot_id\"=$1 AND \"peer_id\"=$2", sel,
	)

	q := queries.Raw(query, routingTableSnapshotID, peerID)

	err := q.Bind(ctx, exec, routingTableEntryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from routing_table_entries")
	}

	if err = routingTableEntryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return routingTableEntryObj, err
	}

	return routingTableEntryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RoutingTableEntry) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no routing_table_entries provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(routingTableEntryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	routingTableEntryInsertCacheMut.RLock()
	cache, cached := routingTableEntryInsertCache[key]
	routingTableEntryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			routingTableEntryAllColumns,
			routingTableEntryColumnsWithDefault,
			routingTableEntryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(routingTableEntryType, routingTableEntryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(routingTableEntryType, routingTableEntryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"routing_table_entries\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"routing_table_entries\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into routing_table_entries")
	}

	if !cached {
		routingTableEntryInsertCacheMut.Lock()
		routingTableEntryInsertCache[key] = cache
		routingTableEntryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RoutingTableEntry.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RoutingTableEntry) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	routingTableEntryUpdateCacheMut.RLock()
	cache, cached := routingTableEntryUpdateCache[key]
	routingTableEntryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			routingTableEntryAllColumns,
			routingTableEntryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update routing_table_entries, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"routing_table_entries\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, routingTableEntryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(routingTableEntryType, routingTableEntryMapping, append(wl, routingTableEntryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update routing_table_entries row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for routing_table_entries")
	}

	if !cached {
		routingTableEntryUpdateCacheMut.Lock()
		routingTableEntryUpdateCache[key] = cache
		routingTableEntryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q routingTableEntryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for routing_table_entries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for routing_table_entries")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RoutingTableEntrySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), routingTableEntryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"routing_table_entries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, routingTableEntryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in routingTableEntry slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all routingTableEntry")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RoutingTableEntry) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no routing_table_entries provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(routingTableEntryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	routingTableEntryUpsertCacheMut.RLock()
	cache, cached := routingTableEntryUpsertCache[key]
	routingTableEntryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			routingTableEntryAllColumns,
			routingTableEntryColumnsWithDefault,
			routingTableEntryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			routingTableEntryAllColumns,
			routingTableEntryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert routing_table_entries, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(routingTableEntryPrimaryKeyColumns))
			copy(conflict, routingTableEntryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"routing_table_entries\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(routingTableEntryType, routingTableEntryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(routingTableEntryType, routingTableEntryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert routing_table_entries")
	}

	if !cached {
		routingTableEntryUpsertCacheMut.Lock()
		routingTableEntryUpsertCache[key] = cache
		routingTableEntryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RoutingTableEntry record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RoutingTableEntry) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RoutingTableEntry provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), routingTableEntryPrimaryKeyMapping)
	sql := "DELETE FROM \"routing_table_entries\" WHERE \"routing_table_snapshot_id\"=$1 AND \"peer_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from routing_table_entries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for routing_table_entries")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q routingTableEntryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no routingTableEntryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from routing_table_entries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for routing_table_entries")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RoutingTableEntrySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(routingTableEntryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), routingTableEntryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"routing_table_entries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, routingTableEntryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from routingTableEntry slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for routing_table_entries")
	}

	if len(routingTableEntryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RoutingTableEntry) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRoutingTableEntry(ctx, exec, o.RoutingTableSnapshotID, o.PeerID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoutingTableEntrySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RoutingTableEntrySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), routingTableEntryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"routing_table_entries\".* FROM \"routing_table_entries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, routingTableEntryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RoutingTableEntrySlice")
	}

	*o = slice

	return nil
}

// RoutingTableEntryExists checks if the RoutingTableEntry row exists.
func RoutingTableEntryExists(ctx context.Context, exec boil.ContextExecutor, routingTableSnapshotID int, peerID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"routing_table_entries\" where \"routing_table_snapshot_id\"=$1 AND \"peer_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, routingTableSnapshotID, peerID)
	}
	row := exec.QueryRowContext(ctx, sql, routingTableSnapshotID, peerID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if routing_table_entries exists")
	}

	return exists, nil
}
