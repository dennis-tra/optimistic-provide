// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// AddProviderRPC is an object representing the database table.
type AddProviderRPC struct {
	ID              int              `boil:"id" json:"id" toml:"id" yaml:"id"`
	LocalID         int              `boil:"local_id" json:"local_id" toml:"local_id" yaml:"local_id"`
	RemoteID        int              `boil:"remote_id" json:"remote_id" toml:"remote_id" yaml:"remote_id"`
	Distance        []byte           `boil:"distance" json:"distance" toml:"distance" yaml:"distance"`
	MultiAddressIds types.Int64Array `boil:"multi_address_ids" json:"multi_address_ids" toml:"multi_address_ids" yaml:"multi_address_ids"`
	StartedAt       time.Time        `boil:"started_at" json:"started_at" toml:"started_at" yaml:"started_at"`
	EndedAt         time.Time        `boil:"ended_at" json:"ended_at" toml:"ended_at" yaml:"ended_at"`
	Error           null.String      `boil:"error" json:"error,omitempty" toml:"error" yaml:"error,omitempty"`

	R *addProviderRPCR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L addProviderRPCL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AddProviderRPCColumns = struct {
	ID              string
	LocalID         string
	RemoteID        string
	Distance        string
	MultiAddressIds string
	StartedAt       string
	EndedAt         string
	Error           string
}{
	ID:              "id",
	LocalID:         "local_id",
	RemoteID:        "remote_id",
	Distance:        "distance",
	MultiAddressIds: "multi_address_ids",
	StartedAt:       "started_at",
	EndedAt:         "ended_at",
	Error:           "error",
}

var AddProviderRPCTableColumns = struct {
	ID              string
	LocalID         string
	RemoteID        string
	Distance        string
	MultiAddressIds string
	StartedAt       string
	EndedAt         string
	Error           string
}{
	ID:              "add_provider_rpcs.id",
	LocalID:         "add_provider_rpcs.local_id",
	RemoteID:        "add_provider_rpcs.remote_id",
	Distance:        "add_provider_rpcs.distance",
	MultiAddressIds: "add_provider_rpcs.multi_address_ids",
	StartedAt:       "add_provider_rpcs.started_at",
	EndedAt:         "add_provider_rpcs.ended_at",
	Error:           "add_provider_rpcs.error",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpertypes_Int64Array struct{ field string }

func (w whereHelpertypes_Int64Array) EQ(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Int64Array) NEQ(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Int64Array) LT(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Int64Array) LTE(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Int64Array) GT(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Int64Array) GTE(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var AddProviderRPCWhere = struct {
	ID              whereHelperint
	LocalID         whereHelperint
	RemoteID        whereHelperint
	Distance        whereHelper__byte
	MultiAddressIds whereHelpertypes_Int64Array
	StartedAt       whereHelpertime_Time
	EndedAt         whereHelpertime_Time
	Error           whereHelpernull_String
}{
	ID:              whereHelperint{field: "\"add_provider_rpcs\".\"id\""},
	LocalID:         whereHelperint{field: "\"add_provider_rpcs\".\"local_id\""},
	RemoteID:        whereHelperint{field: "\"add_provider_rpcs\".\"remote_id\""},
	Distance:        whereHelper__byte{field: "\"add_provider_rpcs\".\"distance\""},
	MultiAddressIds: whereHelpertypes_Int64Array{field: "\"add_provider_rpcs\".\"multi_address_ids\""},
	StartedAt:       whereHelpertime_Time{field: "\"add_provider_rpcs\".\"started_at\""},
	EndedAt:         whereHelpertime_Time{field: "\"add_provider_rpcs\".\"ended_at\""},
	Error:           whereHelpernull_String{field: "\"add_provider_rpcs\".\"error\""},
}

// AddProviderRPCRels is where relationship names are stored.
var AddProviderRPCRels = struct {
	Local    string
	Remote   string
	Provides string
}{
	Local:    "Local",
	Remote:   "Remote",
	Provides: "Provides",
}

// addProviderRPCR is where relationships are stored.
type addProviderRPCR struct {
	Local    *Peer        `boil:"Local" json:"Local" toml:"Local" yaml:"Local"`
	Remote   *Peer        `boil:"Remote" json:"Remote" toml:"Remote" yaml:"Remote"`
	Provides ProvideSlice `boil:"Provides" json:"Provides" toml:"Provides" yaml:"Provides"`
}

// NewStruct creates a new relationship struct
func (*addProviderRPCR) NewStruct() *addProviderRPCR {
	return &addProviderRPCR{}
}

// addProviderRPCL is where Load methods for each relationship are stored.
type addProviderRPCL struct{}

var (
	addProviderRPCAllColumns            = []string{"id", "local_id", "remote_id", "distance", "multi_address_ids", "started_at", "ended_at", "error"}
	addProviderRPCColumnsWithoutDefault = []string{"local_id", "remote_id", "distance", "multi_address_ids", "started_at", "ended_at", "error"}
	addProviderRPCColumnsWithDefault    = []string{"id"}
	addProviderRPCPrimaryKeyColumns     = []string{"id"}
)

type (
	// AddProviderRPCSlice is an alias for a slice of pointers to AddProviderRPC.
	// This should almost always be used instead of []AddProviderRPC.
	AddProviderRPCSlice []*AddProviderRPC
	// AddProviderRPCHook is the signature for custom AddProviderRPC hook methods
	AddProviderRPCHook func(context.Context, boil.ContextExecutor, *AddProviderRPC) error

	addProviderRPCQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	addProviderRPCType                 = reflect.TypeOf(&AddProviderRPC{})
	addProviderRPCMapping              = queries.MakeStructMapping(addProviderRPCType)
	addProviderRPCPrimaryKeyMapping, _ = queries.BindMapping(addProviderRPCType, addProviderRPCMapping, addProviderRPCPrimaryKeyColumns)
	addProviderRPCInsertCacheMut       sync.RWMutex
	addProviderRPCInsertCache          = make(map[string]insertCache)
	addProviderRPCUpdateCacheMut       sync.RWMutex
	addProviderRPCUpdateCache          = make(map[string]updateCache)
	addProviderRPCUpsertCacheMut       sync.RWMutex
	addProviderRPCUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var addProviderRPCBeforeInsertHooks []AddProviderRPCHook
var addProviderRPCBeforeUpdateHooks []AddProviderRPCHook
var addProviderRPCBeforeDeleteHooks []AddProviderRPCHook
var addProviderRPCBeforeUpsertHooks []AddProviderRPCHook

var addProviderRPCAfterInsertHooks []AddProviderRPCHook
var addProviderRPCAfterSelectHooks []AddProviderRPCHook
var addProviderRPCAfterUpdateHooks []AddProviderRPCHook
var addProviderRPCAfterDeleteHooks []AddProviderRPCHook
var addProviderRPCAfterUpsertHooks []AddProviderRPCHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AddProviderRPC) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range addProviderRPCBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AddProviderRPC) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range addProviderRPCBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AddProviderRPC) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range addProviderRPCBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AddProviderRPC) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range addProviderRPCBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AddProviderRPC) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range addProviderRPCAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AddProviderRPC) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range addProviderRPCAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AddProviderRPC) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range addProviderRPCAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AddProviderRPC) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range addProviderRPCAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AddProviderRPC) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range addProviderRPCAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAddProviderRPCHook registers your hook function for all future operations.
func AddAddProviderRPCHook(hookPoint boil.HookPoint, addProviderRPCHook AddProviderRPCHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		addProviderRPCBeforeInsertHooks = append(addProviderRPCBeforeInsertHooks, addProviderRPCHook)
	case boil.BeforeUpdateHook:
		addProviderRPCBeforeUpdateHooks = append(addProviderRPCBeforeUpdateHooks, addProviderRPCHook)
	case boil.BeforeDeleteHook:
		addProviderRPCBeforeDeleteHooks = append(addProviderRPCBeforeDeleteHooks, addProviderRPCHook)
	case boil.BeforeUpsertHook:
		addProviderRPCBeforeUpsertHooks = append(addProviderRPCBeforeUpsertHooks, addProviderRPCHook)
	case boil.AfterInsertHook:
		addProviderRPCAfterInsertHooks = append(addProviderRPCAfterInsertHooks, addProviderRPCHook)
	case boil.AfterSelectHook:
		addProviderRPCAfterSelectHooks = append(addProviderRPCAfterSelectHooks, addProviderRPCHook)
	case boil.AfterUpdateHook:
		addProviderRPCAfterUpdateHooks = append(addProviderRPCAfterUpdateHooks, addProviderRPCHook)
	case boil.AfterDeleteHook:
		addProviderRPCAfterDeleteHooks = append(addProviderRPCAfterDeleteHooks, addProviderRPCHook)
	case boil.AfterUpsertHook:
		addProviderRPCAfterUpsertHooks = append(addProviderRPCAfterUpsertHooks, addProviderRPCHook)
	}
}

// One returns a single addProviderRPC record from the query.
func (q addProviderRPCQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AddProviderRPC, error) {
	o := &AddProviderRPC{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for add_provider_rpcs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AddProviderRPC records from the query.
func (q addProviderRPCQuery) All(ctx context.Context, exec boil.ContextExecutor) (AddProviderRPCSlice, error) {
	var o []*AddProviderRPC

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AddProviderRPC slice")
	}

	if len(addProviderRPCAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AddProviderRPC records in the query.
func (q addProviderRPCQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count add_provider_rpcs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q addProviderRPCQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if add_provider_rpcs exists")
	}

	return count > 0, nil
}

// Local pointed to by the foreign key.
func (o *AddProviderRPC) Local(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LocalID),
	}

	queryMods = append(queryMods, mods...)

	query := Peers(queryMods...)
	queries.SetFrom(query.Query, "\"peers\"")

	return query
}

// Remote pointed to by the foreign key.
func (o *AddProviderRPC) Remote(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RemoteID),
	}

	queryMods = append(queryMods, mods...)

	query := Peers(queryMods...)
	queries.SetFrom(query.Query, "\"peers\"")

	return query
}

// Provides retrieves all the provide's Provides with an executor.
func (o *AddProviderRPC) Provides(mods ...qm.QueryMod) provideQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"provides_x_add_provider_rpcs\" on \"provides\".\"id\" = \"provides_x_add_provider_rpcs\".\"provide_id\""),
		qm.Where("\"provides_x_add_provider_rpcs\".\"add_provider_rpc_id\"=?", o.ID),
	)

	query := Provides(queryMods...)
	queries.SetFrom(query.Query, "\"provides\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"provides\".*"})
	}

	return query
}

// LoadLocal allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (addProviderRPCL) LoadLocal(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAddProviderRPC interface{}, mods queries.Applicator) error {
	var slice []*AddProviderRPC
	var object *AddProviderRPC

	if singular {
		object = maybeAddProviderRPC.(*AddProviderRPC)
	} else {
		slice = *maybeAddProviderRPC.(*[]*AddProviderRPC)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &addProviderRPCR{}
		}
		args = append(args, object.LocalID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &addProviderRPCR{}
			}

			for _, a := range args {
				if a == obj.LocalID {
					continue Outer
				}
			}

			args = append(args, obj.LocalID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(addProviderRPCAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Local = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.LocalAddProviderRPCS = append(foreign.R.LocalAddProviderRPCS, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LocalID == foreign.ID {
				local.R.Local = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.LocalAddProviderRPCS = append(foreign.R.LocalAddProviderRPCS, local)
				break
			}
		}
	}

	return nil
}

// LoadRemote allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (addProviderRPCL) LoadRemote(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAddProviderRPC interface{}, mods queries.Applicator) error {
	var slice []*AddProviderRPC
	var object *AddProviderRPC

	if singular {
		object = maybeAddProviderRPC.(*AddProviderRPC)
	} else {
		slice = *maybeAddProviderRPC.(*[]*AddProviderRPC)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &addProviderRPCR{}
		}
		args = append(args, object.RemoteID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &addProviderRPCR{}
			}

			for _, a := range args {
				if a == obj.RemoteID {
					continue Outer
				}
			}

			args = append(args, obj.RemoteID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(addProviderRPCAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Remote = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.RemoteAddProviderRPCS = append(foreign.R.RemoteAddProviderRPCS, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RemoteID == foreign.ID {
				local.R.Remote = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.RemoteAddProviderRPCS = append(foreign.R.RemoteAddProviderRPCS, local)
				break
			}
		}
	}

	return nil
}

// LoadProvides allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (addProviderRPCL) LoadProvides(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAddProviderRPC interface{}, mods queries.Applicator) error {
	var slice []*AddProviderRPC
	var object *AddProviderRPC

	if singular {
		object = maybeAddProviderRPC.(*AddProviderRPC)
	} else {
		slice = *maybeAddProviderRPC.(*[]*AddProviderRPC)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &addProviderRPCR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &addProviderRPCR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"provides\".id, \"provides\".measurement_id, \"provides\".provide_type, \"provides\".provider_id, \"provides\".content_id, \"provides\".distance, \"provides\".initial_routing_table_id, \"provides\".final_routing_table_id, \"provides\".started_at, \"provides\".ended_at, \"provides\".error, \"provides\".done_at, \"provides\".updated_at, \"provides\".created_at, \"a\".\"add_provider_rpc_id\""),
		qm.From("\"provides\""),
		qm.InnerJoin("\"provides_x_add_provider_rpcs\" as \"a\" on \"provides\".\"id\" = \"a\".\"provide_id\""),
		qm.WhereIn("\"a\".\"add_provider_rpc_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load provides")
	}

	var resultSlice []*Provide

	var localJoinCols []int
	for results.Next() {
		one := new(Provide)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.MeasurementID, &one.ProvideType, &one.ProviderID, &one.ContentID, &one.Distance, &one.InitialRoutingTableID, &one.FinalRoutingTableID, &one.StartedAt, &one.EndedAt, &one.Error, &one.DoneAt, &one.UpdatedAt, &one.CreatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for provides")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice provides")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on provides")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for provides")
	}

	if len(provideAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Provides = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &provideR{}
			}
			foreign.R.AddProviderRPCS = append(foreign.R.AddProviderRPCS, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Provides = append(local.R.Provides, foreign)
				if foreign.R == nil {
					foreign.R = &provideR{}
				}
				foreign.R.AddProviderRPCS = append(foreign.R.AddProviderRPCS, local)
				break
			}
		}
	}

	return nil
}

// SetLocal of the addProviderRPC to the related item.
// Sets o.R.Local to related.
// Adds o to related.R.LocalAddProviderRPCS.
func (o *AddProviderRPC) SetLocal(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"add_provider_rpcs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"local_id"}),
		strmangle.WhereClause("\"", "\"", 2, addProviderRPCPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LocalID = related.ID
	if o.R == nil {
		o.R = &addProviderRPCR{
			Local: related,
		}
	} else {
		o.R.Local = related
	}

	if related.R == nil {
		related.R = &peerR{
			LocalAddProviderRPCS: AddProviderRPCSlice{o},
		}
	} else {
		related.R.LocalAddProviderRPCS = append(related.R.LocalAddProviderRPCS, o)
	}

	return nil
}

// SetRemote of the addProviderRPC to the related item.
// Sets o.R.Remote to related.
// Adds o to related.R.RemoteAddProviderRPCS.
func (o *AddProviderRPC) SetRemote(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"add_provider_rpcs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"remote_id"}),
		strmangle.WhereClause("\"", "\"", 2, addProviderRPCPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RemoteID = related.ID
	if o.R == nil {
		o.R = &addProviderRPCR{
			Remote: related,
		}
	} else {
		o.R.Remote = related
	}

	if related.R == nil {
		related.R = &peerR{
			RemoteAddProviderRPCS: AddProviderRPCSlice{o},
		}
	} else {
		related.R.RemoteAddProviderRPCS = append(related.R.RemoteAddProviderRPCS, o)
	}

	return nil
}

// AddProvides adds the given related objects to the existing relationships
// of the add_provider_rpc, optionally inserting them as new records.
// Appends related to o.R.Provides.
// Sets related.R.AddProviderRPCS appropriately.
func (o *AddProviderRPC) AddProvides(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Provide) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"provides_x_add_provider_rpcs\" (\"add_provider_rpc_id\", \"provide_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &addProviderRPCR{
			Provides: related,
		}
	} else {
		o.R.Provides = append(o.R.Provides, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &provideR{
				AddProviderRPCS: AddProviderRPCSlice{o},
			}
		} else {
			rel.R.AddProviderRPCS = append(rel.R.AddProviderRPCS, o)
		}
	}
	return nil
}

// SetProvides removes all previously related items of the
// add_provider_rpc replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AddProviderRPCS's Provides accordingly.
// Replaces o.R.Provides with related.
// Sets related.R.AddProviderRPCS's Provides accordingly.
func (o *AddProviderRPC) SetProvides(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Provide) error {
	query := "delete from \"provides_x_add_provider_rpcs\" where \"add_provider_rpc_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeProvidesFromAddProviderRPCSSlice(o, related)
	if o.R != nil {
		o.R.Provides = nil
	}
	return o.AddProvides(ctx, exec, insert, related...)
}

// RemoveProvides relationships from objects passed in.
// Removes related items from R.Provides (uses pointer comparison, removal does not keep order)
// Sets related.R.AddProviderRPCS.
func (o *AddProviderRPC) RemoveProvides(ctx context.Context, exec boil.ContextExecutor, related ...*Provide) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"provides_x_add_provider_rpcs\" where \"add_provider_rpc_id\" = $1 and \"provide_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeProvidesFromAddProviderRPCSSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Provides {
			if rel != ri {
				continue
			}

			ln := len(o.R.Provides)
			if ln > 1 && i < ln-1 {
				o.R.Provides[i] = o.R.Provides[ln-1]
			}
			o.R.Provides = o.R.Provides[:ln-1]
			break
		}
	}

	return nil
}

func removeProvidesFromAddProviderRPCSSlice(o *AddProviderRPC, related []*Provide) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.AddProviderRPCS {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.AddProviderRPCS)
			if ln > 1 && i < ln-1 {
				rel.R.AddProviderRPCS[i] = rel.R.AddProviderRPCS[ln-1]
			}
			rel.R.AddProviderRPCS = rel.R.AddProviderRPCS[:ln-1]
			break
		}
	}
}

// AddProviderRPCS retrieves all the records using an executor.
func AddProviderRPCS(mods ...qm.QueryMod) addProviderRPCQuery {
	mods = append(mods, qm.From("\"add_provider_rpcs\""))
	return addProviderRPCQuery{NewQuery(mods...)}
}

// FindAddProviderRPC retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAddProviderRPC(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AddProviderRPC, error) {
	addProviderRPCObj := &AddProviderRPC{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"add_provider_rpcs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, addProviderRPCObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from add_provider_rpcs")
	}

	if err = addProviderRPCObj.doAfterSelectHooks(ctx, exec); err != nil {
		return addProviderRPCObj, err
	}

	return addProviderRPCObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AddProviderRPC) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no add_provider_rpcs provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(addProviderRPCColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	addProviderRPCInsertCacheMut.RLock()
	cache, cached := addProviderRPCInsertCache[key]
	addProviderRPCInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			addProviderRPCAllColumns,
			addProviderRPCColumnsWithDefault,
			addProviderRPCColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(addProviderRPCType, addProviderRPCMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(addProviderRPCType, addProviderRPCMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"add_provider_rpcs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"add_provider_rpcs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into add_provider_rpcs")
	}

	if !cached {
		addProviderRPCInsertCacheMut.Lock()
		addProviderRPCInsertCache[key] = cache
		addProviderRPCInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AddProviderRPC.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AddProviderRPC) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	addProviderRPCUpdateCacheMut.RLock()
	cache, cached := addProviderRPCUpdateCache[key]
	addProviderRPCUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			addProviderRPCAllColumns,
			addProviderRPCPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update add_provider_rpcs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"add_provider_rpcs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, addProviderRPCPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(addProviderRPCType, addProviderRPCMapping, append(wl, addProviderRPCPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update add_provider_rpcs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for add_provider_rpcs")
	}

	if !cached {
		addProviderRPCUpdateCacheMut.Lock()
		addProviderRPCUpdateCache[key] = cache
		addProviderRPCUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q addProviderRPCQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for add_provider_rpcs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for add_provider_rpcs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AddProviderRPCSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), addProviderRPCPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"add_provider_rpcs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, addProviderRPCPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in addProviderRPC slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all addProviderRPC")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AddProviderRPC) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no add_provider_rpcs provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(addProviderRPCColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	addProviderRPCUpsertCacheMut.RLock()
	cache, cached := addProviderRPCUpsertCache[key]
	addProviderRPCUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			addProviderRPCAllColumns,
			addProviderRPCColumnsWithDefault,
			addProviderRPCColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			addProviderRPCAllColumns,
			addProviderRPCPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert add_provider_rpcs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(addProviderRPCPrimaryKeyColumns))
			copy(conflict, addProviderRPCPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"add_provider_rpcs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(addProviderRPCType, addProviderRPCMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(addProviderRPCType, addProviderRPCMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert add_provider_rpcs")
	}

	if !cached {
		addProviderRPCUpsertCacheMut.Lock()
		addProviderRPCUpsertCache[key] = cache
		addProviderRPCUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AddProviderRPC record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AddProviderRPC) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AddProviderRPC provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), addProviderRPCPrimaryKeyMapping)
	sql := "DELETE FROM \"add_provider_rpcs\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from add_provider_rpcs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for add_provider_rpcs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q addProviderRPCQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no addProviderRPCQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from add_provider_rpcs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for add_provider_rpcs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AddProviderRPCSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(addProviderRPCBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), addProviderRPCPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"add_provider_rpcs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, addProviderRPCPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from addProviderRPC slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for add_provider_rpcs")
	}

	if len(addProviderRPCAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AddProviderRPC) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAddProviderRPC(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AddProviderRPCSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AddProviderRPCSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), addProviderRPCPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"add_provider_rpcs\".* FROM \"add_provider_rpcs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, addProviderRPCPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AddProviderRPCSlice")
	}

	*o = slice

	return nil
}

// AddProviderRPCExists checks if the AddProviderRPC row exists.
func AddProviderRPCExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"add_provider_rpcs\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if add_provider_rpcs exists")
	}

	return exists, nil
}
