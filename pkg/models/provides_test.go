// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProvides(t *testing.T) {
	t.Parallel()

	query := Provides()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testProvidesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Provide{}
	if err = randomize.Struct(seed, o, provideDBTypes, true, provideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Provide struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Provides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProvidesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Provide{}
	if err = randomize.Struct(seed, o, provideDBTypes, true, provideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Provide struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Provides().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Provides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProvidesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Provide{}
	if err = randomize.Struct(seed, o, provideDBTypes, true, provideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Provide struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProvideSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Provides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProvidesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Provide{}
	if err = randomize.Struct(seed, o, provideDBTypes, true, provideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Provide struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ProvideExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Provide exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ProvideExists to return true, but got false.")
	}
}

func testProvidesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Provide{}
	if err = randomize.Struct(seed, o, provideDBTypes, true, provideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Provide struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	provideFound, err := FindProvide(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if provideFound == nil {
		t.Error("want a record, got nil")
	}
}

func testProvidesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Provide{}
	if err = randomize.Struct(seed, o, provideDBTypes, true, provideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Provide struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Provides().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testProvidesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Provide{}
	if err = randomize.Struct(seed, o, provideDBTypes, true, provideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Provide struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Provides().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testProvidesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	provideOne := &Provide{}
	provideTwo := &Provide{}
	if err = randomize.Struct(seed, provideOne, provideDBTypes, false, provideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Provide struct: %s", err)
	}
	if err = randomize.Struct(seed, provideTwo, provideDBTypes, false, provideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Provide struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = provideOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = provideTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Provides().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testProvidesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	provideOne := &Provide{}
	provideTwo := &Provide{}
	if err = randomize.Struct(seed, provideOne, provideDBTypes, false, provideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Provide struct: %s", err)
	}
	if err = randomize.Struct(seed, provideTwo, provideDBTypes, false, provideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Provide struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = provideOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = provideTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Provides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func provideBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Provide) error {
	*o = Provide{}
	return nil
}

func provideAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Provide) error {
	*o = Provide{}
	return nil
}

func provideAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Provide) error {
	*o = Provide{}
	return nil
}

func provideBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Provide) error {
	*o = Provide{}
	return nil
}

func provideAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Provide) error {
	*o = Provide{}
	return nil
}

func provideBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Provide) error {
	*o = Provide{}
	return nil
}

func provideAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Provide) error {
	*o = Provide{}
	return nil
}

func provideBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Provide) error {
	*o = Provide{}
	return nil
}

func provideAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Provide) error {
	*o = Provide{}
	return nil
}

func testProvidesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Provide{}
	o := &Provide{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, provideDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Provide object: %s", err)
	}

	AddProvideHook(boil.BeforeInsertHook, provideBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	provideBeforeInsertHooks = []ProvideHook{}

	AddProvideHook(boil.AfterInsertHook, provideAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	provideAfterInsertHooks = []ProvideHook{}

	AddProvideHook(boil.AfterSelectHook, provideAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	provideAfterSelectHooks = []ProvideHook{}

	AddProvideHook(boil.BeforeUpdateHook, provideBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	provideBeforeUpdateHooks = []ProvideHook{}

	AddProvideHook(boil.AfterUpdateHook, provideAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	provideAfterUpdateHooks = []ProvideHook{}

	AddProvideHook(boil.BeforeDeleteHook, provideBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	provideBeforeDeleteHooks = []ProvideHook{}

	AddProvideHook(boil.AfterDeleteHook, provideAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	provideAfterDeleteHooks = []ProvideHook{}

	AddProvideHook(boil.BeforeUpsertHook, provideBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	provideBeforeUpsertHooks = []ProvideHook{}

	AddProvideHook(boil.AfterUpsertHook, provideAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	provideAfterUpsertHooks = []ProvideHook{}
}

func testProvidesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Provide{}
	if err = randomize.Struct(seed, o, provideDBTypes, true, provideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Provide struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Provides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProvidesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Provide{}
	if err = randomize.Struct(seed, o, provideDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Provide struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(provideColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Provides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProvideToManyAddProviderRPCS(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Provide
	var b, c AddProviderRPC

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, provideDBTypes, true, provideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Provide struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, addProviderRPCDBTypes, false, addProviderRPCColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, addProviderRPCDBTypes, false, addProviderRPCColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"provides_x_add_provider_rpcs\" (\"provide_id\", \"add_provider_rpc_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"provides_x_add_provider_rpcs\" (\"provide_id\", \"add_provider_rpc_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.AddProviderRPCS().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProvideSlice{&a}
	if err = a.L.LoadAddProviderRPCS(ctx, tx, false, (*[]*Provide)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AddProviderRPCS); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AddProviderRPCS = nil
	if err = a.L.LoadAddProviderRPCS(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AddProviderRPCS); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProvideToManyConnections(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Provide
	var b, c Connection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, provideDBTypes, true, provideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Provide struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, connectionDBTypes, false, connectionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, connectionDBTypes, false, connectionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"provides_x_connections\" (\"provide_id\", \"connection_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"provides_x_connections\" (\"provide_id\", \"connection_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.Connections().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProvideSlice{&a}
	if err = a.L.LoadConnections(ctx, tx, false, (*[]*Provide)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Connections); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Connections = nil
	if err = a.L.LoadConnections(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Connections); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProvideToManyDials(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Provide
	var b, c Dial

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, provideDBTypes, true, provideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Provide struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dialDBTypes, false, dialColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dialDBTypes, false, dialColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"provides_x_dials\" (\"provide_id\", \"dial_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"provides_x_dials\" (\"provide_id\", \"dial_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.Dials().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProvideSlice{&a}
	if err = a.L.LoadDials(ctx, tx, false, (*[]*Provide)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Dials); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Dials = nil
	if err = a.L.LoadDials(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Dials); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProvideToManyFindNodesRPCS(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Provide
	var b, c FindNodesRPC

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, provideDBTypes, true, provideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Provide struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, findNodesRPCDBTypes, false, findNodesRPCColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, findNodesRPCDBTypes, false, findNodesRPCColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"provides_x_find_nodes_rpcs\" (\"provide_id\", \"find_nodes_rpc_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"provides_x_find_nodes_rpcs\" (\"provide_id\", \"find_nodes_rpc_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.FindNodesRPCS().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProvideSlice{&a}
	if err = a.L.LoadFindNodesRPCS(ctx, tx, false, (*[]*Provide)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FindNodesRPCS); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FindNodesRPCS = nil
	if err = a.L.LoadFindNodesRPCS(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FindNodesRPCS); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProvideToManyPeerStates(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Provide
	var b, c PeerState

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, provideDBTypes, true, provideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Provide struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, peerStateDBTypes, false, peerStateColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, peerStateDBTypes, false, peerStateColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"provides_x_peer_states\" (\"provide_id\", \"peer_state_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"provides_x_peer_states\" (\"provide_id\", \"peer_state_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.PeerStates().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProvideSlice{&a}
	if err = a.L.LoadPeerStates(ctx, tx, false, (*[]*Provide)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PeerStates); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PeerStates = nil
	if err = a.L.LoadPeerStates(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PeerStates); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProvideToManyAddOpAddProviderRPCS(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Provide
	var b, c, d, e AddProviderRPC

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, provideDBTypes, false, strmangle.SetComplement(providePrimaryKeyColumns, provideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AddProviderRPC{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, addProviderRPCDBTypes, false, strmangle.SetComplement(addProviderRPCPrimaryKeyColumns, addProviderRPCColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AddProviderRPC{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAddProviderRPCS(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Provides[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Provides[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.AddProviderRPCS[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AddProviderRPCS[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AddProviderRPCS().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProvideToManySetOpAddProviderRPCS(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Provide
	var b, c, d, e AddProviderRPC

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, provideDBTypes, false, strmangle.SetComplement(providePrimaryKeyColumns, provideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AddProviderRPC{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, addProviderRPCDBTypes, false, strmangle.SetComplement(addProviderRPCPrimaryKeyColumns, addProviderRPCColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetAddProviderRPCS(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AddProviderRPCS().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetAddProviderRPCS(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AddProviderRPCS().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Provides) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Provides) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Provides[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Provides[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.AddProviderRPCS[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.AddProviderRPCS[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProvideToManyRemoveOpAddProviderRPCS(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Provide
	var b, c, d, e AddProviderRPC

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, provideDBTypes, false, strmangle.SetComplement(providePrimaryKeyColumns, provideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AddProviderRPC{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, addProviderRPCDBTypes, false, strmangle.SetComplement(addProviderRPCPrimaryKeyColumns, addProviderRPCColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddAddProviderRPCS(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AddProviderRPCS().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveAddProviderRPCS(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AddProviderRPCS().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Provides) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Provides) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Provides[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Provides[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.AddProviderRPCS) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.AddProviderRPCS[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.AddProviderRPCS[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProvideToManyAddOpConnections(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Provide
	var b, c, d, e Connection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, provideDBTypes, false, strmangle.SetComplement(providePrimaryKeyColumns, provideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Connection{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, connectionDBTypes, false, strmangle.SetComplement(connectionPrimaryKeyColumns, connectionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Connection{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddConnections(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Provides[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Provides[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Connections[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Connections[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Connections().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProvideToManySetOpConnections(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Provide
	var b, c, d, e Connection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, provideDBTypes, false, strmangle.SetComplement(providePrimaryKeyColumns, provideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Connection{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, connectionDBTypes, false, strmangle.SetComplement(connectionPrimaryKeyColumns, connectionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetConnections(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Connections().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetConnections(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Connections().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Provides) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Provides) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Provides[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Provides[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Connections[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Connections[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProvideToManyRemoveOpConnections(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Provide
	var b, c, d, e Connection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, provideDBTypes, false, strmangle.SetComplement(providePrimaryKeyColumns, provideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Connection{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, connectionDBTypes, false, strmangle.SetComplement(connectionPrimaryKeyColumns, connectionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddConnections(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Connections().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveConnections(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Connections().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Provides) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Provides) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Provides[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Provides[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Connections) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Connections[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Connections[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProvideToManyAddOpDials(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Provide
	var b, c, d, e Dial

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, provideDBTypes, false, strmangle.SetComplement(providePrimaryKeyColumns, provideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Dial{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dialDBTypes, false, strmangle.SetComplement(dialPrimaryKeyColumns, dialColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Dial{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDials(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Provides[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Provides[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Dials[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Dials[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Dials().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProvideToManySetOpDials(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Provide
	var b, c, d, e Dial

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, provideDBTypes, false, strmangle.SetComplement(providePrimaryKeyColumns, provideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Dial{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dialDBTypes, false, strmangle.SetComplement(dialPrimaryKeyColumns, dialColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetDials(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Dials().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetDials(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Dials().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Provides) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Provides) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Provides[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Provides[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Dials[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Dials[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProvideToManyRemoveOpDials(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Provide
	var b, c, d, e Dial

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, provideDBTypes, false, strmangle.SetComplement(providePrimaryKeyColumns, provideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Dial{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dialDBTypes, false, strmangle.SetComplement(dialPrimaryKeyColumns, dialColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddDials(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Dials().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveDials(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Dials().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Provides) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Provides) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Provides[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Provides[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Dials) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Dials[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Dials[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProvideToManyAddOpFindNodesRPCS(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Provide
	var b, c, d, e FindNodesRPC

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, provideDBTypes, false, strmangle.SetComplement(providePrimaryKeyColumns, provideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*FindNodesRPC{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, findNodesRPCDBTypes, false, strmangle.SetComplement(findNodesRPCPrimaryKeyColumns, findNodesRPCColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*FindNodesRPC{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFindNodesRPCS(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Provides[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Provides[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.FindNodesRPCS[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FindNodesRPCS[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FindNodesRPCS().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProvideToManySetOpFindNodesRPCS(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Provide
	var b, c, d, e FindNodesRPC

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, provideDBTypes, false, strmangle.SetComplement(providePrimaryKeyColumns, provideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*FindNodesRPC{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, findNodesRPCDBTypes, false, strmangle.SetComplement(findNodesRPCPrimaryKeyColumns, findNodesRPCColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetFindNodesRPCS(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FindNodesRPCS().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetFindNodesRPCS(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FindNodesRPCS().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Provides) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Provides) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Provides[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Provides[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.FindNodesRPCS[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.FindNodesRPCS[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProvideToManyRemoveOpFindNodesRPCS(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Provide
	var b, c, d, e FindNodesRPC

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, provideDBTypes, false, strmangle.SetComplement(providePrimaryKeyColumns, provideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*FindNodesRPC{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, findNodesRPCDBTypes, false, strmangle.SetComplement(findNodesRPCPrimaryKeyColumns, findNodesRPCColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddFindNodesRPCS(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FindNodesRPCS().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveFindNodesRPCS(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FindNodesRPCS().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Provides) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Provides) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Provides[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Provides[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.FindNodesRPCS) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.FindNodesRPCS[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.FindNodesRPCS[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProvideToManyAddOpPeerStates(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Provide
	var b, c, d, e PeerState

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, provideDBTypes, false, strmangle.SetComplement(providePrimaryKeyColumns, provideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PeerState{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, peerStateDBTypes, false, strmangle.SetComplement(peerStatePrimaryKeyColumns, peerStateColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PeerState{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPeerStates(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Provides[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Provides[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.PeerStates[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PeerStates[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PeerStates().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProvideToManySetOpPeerStates(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Provide
	var b, c, d, e PeerState

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, provideDBTypes, false, strmangle.SetComplement(providePrimaryKeyColumns, provideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PeerState{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, peerStateDBTypes, false, strmangle.SetComplement(peerStatePrimaryKeyColumns, peerStateColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetPeerStates(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PeerStates().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPeerStates(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PeerStates().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Provides) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Provides) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Provides[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Provides[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.PeerStates[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.PeerStates[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProvideToManyRemoveOpPeerStates(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Provide
	var b, c, d, e PeerState

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, provideDBTypes, false, strmangle.SetComplement(providePrimaryKeyColumns, provideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PeerState{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, peerStateDBTypes, false, strmangle.SetComplement(peerStatePrimaryKeyColumns, peerStateColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddPeerStates(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PeerStates().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePeerStates(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PeerStates().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Provides) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Provides) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Provides[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Provides[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.PeerStates) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.PeerStates[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.PeerStates[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProvideToOneRoutingTableSnapshotUsingFinalRoutingTable(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Provide
	var foreign RoutingTableSnapshot

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, provideDBTypes, true, provideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Provide struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, routingTableSnapshotDBTypes, false, routingTableSnapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoutingTableSnapshot struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.FinalRoutingTableID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.FinalRoutingTable().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ProvideSlice{&local}
	if err = local.L.LoadFinalRoutingTable(ctx, tx, false, (*[]*Provide)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FinalRoutingTable == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.FinalRoutingTable = nil
	if err = local.L.LoadFinalRoutingTable(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FinalRoutingTable == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProvideToOneRoutingTableSnapshotUsingInitialRoutingTable(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Provide
	var foreign RoutingTableSnapshot

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, provideDBTypes, false, provideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Provide struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, routingTableSnapshotDBTypes, false, routingTableSnapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoutingTableSnapshot struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.InitialRoutingTableID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.InitialRoutingTable().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ProvideSlice{&local}
	if err = local.L.LoadInitialRoutingTable(ctx, tx, false, (*[]*Provide)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.InitialRoutingTable == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.InitialRoutingTable = nil
	if err = local.L.LoadInitialRoutingTable(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.InitialRoutingTable == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProvideToOnePeerUsingProvider(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Provide
	var foreign Peer

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, provideDBTypes, false, provideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Provide struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, peerDBTypes, false, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProviderID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Provider().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ProvideSlice{&local}
	if err = local.L.LoadProvider(ctx, tx, false, (*[]*Provide)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Provider == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Provider = nil
	if err = local.L.LoadProvider(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Provider == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProvideToOneSetOpRoutingTableSnapshotUsingFinalRoutingTable(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Provide
	var b, c RoutingTableSnapshot

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, provideDBTypes, false, strmangle.SetComplement(providePrimaryKeyColumns, provideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, routingTableSnapshotDBTypes, false, strmangle.SetComplement(routingTableSnapshotPrimaryKeyColumns, routingTableSnapshotColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, routingTableSnapshotDBTypes, false, strmangle.SetComplement(routingTableSnapshotPrimaryKeyColumns, routingTableSnapshotColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RoutingTableSnapshot{&b, &c} {
		err = a.SetFinalRoutingTable(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.FinalRoutingTable != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FinalRoutingTableProvides[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.FinalRoutingTableID, x.ID) {
			t.Error("foreign key was wrong value", a.FinalRoutingTableID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FinalRoutingTableID))
		reflect.Indirect(reflect.ValueOf(&a.FinalRoutingTableID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.FinalRoutingTableID, x.ID) {
			t.Error("foreign key was wrong value", a.FinalRoutingTableID, x.ID)
		}
	}
}

func testProvideToOneRemoveOpRoutingTableSnapshotUsingFinalRoutingTable(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Provide
	var b RoutingTableSnapshot

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, provideDBTypes, false, strmangle.SetComplement(providePrimaryKeyColumns, provideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, routingTableSnapshotDBTypes, false, strmangle.SetComplement(routingTableSnapshotPrimaryKeyColumns, routingTableSnapshotColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetFinalRoutingTable(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveFinalRoutingTable(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.FinalRoutingTable().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.FinalRoutingTable != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.FinalRoutingTableID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.FinalRoutingTableProvides) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testProvideToOneSetOpRoutingTableSnapshotUsingInitialRoutingTable(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Provide
	var b, c RoutingTableSnapshot

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, provideDBTypes, false, strmangle.SetComplement(providePrimaryKeyColumns, provideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, routingTableSnapshotDBTypes, false, strmangle.SetComplement(routingTableSnapshotPrimaryKeyColumns, routingTableSnapshotColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, routingTableSnapshotDBTypes, false, strmangle.SetComplement(routingTableSnapshotPrimaryKeyColumns, routingTableSnapshotColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RoutingTableSnapshot{&b, &c} {
		err = a.SetInitialRoutingTable(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.InitialRoutingTable != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.InitialRoutingTableProvides[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.InitialRoutingTableID != x.ID {
			t.Error("foreign key was wrong value", a.InitialRoutingTableID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.InitialRoutingTableID))
		reflect.Indirect(reflect.ValueOf(&a.InitialRoutingTableID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.InitialRoutingTableID != x.ID {
			t.Error("foreign key was wrong value", a.InitialRoutingTableID, x.ID)
		}
	}
}
func testProvideToOneSetOpPeerUsingProvider(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Provide
	var b, c Peer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, provideDBTypes, false, strmangle.SetComplement(providePrimaryKeyColumns, provideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, peerDBTypes, false, strmangle.SetComplement(peerPrimaryKeyColumns, peerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, peerDBTypes, false, strmangle.SetComplement(peerPrimaryKeyColumns, peerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Peer{&b, &c} {
		err = a.SetProvider(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Provider != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProviderProvides[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProviderID != x.ID {
			t.Error("foreign key was wrong value", a.ProviderID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProviderID))
		reflect.Indirect(reflect.ValueOf(&a.ProviderID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ProviderID != x.ID {
			t.Error("foreign key was wrong value", a.ProviderID, x.ID)
		}
	}
}

func testProvidesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Provide{}
	if err = randomize.Struct(seed, o, provideDBTypes, true, provideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Provide struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProvidesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Provide{}
	if err = randomize.Struct(seed, o, provideDBTypes, true, provideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Provide struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProvideSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProvidesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Provide{}
	if err = randomize.Struct(seed, o, provideDBTypes, true, provideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Provide struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Provides().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	provideDBTypes = map[string]string{`ID`: `integer`, `ProvideType`: `enum.provide_type('SINGLE_QUERY','MULTI_QUERY')`, `ProviderID`: `integer`, `ContentID`: `text`, `Distance`: `bytea`, `InitialRoutingTableID`: `integer`, `FinalRoutingTableID`: `integer`, `StartedAt`: `timestamp with time zone`, `EndedAt`: `timestamp with time zone`, `Error`: `text`, `DoneAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `CreatedAt`: `timestamp with time zone`}
	_              = bytes.MinRead
)

func testProvidesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(providePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(provideAllColumns) == len(providePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Provide{}
	if err = randomize.Struct(seed, o, provideDBTypes, true, provideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Provide struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Provides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, provideDBTypes, true, providePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Provide struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testProvidesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(provideAllColumns) == len(providePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Provide{}
	if err = randomize.Struct(seed, o, provideDBTypes, true, provideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Provide struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Provides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, provideDBTypes, true, providePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Provide struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(provideAllColumns, providePrimaryKeyColumns) {
		fields = provideAllColumns
	} else {
		fields = strmangle.SetComplement(
			provideAllColumns,
			providePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ProvideSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testProvidesUpsert(t *testing.T) {
	t.Parallel()

	if len(provideAllColumns) == len(providePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Provide{}
	if err = randomize.Struct(seed, &o, provideDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Provide struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Provide: %s", err)
	}

	count, err := Provides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, provideDBTypes, false, providePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Provide struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Provide: %s", err)
	}

	count, err = Provides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
