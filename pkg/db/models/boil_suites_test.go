// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Dials", testDials)
	t.Run("IPAddresses", testIPAddresses)
	t.Run("MultiAddresses", testMultiAddresses)
	t.Run("PeerLogs", testPeerLogs)
	t.Run("Peers", testPeers)
	t.Run("Provides", testProvides)
	t.Run("RoutingTableEntries", testRoutingTableEntries)
	t.Run("RoutingTableSnapshots", testRoutingTableSnapshots)
}

func TestDelete(t *testing.T) {
	t.Run("Dials", testDialsDelete)
	t.Run("IPAddresses", testIPAddressesDelete)
	t.Run("MultiAddresses", testMultiAddressesDelete)
	t.Run("PeerLogs", testPeerLogsDelete)
	t.Run("Peers", testPeersDelete)
	t.Run("Provides", testProvidesDelete)
	t.Run("RoutingTableEntries", testRoutingTableEntriesDelete)
	t.Run("RoutingTableSnapshots", testRoutingTableSnapshotsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Dials", testDialsQueryDeleteAll)
	t.Run("IPAddresses", testIPAddressesQueryDeleteAll)
	t.Run("MultiAddresses", testMultiAddressesQueryDeleteAll)
	t.Run("PeerLogs", testPeerLogsQueryDeleteAll)
	t.Run("Peers", testPeersQueryDeleteAll)
	t.Run("Provides", testProvidesQueryDeleteAll)
	t.Run("RoutingTableEntries", testRoutingTableEntriesQueryDeleteAll)
	t.Run("RoutingTableSnapshots", testRoutingTableSnapshotsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Dials", testDialsSliceDeleteAll)
	t.Run("IPAddresses", testIPAddressesSliceDeleteAll)
	t.Run("MultiAddresses", testMultiAddressesSliceDeleteAll)
	t.Run("PeerLogs", testPeerLogsSliceDeleteAll)
	t.Run("Peers", testPeersSliceDeleteAll)
	t.Run("Provides", testProvidesSliceDeleteAll)
	t.Run("RoutingTableEntries", testRoutingTableEntriesSliceDeleteAll)
	t.Run("RoutingTableSnapshots", testRoutingTableSnapshotsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Dials", testDialsExists)
	t.Run("IPAddresses", testIPAddressesExists)
	t.Run("MultiAddresses", testMultiAddressesExists)
	t.Run("PeerLogs", testPeerLogsExists)
	t.Run("Peers", testPeersExists)
	t.Run("Provides", testProvidesExists)
	t.Run("RoutingTableEntries", testRoutingTableEntriesExists)
	t.Run("RoutingTableSnapshots", testRoutingTableSnapshotsExists)
}

func TestFind(t *testing.T) {
	t.Run("Dials", testDialsFind)
	t.Run("IPAddresses", testIPAddressesFind)
	t.Run("MultiAddresses", testMultiAddressesFind)
	t.Run("PeerLogs", testPeerLogsFind)
	t.Run("Peers", testPeersFind)
	t.Run("Provides", testProvidesFind)
	t.Run("RoutingTableEntries", testRoutingTableEntriesFind)
	t.Run("RoutingTableSnapshots", testRoutingTableSnapshotsFind)
}

func TestBind(t *testing.T) {
	t.Run("Dials", testDialsBind)
	t.Run("IPAddresses", testIPAddressesBind)
	t.Run("MultiAddresses", testMultiAddressesBind)
	t.Run("PeerLogs", testPeerLogsBind)
	t.Run("Peers", testPeersBind)
	t.Run("Provides", testProvidesBind)
	t.Run("RoutingTableEntries", testRoutingTableEntriesBind)
	t.Run("RoutingTableSnapshots", testRoutingTableSnapshotsBind)
}

func TestOne(t *testing.T) {
	t.Run("Dials", testDialsOne)
	t.Run("IPAddresses", testIPAddressesOne)
	t.Run("MultiAddresses", testMultiAddressesOne)
	t.Run("PeerLogs", testPeerLogsOne)
	t.Run("Peers", testPeersOne)
	t.Run("Provides", testProvidesOne)
	t.Run("RoutingTableEntries", testRoutingTableEntriesOne)
	t.Run("RoutingTableSnapshots", testRoutingTableSnapshotsOne)
}

func TestAll(t *testing.T) {
	t.Run("Dials", testDialsAll)
	t.Run("IPAddresses", testIPAddressesAll)
	t.Run("MultiAddresses", testMultiAddressesAll)
	t.Run("PeerLogs", testPeerLogsAll)
	t.Run("Peers", testPeersAll)
	t.Run("Provides", testProvidesAll)
	t.Run("RoutingTableEntries", testRoutingTableEntriesAll)
	t.Run("RoutingTableSnapshots", testRoutingTableSnapshotsAll)
}

func TestCount(t *testing.T) {
	t.Run("Dials", testDialsCount)
	t.Run("IPAddresses", testIPAddressesCount)
	t.Run("MultiAddresses", testMultiAddressesCount)
	t.Run("PeerLogs", testPeerLogsCount)
	t.Run("Peers", testPeersCount)
	t.Run("Provides", testProvidesCount)
	t.Run("RoutingTableEntries", testRoutingTableEntriesCount)
	t.Run("RoutingTableSnapshots", testRoutingTableSnapshotsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Dials", testDialsHooks)
	t.Run("IPAddresses", testIPAddressesHooks)
	t.Run("MultiAddresses", testMultiAddressesHooks)
	t.Run("PeerLogs", testPeerLogsHooks)
	t.Run("Peers", testPeersHooks)
	t.Run("Provides", testProvidesHooks)
	t.Run("RoutingTableEntries", testRoutingTableEntriesHooks)
	t.Run("RoutingTableSnapshots", testRoutingTableSnapshotsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Dials", testDialsInsert)
	t.Run("Dials", testDialsInsertWhitelist)
	t.Run("IPAddresses", testIPAddressesInsert)
	t.Run("IPAddresses", testIPAddressesInsertWhitelist)
	t.Run("MultiAddresses", testMultiAddressesInsert)
	t.Run("MultiAddresses", testMultiAddressesInsertWhitelist)
	t.Run("PeerLogs", testPeerLogsInsert)
	t.Run("PeerLogs", testPeerLogsInsertWhitelist)
	t.Run("Peers", testPeersInsert)
	t.Run("Peers", testPeersInsertWhitelist)
	t.Run("Provides", testProvidesInsert)
	t.Run("Provides", testProvidesInsertWhitelist)
	t.Run("RoutingTableEntries", testRoutingTableEntriesInsert)
	t.Run("RoutingTableEntries", testRoutingTableEntriesInsertWhitelist)
	t.Run("RoutingTableSnapshots", testRoutingTableSnapshotsInsert)
	t.Run("RoutingTableSnapshots", testRoutingTableSnapshotsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("DialToPeerUsingLocal", testDialToOnePeerUsingLocal)
	t.Run("DialToMultiAddressUsingMultiAddress", testDialToOneMultiAddressUsingMultiAddress)
	t.Run("DialToProvideUsingProvide", testDialToOneProvideUsingProvide)
	t.Run("DialToPeerUsingRemote", testDialToOnePeerUsingRemote)
	t.Run("PeerLogToPeerUsingPeer", testPeerLogToOnePeerUsingPeer)
	t.Run("ProvideToPeerUsingProvider", testProvideToOnePeerUsingProvider)
	t.Run("RoutingTableEntryToPeerUsingPeer", testRoutingTableEntryToOnePeerUsingPeer)
	t.Run("RoutingTableEntryToRoutingTableSnapshotUsingRoutingTableSnapshot", testRoutingTableEntryToOneRoutingTableSnapshotUsingRoutingTableSnapshot)
	t.Run("RoutingTableSnapshotToPeerUsingPeer", testRoutingTableSnapshotToOnePeerUsingPeer)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("IPAddressToMultiAddresses", testIPAddressToManyMultiAddresses)
	t.Run("MultiAddressToDials", testMultiAddressToManyDials)
	t.Run("MultiAddressToIPAddresses", testMultiAddressToManyIPAddresses)
	t.Run("PeerToLocalDials", testPeerToManyLocalDials)
	t.Run("PeerToRemoteDials", testPeerToManyRemoteDials)
	t.Run("PeerToPeerLogs", testPeerToManyPeerLogs)
	t.Run("PeerToProviderProvides", testPeerToManyProviderProvides)
	t.Run("PeerToRoutingTableEntries", testPeerToManyRoutingTableEntries)
	t.Run("PeerToRoutingTableSnapshots", testPeerToManyRoutingTableSnapshots)
	t.Run("ProvideToDials", testProvideToManyDials)
	t.Run("RoutingTableSnapshotToRoutingTableEntries", testRoutingTableSnapshotToManyRoutingTableEntries)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("DialToPeerUsingLocalDials", testDialToOneSetOpPeerUsingLocal)
	t.Run("DialToMultiAddressUsingDials", testDialToOneSetOpMultiAddressUsingMultiAddress)
	t.Run("DialToProvideUsingDials", testDialToOneSetOpProvideUsingProvide)
	t.Run("DialToPeerUsingRemoteDials", testDialToOneSetOpPeerUsingRemote)
	t.Run("PeerLogToPeerUsingPeerLogs", testPeerLogToOneSetOpPeerUsingPeer)
	t.Run("ProvideToPeerUsingProviderProvides", testProvideToOneSetOpPeerUsingProvider)
	t.Run("RoutingTableEntryToPeerUsingRoutingTableEntries", testRoutingTableEntryToOneSetOpPeerUsingPeer)
	t.Run("RoutingTableEntryToRoutingTableSnapshotUsingRoutingTableEntries", testRoutingTableEntryToOneSetOpRoutingTableSnapshotUsingRoutingTableSnapshot)
	t.Run("RoutingTableSnapshotToPeerUsingRoutingTableSnapshots", testRoutingTableSnapshotToOneSetOpPeerUsingPeer)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("IPAddressToMultiAddresses", testIPAddressToManyAddOpMultiAddresses)
	t.Run("MultiAddressToDials", testMultiAddressToManyAddOpDials)
	t.Run("MultiAddressToIPAddresses", testMultiAddressToManyAddOpIPAddresses)
	t.Run("PeerToLocalDials", testPeerToManyAddOpLocalDials)
	t.Run("PeerToRemoteDials", testPeerToManyAddOpRemoteDials)
	t.Run("PeerToPeerLogs", testPeerToManyAddOpPeerLogs)
	t.Run("PeerToProviderProvides", testPeerToManyAddOpProviderProvides)
	t.Run("PeerToRoutingTableEntries", testPeerToManyAddOpRoutingTableEntries)
	t.Run("PeerToRoutingTableSnapshots", testPeerToManyAddOpRoutingTableSnapshots)
	t.Run("ProvideToDials", testProvideToManyAddOpDials)
	t.Run("RoutingTableSnapshotToRoutingTableEntries", testRoutingTableSnapshotToManyAddOpRoutingTableEntries)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("IPAddressToMultiAddresses", testIPAddressToManySetOpMultiAddresses)
	t.Run("MultiAddressToIPAddresses", testMultiAddressToManySetOpIPAddresses)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("IPAddressToMultiAddresses", testIPAddressToManyRemoveOpMultiAddresses)
	t.Run("MultiAddressToIPAddresses", testMultiAddressToManyRemoveOpIPAddresses)
}

func TestReload(t *testing.T) {
	t.Run("Dials", testDialsReload)
	t.Run("IPAddresses", testIPAddressesReload)
	t.Run("MultiAddresses", testMultiAddressesReload)
	t.Run("PeerLogs", testPeerLogsReload)
	t.Run("Peers", testPeersReload)
	t.Run("Provides", testProvidesReload)
	t.Run("RoutingTableEntries", testRoutingTableEntriesReload)
	t.Run("RoutingTableSnapshots", testRoutingTableSnapshotsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Dials", testDialsReloadAll)
	t.Run("IPAddresses", testIPAddressesReloadAll)
	t.Run("MultiAddresses", testMultiAddressesReloadAll)
	t.Run("PeerLogs", testPeerLogsReloadAll)
	t.Run("Peers", testPeersReloadAll)
	t.Run("Provides", testProvidesReloadAll)
	t.Run("RoutingTableEntries", testRoutingTableEntriesReloadAll)
	t.Run("RoutingTableSnapshots", testRoutingTableSnapshotsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Dials", testDialsSelect)
	t.Run("IPAddresses", testIPAddressesSelect)
	t.Run("MultiAddresses", testMultiAddressesSelect)
	t.Run("PeerLogs", testPeerLogsSelect)
	t.Run("Peers", testPeersSelect)
	t.Run("Provides", testProvidesSelect)
	t.Run("RoutingTableEntries", testRoutingTableEntriesSelect)
	t.Run("RoutingTableSnapshots", testRoutingTableSnapshotsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Dials", testDialsUpdate)
	t.Run("IPAddresses", testIPAddressesUpdate)
	t.Run("MultiAddresses", testMultiAddressesUpdate)
	t.Run("PeerLogs", testPeerLogsUpdate)
	t.Run("Peers", testPeersUpdate)
	t.Run("Provides", testProvidesUpdate)
	t.Run("RoutingTableEntries", testRoutingTableEntriesUpdate)
	t.Run("RoutingTableSnapshots", testRoutingTableSnapshotsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Dials", testDialsSliceUpdateAll)
	t.Run("IPAddresses", testIPAddressesSliceUpdateAll)
	t.Run("MultiAddresses", testMultiAddressesSliceUpdateAll)
	t.Run("PeerLogs", testPeerLogsSliceUpdateAll)
	t.Run("Peers", testPeersSliceUpdateAll)
	t.Run("Provides", testProvidesSliceUpdateAll)
	t.Run("RoutingTableEntries", testRoutingTableEntriesSliceUpdateAll)
	t.Run("RoutingTableSnapshots", testRoutingTableSnapshotsSliceUpdateAll)
}
