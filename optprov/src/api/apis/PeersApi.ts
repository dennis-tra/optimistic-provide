/* tslint:disable */
/* eslint-disable */
/**
 * OptProv API
 * This is the REST API to interact and control with libp2p hosts. All responses not in the HTTP status code range [200,300) return the error object below. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Peer,
    PeerFromJSON,
    PeerToJSON,
} from '../models';

export interface GetPeerRequest {
    peerId: string;
}

/**
 * 
 */
export class PeersApi extends runtime.BaseAPI {

    /**
     * Returns information about a single peer.
     * Returns information about a single peer.
     */
    async getPeerRaw(requestParameters: GetPeerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Peer>> {
        if (requestParameters.peerId === null || requestParameters.peerId === undefined) {
            throw new runtime.RequiredError('peerId','Required parameter requestParameters.peerId was null or undefined when calling getPeer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/peers/{peerId}/`.replace(`{${"peerId"}}`, encodeURIComponent(String(requestParameters.peerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PeerFromJSON(jsonValue));
    }

    /**
     * Returns information about a single peer.
     * Returns information about a single peer.
     */
    async getPeer(requestParameters: GetPeerRequest, initOverrides?: RequestInit): Promise<Peer> {
        const response = await this.getPeerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
